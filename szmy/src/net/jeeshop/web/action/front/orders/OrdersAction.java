package net.jeeshop.web.action.front.orders;import java.io.IOException;import java.io.PrintWriter;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletResponse;import net.jeeshop.core.BaseAction;import net.jeeshop.core.FrontContainer;import net.jeeshop.core.KeyValueHelper;import net.jeeshop.core.MyCommonDao;import net.jeeshop.core.kuaidi100Helper;import net.jeeshop.core.dao.page.PagerModel;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.util.CommonPropertiesUtil;import net.jeeshop.core.util.CreateAreaUtil;import net.jeeshop.core.util.DateUtil;import net.jeeshop.core.util.SendSMSUtil;import net.jeeshop.core.util.TokenUtil;import net.jeeshop.services.common.ActivityCount;import net.jeeshop.services.common.Company;import net.jeeshop.services.common.Logistics_free;import net.jeeshop.services.common.Logistics_price;import net.jeeshop.services.common.Profit;import net.jeeshop.services.front.account.AccountService;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.activityCount.service.ActivityCountService;import net.jeeshop.services.front.address.AddressService;import net.jeeshop.services.front.address.bean.Address;import net.jeeshop.services.front.comment.CommentService;import net.jeeshop.services.front.comment.bean.Comment;import net.jeeshop.services.front.coupon.CouponService;import net.jeeshop.services.front.coupon.bean.Coupon;import net.jeeshop.services.front.express.bean.Express;import net.jeeshop.services.front.order.OrderService;import net.jeeshop.services.front.order.bean.Order;import net.jeeshop.services.front.orderdetail.OrderdetailService;import net.jeeshop.services.front.orderdetail.bean.Orderdetail;import net.jeeshop.services.front.orderpay.OrderpayService;import net.jeeshop.services.front.orderpay.bean.Orderpay;import net.jeeshop.services.front.ordership.OrdershipService;import net.jeeshop.services.front.ordership.bean.Ordership;import net.jeeshop.services.front.payutil.PayUtilService;import net.jeeshop.services.front.product.ProductService;import net.jeeshop.services.front.product.bean.Product;import net.jeeshop.services.front.product.bean.ProductStockInfo;import net.jeeshop.services.manage.activity.ActivityService;import net.jeeshop.services.manage.activity.bean.Activity;import net.jeeshop.services.manage.company.CompanyService;import net.jeeshop.services.manage.logistics.bean.Logistics;import net.jeeshop.services.manage.logistics.service.LogisticsService;import net.jeeshop.services.manage.logistics_free.service.Logistics_freeService;import net.jeeshop.services.manage.logistics_price.service.Logistics_priceService;import net.jeeshop.services.manage.orderlog.OrderlogService;import net.jeeshop.services.manage.orderlog.bean.Orderlog;import net.jeeshop.services.manage.profit.service.ProfitService;import net.jeeshop.services.manage.spec.SpecService;import net.jeeshop.services.manage.spec.bean.Spec;import net.sf.json.JSONArray;import org.apache.commons.lang.StringUtils;import org.apache.struts2.ServletActionContext;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.transaction.annotation.Isolation;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.support.WebApplicationContextUtils;import com.abc.trustpay.client.Base64;import com.abc.trustpay.client.Constants;import com.abc.trustpay.client.JSON;import com.abc.trustpay.client.ebus.PaymentRequest;import com.abc.trustpay.client.ebus.QueryOrderRequest;/** * 门户订单服务类 *  * @author Administrator *  */public class OrdersAction extends BaseAction<Order> {	private static final Logger logger = LoggerFactory.getLogger(OrdersAction.class);	private static final long serialVersionUID = 1L;	private OrderService orderService;	private OrderdetailService orderdetailService;	private OrderpayService orderpayService;	private ProductService productService; 	private CommentService commentService;	private OrdershipService ordershipService;	private AddressService addressService;	private CompanyService companyService;	private AccountService accountService;	private OrderlogService orderlogService;	private SpecService specService;	private CouponService couponService; 	private ProfitService profitService; 	private ActivityService activityService; 	private LogisticsService logisticsService;	private Logistics_priceService logistics_priceService;	private Logistics_freeService logistics_freeService;	private ActivityCountService activityCountService;		private PayUtilService payUtilService;	private List<Order> myOrders;	private Map<String, Order> orderMap;//	private boolean is_test = false;//是否是测试状态	private Product product;//用户进行评论时加载的商品信息	private Comment comment;//用户是否进行过评价；如果此对象不为空，则用户进行过评价		private String selectLeftMenu;//选中的个人中心的菜单项	private String payUrl;		private String jsonStr;		private MyCommonDao myCommonDao;	public void setMyCommonDao(MyCommonDao myCommonDao) {		this.myCommonDao = myCommonDao;	}			public void setActivityCountService(ActivityCountService activityCountService) {		this.activityCountService = activityCountService;	}	public Logistics_priceService getLogistics_priceService() {		return logistics_priceService;	}	public void setLogistics_priceService(			Logistics_priceService logisticsPriceService) {		logistics_priceService = logisticsPriceService;	}	public Logistics_freeService getLogistics_freeService() {		return logistics_freeService;	}	public void setLogistics_freeService(Logistics_freeService logisticsFreeService) {		logistics_freeService = logisticsFreeService;	}	public LogisticsService getLogisticsService() {		return logisticsService;	}	public void setLogisticsService(LogisticsService logisticsService) {		this.logisticsService = logisticsService;	}	public String getJsonStr() {		return jsonStr;	}	public void setJsonStr(String jsonStr) {		this.jsonStr = jsonStr;	}	public void setProfitService(ProfitService profitService) {		this.profitService = profitService;	}		public void setActivityService(ActivityService activityService) {		this.activityService = activityService;	}	public void setPayUtilService(PayUtilService payUtilService) {		this.payUtilService = payUtilService;	}	public String getPayUrl() {		return payUrl;	}	public void setPayUrl(String payUrl) {		this.payUrl = payUrl;	}	public void setCouponService(CouponService couponService) {		this.couponService = couponService;	}	public void setAddressService(AddressService addressService) {		this.addressService = addressService;	}	public void setOrderpayService(OrderpayService orderpayService) {		this.orderpayService = orderpayService;	}	public void setCompanyService(CompanyService companyService) {		this.companyService = companyService;	}	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}		public void setSpecService(SpecService specService) {		this.specService = specService;	}	public String getSelectLeftMenu() {		return selectLeftMenu;	}	public void setSelectLeftMenu(String selectLeftMenu) {		this.selectLeftMenu = selectLeftMenu;	}	public Comment getComment() {		return comment;	}	public void setComment(Comment comment) {		this.comment = comment;	}	public void setOrdershipService(OrdershipService ordershipService) {		this.ordershipService = ordershipService;	}	public CommentService getCommentService() {		return commentService;	}	public void setCommentService(CommentService commentService) {		this.commentService = commentService;	}	public Product getProduct() {		return product;	}	public void setProduct(Product product) {		this.product = product;	}	public ProductService getProductService() {		return productService;	}	public void setProductService(ProductService productService) {		this.productService = productService;	}	public Map<String, Order> getOrderMap() {		return orderMap;	}	public void setOrderMap(Map<String, Order> orderMap) {		this.orderMap = orderMap;	}	public List<Order> getMyOrders() {		return myOrders;	}	public void setMyOrders(List<Order> myOrders) {		this.myOrders = myOrders;	}	public OrderdetailService getOrderdetailService() {		return orderdetailService;	}	public void setOrderdetailService(OrderdetailService orderdetailService) {		this.orderdetailService = orderdetailService;	}	public OrderService getOrderService() {		return orderService;	}	public void setOrderService(OrderService orderService) {		this.orderService = orderService;	}	@Override	protected void selectListAfter() {		pager.setPagerUrl("myOrders.html");	}	@Override	public Order getE() {		return this.e;	}	@Override	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Order();		}		if(orderMap==null){			orderMap = new HashMap<String, Order>();		}		if(this.comment==null){			this.comment = new Comment();		}		super.setSelectMenu(FrontContainer.not_select_menu);//设置主菜单为不选中	}		@Override	public void insertAfter(Order e) {		e.clear();	}	/**	 * 订单确认页面，点击这个页面的确认支付按钮则会跳转到支付宝等的支付页面	 * 	 * @return	 */	public String orderComfig() {		return "orderComfig";	}		public String pay() throws Exception{		return insertAndPay();	}	/**	 * 创建订单，并跳转到支付页面让用户进行支付	 * 	 * @return	 * @throws Exception	 */	@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)	private String insertAndPay() throws Exception {//		if(!TokenUtil.getInstance().isTokenValid(getRequest())){//			throw new Exception("表单重复提交了！");//		}		int yhqzf=0;//是否优惠券全额支付		int jfzf=0;//是否积分全额支付		logger.error("==insertAndPay=="+e.getSelectAddressID()+",expressCode = "+e.getExpressCode()+",otherRequirement = " + e.getOtherRequirement());		Account account = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (account == null || StringUtils.isBlank(account.getAccount())) {			return "toLogin";		}				if(StringUtils.isBlank(e.getSelectAddressID()) || StringUtils.isBlank(e.getExpressCode())){			throw new NullPointerException("非法请求！");		}		//从session中获取用户购买的商品列表		CartInfo cartInfo = (CartInfo) getSession().getAttribute(FrontContainer.myCart);		if (cartInfo == null || cartInfo.getProductList().size() == 0) {			throw new NullPointerException("购物车中没有可支付的商品!");		}				//检测商品是否都有库存,如果没有库存需要提醒用户		synchronized (SystemManager.product_stock_lock) {			boolean no = false;			for (int i = 0; i < cartInfo.getProductList().size(); i++) {				Product product = cartInfo.getProductList().get(i);				if(SystemManager.productStockMap.get(product.getId())==null){					product.product_sorry_str = "抱歉，该商品目前库存不足！";					no = true;				}								ProductStockInfo stockInfo = SystemManager.productStockMap.get(product.getId());				if(product.getBuyCount() > stockInfo.getStock()){					//如果用户购买的某个商品的数量大于该商品的库存数，则提示					product.product_sorry_str = "抱歉，该商品目前库存不足！";					no = true;				}				if(product.getBuySpecInfo()!=null){//判断规格库存					Integer sto = stockInfo.getSpecMap().get(product.getBuySpecInfo().getSpecSize());					if(sto==null||product.getBuyCount() >sto){						product.product_sorry_str = "抱歉，该商品目前库存不足！";						no = true;					}				}			}						//库存不足，则刷最后支付页面，提示用户某些商品的库存不足，请重新选购			if(no){				logger.error("某些商品库存不足！请重新选购！");				getRequest().setAttribute("message", "某些商品库存不足！请重新选购！");				getRequest().getRequestDispatcher("/cart!cart.action").forward(getRequest(), getResponse());				return null;			}						if(!no){				//如果检查没有出现库存不足的情况，则进行砍库存操作				for (int i = 0; i < cartInfo.getProductList().size(); i++) {					Product product = cartInfo.getProductList().get(i);										//最后确认订单判断活动日期和数量					if(StringUtils.isNotBlank(product.getActivityID())){						product.product_sorry_str ="本品为活动商品!请直接购买!";						getRequest().setAttribute("message", "包含活动商品!请选择直接购买!");						getRequest().getRequestDispatcher("/cart!cart.action").forward(getRequest(), getResponse());						return null;						/*						Activity activity = activityService.selectById(product.getActivityID());						if(DateUtil.strToDatehhmmss(activity.getStartDate().substring(0,19)).after(new Date())){							if(activity.getActivityType().equals("ms")){								product.product_sorry_str ="活动还未开始!请等待!";								getRequest().setAttribute("message", "活动还未开始!请等待!");								getRequest().getRequestDispatcher("/cart!cart.action").forward(getRequest(), getResponse());								return null;							}						}						if(DateUtil.strToDatehhmmss(activity.getEndDate().substring(0,19)).before(new Date())){							product.product_sorry_str ="活动已经结束!";							getRequest().setAttribute("message", "活动已经结束!");							getRequest().getRequestDispatcher("/cart!cart.action").forward(getRequest(), getResponse());							return null;						}						ActivityCount ac=new ActivityCount(account.getAccount(),activity.getId(),product.getId());						ActivityCount ac2 = activityCountService.selectOne(ac);						int count=0;						if(ac2!=null){							count=ac2.getCount();						}						if(activity.getMaxSellCount()>0&&(product.getBuyCount()+count)>activity.getMaxSellCount()){							product.product_sorry_str ="您选择的数量超出本次活动您能购买的最大数量!";							getRequest().setAttribute("message", "您选择的数量超出活动最大购买数量!");							getRequest().getRequestDispatcher("/cart!cart.action").forward(getRequest(), getResponse());							return null;						}						if(ac2!=null){							ac2.setCount(product.getBuyCount()+count);							activityCountService.update(ac2);						}else{							ac.setCount(product.getBuyCount()+count);							activityCountService.insert(ac);						}						*/					}															ProductStockInfo stockInfo = SystemManager.productStockMap.get(product.getId());					stockInfo.setStock(stockInfo.getStock() - product.getBuyCount());					stockInfo.setChangeStock(true);										if(product.getBuySpecInfo()!=null){//减规格库存						Integer sto = stockInfo.getSpecMap().get(product.getBuySpecInfo().getSpecSize());						stockInfo.getSpecMap().put(product.getBuySpecInfo().getSpecSize(), sto- product.getBuyCount());												Spec spec=new Spec();						spec.setProductID(product.getId());						spec.setSpecSize(product.getBuySpecInfo().getSpecSize());						spec.setSpecStock((sto- product.getBuyCount())+"");						specService.updateStock(spec);											}										SystemManager.productStockMap.put(product.getId(),stockInfo);					//真实减库存					Product pro=new Product();					pro.setId(product.getId());					pro.setStock(stockInfo.getStock());					productService.updateStockAfterPaySuccess(pro);				}			}					}				//获取配送方式		Express express = SystemManager.expressMap.get(e.getExpressCode());		if(express==null){			throw new NullPointerException("没有编码为"+e.getExpressCode()+"的配送方式！本次请求视为非法！");		}				Set<String> set=new HashSet<String>();				for (int i = 0; i < cartInfo.getProductList().size(); i++) {			Product product = cartInfo.getProductList().get(i);			set.add(product.getCompID());		}		String pid =null;		/*不同商家暂时不做处理		if(set.size()>1){		Order po = new Order();		po.setAccount(account.getAccount());		po.setAmount(Double.valueOf(cartInfo.getAmount())+express.getFee()*set.size()+"");		po.setCreatedate(DateUtil.dateToStr(new Date()));		po.setStatus(Order.order_status_init);		po.setIsParent(Order.order_isParent_y);		orderService.insert(po);		pid = po.getId();		}		*/		//创建订单明细集合				for (String compid : set) {											//创建订单对象			Order order = new Order();			order.setAccount(account.getAccount());			order.setExpressCode(express.getCode());//配送方式编码			/*order.setExpressName(express.getName());//配送方式名称*/			//order.setFee(df.format(express.getFee()));//订单配送费			order.setAmountExchangeScore(cartInfo.getTotalExchangeScore());//订单总兑换积分。订单支付成功以后扣除			order.setRebate(1);			order.setStatus(net.jeeshop.services.common.Order.order_status_init);			order.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_n);			order.setOtherRequirement(e.getOtherRequirement());//附加要求			order.setCompID(compid);			order.setParentId(pid);									orderService.insert(order);			String oid=order.getId();			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			//配送信息			Ordership ordership = new Ordership();			ordership.setOrderid(oid);			Address address = addressService.selectById(e.getSelectAddressID());			if(address==null){				throw new NullPointerException("根据ID="+e.getSelectAddressID()+"查询不到配送地址信息！本次请求视为非法！");			}			logger.error(address.toString());						String proinceName = CreateAreaUtil.getAreaMap().get(address.getProvince()).getName();			String cityName =address.getCity()==null?"": CreateAreaUtil.getAreaMap().get(address.getCity()).getName();			String areaName = address.getArea()==null?"": CreateAreaUtil.getAreaMap().get(address.getArea()).getName();			ordership.setShipname(address.getName());			ordership.setShipaddress(address.getAddress());			ordership.setProvinceCode(address.getProvince());			ordership.setProvince(proinceName);			ordership.setCityCode(address.getCity());			ordership.setCity(cityName);			ordership.setAreaCode(address.getArea());			ordership.setArea(areaName);			ordership.setPhone(address.getMobile());			ordership.setZip(address.getZip());			ordership.setSex("1");			logger.error(ordership.toString());			ordershipService.insert(ordership);						int score = 0;//订单积分 等于订单项中每个商品赠送的积分总和			Double ptotal=0.00;//订单商品总金额			int pnum=0;//订单商品总金额			Double yunfei=0.00;//订单商品总运费		///////////////////////////////////////////////////////////////////////////////////////////////////////////			for (int i = 0; i < cartInfo.getProductList().size(); i++) {			Product product = cartInfo.getProductList().get(i);			if(compid.equals(product.getCompID())){			pnum+=product.getBuyCount();			score+= product.getScore();//计算积分			ptotal+=Double.valueOf(product.getNowPrice()) * product.getBuyCount();////订单商品总金额			yunfei+=Double.valueOf(product.getLogisMap().get("price"));//订单商品总运费			order.setRemark(product.getName()+(pnum>1?"...":""));			order.setCompName(product.getCompName());						//订单中各个商品信息			Orderdetail orderdetail = new Orderdetail();			orderdetail.setProductID(Integer.valueOf(product.getId()));			orderdetail.setGiftID(product.getGiftID());//商品赠品ID			orderdetail.setPrice(product.getNowPrice());//商品现价			orderdetail.setNumber(product.getBuyCount());//购买数//			orderdetail.setFee(String.valueOf(express.getFee()));//配送费			orderdetail.setFee(product.getLogisMap().get("price"));//配送费			orderdetail.setProductName(product.getName());			orderdetail.setTotal0(String.valueOf(Double.valueOf(orderdetail.getPrice()) * orderdetail.getNumber()));//订单项小计			orderdetail.setScore(product.getScore());//活的赠送的积分			if(product.getBuySpecInfo()!=null){				//按照规格计算				orderdetail.setSpecInfo(product.getBuySpecInfo().getSpecSize());				orderdetail.setPurchasePrice(product.getBuySpecInfo().getPurchasePrice());			}else{				orderdetail.setPurchasePrice(Double.valueOf(product.getChuChangPrice()));			}			orderdetail.setOrderID(Integer.valueOf(oid));			orderdetailService.insert(orderdetail);						//createPayInfo(order,ordership);			}		}		order.setExpressName(cartInfo.getProductList().get(0).getLogisMap().get("type"));//配送方式名称		order.setFee(df.format(yunfei));//订单配送费		//c处理订单信息		order.setQuantity(pnum);		order.setPtotal(df.format(ptotal));//订单商品总金额		//order.setAmount(df.format(ptotal+express.getFee()));//订单总金额		order.setAmount(df.format(ptotal+yunfei));//订单总金额		order.setScore(score);//订单总积分						//购物券处理		String syyhq = getRequest().getParameter("syyhq");		String couponMoney = getRequest().getParameter("couponMoney");		String[] values = getRequest().getParameterValues("couponId");								if(syyhq!=null&&syyhq.equals("1")){			if(couponMoney!=null&&Double.valueOf(couponMoney)>0){				Double m=0.00;				for (String s : values) {					Coupon c = couponService.selectById(s);					c.setRemaining(0.00);					c.setStatus(net.jeeshop.services.common.Coupon.status_n);					c.setRemark("已使用");					couponService.update(c);					m+=c.getAmount();				}				Orderpay orderpay = new Orderpay();				orderpay.setOrderid(order.getId());				orderpay.setPaystatus(net.jeeshop.services.common.Orderpay.orderpay_paystatus_y);				orderpay.setPayamount(m);				orderpay.setPaymethod(net.jeeshop.services.common.Orderpay.orderpay_paymethod_yhq);				orderpayService.insert(orderpay);												if(m>Double.valueOf(order.getAmount())){					yhqzf=1;					order.setPaystatus(net.jeeshop.services.common.Order.order_status_pass);					//发送短信					net.jeeshop.services.manage.company.bean.Company comp = companyService.selectById(compid);					String sms = CommonPropertiesUtil.getSMStemValue( "WAIT_SELLER_SEND_GOODS").replace("orderid", order.getId());					String rtmsg=SendSMSUtil.sendSMS(sms,comp.getContactorTelephone());					logger.error("支付成功发送短信--->号码："+comp.getContactorTelephone()+"，内容："+sms+",结果："+rtmsg);									}				order.setCoupon(m);			}		}						//活动积分		String integral = getRequest().getParameter("integral");		if(integral!=null&&Double.valueOf(integral)>0){				if((Double.valueOf(integral)/100)>=Double.valueOf(order.getAmount())){					jfzf=1;					order.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);					order.setStatus(net.jeeshop.services.common.Order.order_status_pass);					//发送短信					net.jeeshop.services.manage.company.bean.Company comp = companyService.selectById(order.getCompID());					String sms = CommonPropertiesUtil.getSMStemValue( "WAIT_SELLER_SEND_GOODS").replace("orderid", order.getId());					String rtmsg=SendSMSUtil.sendSMS(sms,comp.getContactorTelephone());					logger.error("支付成功发送短信--->号码："+comp.getContactorTelephone()+"，内容："+sms+",结果："+rtmsg);				}				order.setUseIntegral(Double.valueOf(integral));				Account ac=new Account();				ac.setId(account.getId());				ac.setMoney(account.getMoney()-order.getUseIntegral());				accountService.update(ac);				account.setMoney(account.getMoney()-order.getUseIntegral());				getSession().setAttribute(FrontContainer.USER_INFO,account);								Orderpay orderpay = new Orderpay();				orderpay.setOrderid(order.getId());				orderpay.setPaystatus(net.jeeshop.services.common.Orderpay.orderpay_paystatus_y);				orderpay.setPayamount(Double.valueOf(integral)/100);				orderpay.setPaymethod(net.jeeshop.services.common.Orderpay.orderpay_paymethod_jf);				orderpayService.insert(orderpay);				Account ac2=new Account();				ac2.setId(account.getId());				Double money=(account.getMoney()==null?0.0:account.getMoney())-Double.valueOf(integral);				if(money<0)money=0.0;				ac2.setMoney(money);				accountService.updateMoney(ac2);				account.setMoney(ac2.getMoney());										}else{			 Product product = cartInfo.getProductList().get(0);			if(product.getActivityID()!=null&&!product.getActivityID().equals("")){				Activity ac = activityService.selectById(product.getActivityID());				if(ac.getActivityType().equals("m")){				order.setActivityID(product.getActivityID());				order.setIntegral(Double.valueOf((int)(Double.valueOf(order.getPtotal())/Double.valueOf(ac.getMinprice()))*ac.getExchangeScore()));				}			}		}														orderService.update(order);				createQuickPayInfo(order);				// 记录订单创建日志		Orderlog orderlog = new Orderlog();		orderlog.setOrderid(String.valueOf(oid));		orderlog.setAccount(order.getAccount());		orderlog.setContent("【创建订单】用户创建订单。订单总金额：" + order.getAmount()+(yhqzf==1?",并使用优惠券全额支付":""));		orderlog.setAccountType(net.jeeshop.services.common.Orderlog.orderlog_accountType_w);		orderlogService.insert(orderlog);				if(pid==null)pid=oid;//非合并订单			}		//清空购物车		cartInfo.clear();		cartInfo = null;		getSession().setAttribute(FrontContainer.myCart,null);		if(set.size()>1){//不同商家合并订单,暂时不做处理,直接跳转到订单列表			return "showOrders";		}else{//非合并订单,直接跳转到支付						if(jfzf==1){//优惠券全额支付				getRequest().setAttribute("message", "你已使用优惠券全额支付成功,请等待发货!");				return "showOrders";			}else	if(jfzf==1){//积分全额支付				getRequest().setAttribute("message", "你已使用积分全额支付成功,请等待发货!");				return "showOrders";			}else{				//getResponse().sendRedirect(getRequest().getContextPath()+"/quickpaySel.jsp?id="+pid);				return toQuickPay(pid);			}		}				//return "showOrders";	}	public String toQuickPay(String id){		Order order=this.orderService.selectById(id);		getSession().setAttribute("quickOrder", order);		return "toQuick";	}	/**	 * 点击直接购买提交的订单	 * teng	 * @return	 * @throws Exception	 */	@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)	public String payNow() throws Exception {		logger.error("==insertAndPay=="+e.getSelectAddressID()+",expressCode = "+e.getExpressCode()+",otherRequirement = " + e.getOtherRequirement());		Account account = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (account == null || StringUtils.isBlank(account.getAccount())) {			return "toLogin";		}		int yhqzf=0;		int jfzf=0;		if(StringUtils.isBlank(e.getSelectAddressID()) || StringUtils.isBlank(e.getExpressCode())){			throw new NullPointerException("非法请求！");		}		//从session中获取用户购买的商品列表		CartInfo cartInfo = (CartInfo) getSession().getAttribute(FrontContainer.myBuyNow);		if (cartInfo == null || cartInfo.getProductList().size() == 0) {			throw new NullPointerException("商品品数据丢失!");		}		int activityStart=0;		String activityID=null;		String activityType=null;		//检测商品是否都有库存,如果没有库存需要提醒用户		synchronized (SystemManager.product_stock_lock) {				boolean no = false;				String pid="";				Product product = cartInfo.getProductList().get(0);				pid=product.getId();								//判断库存--------------------------------------------				if(SystemManager.productStockMap.get(product.getId())==null){					no = true;				}								ProductStockInfo stockInfo = SystemManager.productStockMap.get(product.getId());				if(product.getBuyCount() > stockInfo.getStock()){					//如果用户购买的某个商品的数量大于该商品的库存数，则提示					no = true;				}				if(product.getBuySpecInfo()!=null){//判断规格库存					Integer sto = stockInfo.getSpecMap().get(product.getBuySpecInfo().getSpecSize());					if(sto==null||product.getBuyCount() >sto){						no = true;					}				}							//库存不足，则刷最后支付页面，提示用户某些商品的库存不足，请重新选购				if(no){					getSession().setAttribute(FrontContainer.myBuyNow,null);					getRequest().setAttribute("message", "商品库存不足！请重新选购！");					getRequest().getRequestDispatcher("/product!product?e.id="+pid).forward(getRequest(), getResponse());					return null;				}				//判断库存--------------------------------------------							//判断是否符合活动-------------------------						if(StringUtils.isNotBlank(product.getActivityID())){				Activity activity = activityService.selectById(product.getActivityID());				if(DateUtil.strToDatehhmmss(activity.getStartDate().substring(0,19)).before(new Date())){					if(DateUtil.strToDatehhmmss(activity.getEndDate().substring(0,19)).after(new Date())){					product.setPrice(product.getActivityPrice()+"");					activityStart=1;					activityID=activity.getId();					activityType=activity.getActivityType();					if(activity.getMaxSellCount()>0){						ActivityCount ac=new ActivityCount(account.getAccount(),activity.getId(),product.getId());						ActivityCount ac2 = activityCountService.selectOne(ac);						int count=0;						if(ac2!=null){							count=ac2.getCount();						}						if(activity.getMaxSellCount()>0&&(product.getBuyCount()+count)>activity.getMaxSellCount()){							getRequest().setAttribute("message", "本商品活动期内,您还能能购买的数量为:"+(activity.getMaxSellCount()-count));							getRequest().getRequestDispatcher("/product!product?e.id="+product.getId()).forward(getRequest(), getResponse());							return null;						}						if(ac2!=null){							ac2.setCount(product.getBuyCount()+count);							activityCountService.update(ac2);						}else{							ac.setCount(product.getBuyCount()+count);							activityCountService.insert(ac);						}												}					}else{						activityStart=3;						myCommonDao.executeSql(2, "update t_product set activityID=null,activityType=null where activityID="+activity.getId());					}				}			}			if(activityStart==3){				getRequest().setAttribute("message", "操作失败!活动已到期,请重新购买!");				getRequest().getRequestDispatcher("/product!product?e.id="+product.getId()).forward(getRequest(), getResponse());				return null;			}			//判断是否符合活动-------------------------										//如果检查没有出现库存不足的情况，则进行砍库存操作---					stockInfo.setStock(stockInfo.getStock() - product.getBuyCount());					stockInfo.setChangeStock(true);										if(product.getBuySpecInfo()!=null){//减规格库存						Integer sto = stockInfo.getSpecMap().get(product.getBuySpecInfo().getSpecSize());						stockInfo.getSpecMap().put(product.getBuySpecInfo().getSpecSize(), sto- product.getBuyCount());						Spec spec=new Spec();						spec.setProductID(product.getId());						spec.setSpecSize(product.getBuySpecInfo().getSpecSize());						spec.setSpecStock((sto- product.getBuyCount())+"");						specService.updateStock(spec);					}										SystemManager.productStockMap.put(product.getId(),stockInfo);					//真实减库存并加销量					int actcount=product.getActivityBuyCount()==null?product.getBuyCount():(product.getActivityBuyCount()+product.getBuyCount());										myCommonDao.executeSql(2, "update t_product set stock="+stockInfo.getStock()+",sellcount=sellcount+"+product.getBuyCount()+",activityBuyCount="+actcount+" where id="+product.getId());				//如果检查没有出现库存不足的情况，则进行砍库存操作---					}				//获取配送方式		Express express = SystemManager.expressMap.get(e.getExpressCode());		if(express==null){			throw new NullPointerException("没有编码为"+e.getExpressCode()+"的配送方式！本次请求视为非法！");		}						//创建订单明细集合			Product product = cartInfo.getProductList().get(0);			int score= product.getScore();//订单积分 等于订单项中每个商品赠送的积分总和			//创建订单对象			Order order = new Order();			order.setQuantity(product.getBuyCount());			order.setRebate(1);			order.setStatus(net.jeeshop.services.common.Order.order_status_init);			order.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_n);			order.setOtherRequirement(e.getOtherRequirement());//附加要求			order.setCompID(product.getCompID());			order.setCompName(product.getCompName());			order.setAccount(account.getAccount());			order.setRemark(product.getName());			order.setScore(score);			order.setExpressCode(express.getCode());//配送方式编码			//order.setExpressName(express.getName());//配送方式名称			order.setExpressName(product.getLogisMap().get("type"));//配送方式名称			order.setAmountExchangeScore(cartInfo.getTotalExchangeScore());//订单总兑换积分。订单支付成功以后扣除			/**			 * 对金额进行格式化，防止出现double型数字计算造成的益出。			 */			order.setPtotal(df.format(Double.valueOf(product.getNowPrice())* product.getBuyCount()));//订单商品总金额			order.setFee(df.format(Double.valueOf(product.getLogisMap().get("price"))));//订单总配送费			order.setAmount(df.format(Double.valueOf(order.getPtotal())+Double.valueOf(order.getFee())));//订单总金额						//购物券处理			String syyhq = getRequest().getParameter("syyhq");			String couponMoney = getRequest().getParameter("couponMoney");			String[] values = getRequest().getParameterValues("couponId");									Double m=0.00;			if(syyhq!=null&&syyhq.equals("1")){				if(couponMoney!=null&&Double.valueOf(couponMoney)>0){										for (String s : values) {						Coupon c = couponService.selectById(s);						c.setStatus(net.jeeshop.services.common.Coupon.status_n);						couponService.update(c);						m+=c.getAmount();					}										if(m>Double.valueOf(order.getAmount())){						yhqzf=1;						order.setPaystatus(net.jeeshop.services.common.Order.order_status_pass);						//发送短信						net.jeeshop.services.manage.company.bean.Company comp = companyService.selectById(order.getCompID());						String sms = CommonPropertiesUtil.getSMStemValue( "WAIT_SELLER_SEND_GOODS").replace("orderid", order.getId());						String rtmsg=SendSMSUtil.sendSMS(sms,comp.getContactorTelephone());						logger.error("支付成功发送短信--->号码："+comp.getContactorTelephone()+"，内容："+sms+",结果："+rtmsg);											}					order.setCoupon(m);				}			}			String integral = getRequest().getParameter("integral");			if(integral!=null&&Double.valueOf(integral)>0){					if(Double.valueOf(integral)/100>=Double.valueOf(order.getAmount())){						jfzf=1;						order.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);						order.setStatus(net.jeeshop.services.common.Order.order_status_pass);											}					order.setUseIntegral(Double.valueOf(integral));			}else{				if(product.getActivityID()!=null&&!product.getActivityID().equals("")){					Activity ac = activityService.selectById(product.getActivityID());					if(ac.getActivityType().equals("m")){					order.setActivityID(product.getActivityID());					order.setIntegral(Double.valueOf((int)(Double.valueOf(order.getPtotal())/Double.valueOf(ac.getMinprice()))*ac.getExchangeScore()));					}				}			}						orderService.insert(order);						if(m>0){				Orderpay orderpay = new Orderpay();				orderpay.setOrderid(order.getId());				orderpay.setPaystatus(net.jeeshop.services.common.Orderpay.orderpay_paystatus_y);				orderpay.setPayamount(m);				orderpay.setPaymethod(net.jeeshop.services.common.Orderpay.orderpay_paymethod_yhq);				orderpayService.insert(orderpay);			}			if(integral!=null&&Double.valueOf(integral)>0){				Orderpay orderpay = new Orderpay();				orderpay.setOrderid(order.getId());				orderpay.setPaystatus(net.jeeshop.services.common.Orderpay.orderpay_paystatus_y);				orderpay.setPayamount(Double.valueOf(integral)/100);				orderpay.setPaymethod(net.jeeshop.services.common.Orderpay.orderpay_paymethod_jf);				orderpayService.insert(orderpay);				Account ac2=new Account();				ac2.setId(account.getId());				Double money=(account.getMoney()==null?0.0:account.getMoney())-Double.valueOf(integral);				if(money<0)money=0.0;				ac2.setMoney(money);				accountService.updateMoney(ac2);				account.setMoney(ac2.getMoney());			}						Orderdetail orderdetail = new Orderdetail();			orderdetail.setOrderID(Integer.valueOf(order.getId()));			orderdetail.setProductID(Integer.valueOf(product.getId()));			orderdetail.setGiftID(product.getGiftID());//商品赠品ID			orderdetail.setPrice(product.getNowPrice());//商品现价			orderdetail.setNumber(product.getBuyCount());//购买数			orderdetail.setFee(String.valueOf(express.getFee()));//配送费			orderdetail.setProductName(product.getName());			orderdetail.setTotal0(String.valueOf(Double.valueOf(orderdetail.getPrice()) * orderdetail.getNumber()));//订单项小计			orderdetail.setScore(product.getScore());//活的赠送的积分			orderdetail.setActivityID(activityID);			orderdetail.setActivityType(activityType);			if(product.getBuySpecInfo()!=null){				//按照规格计算				orderdetail.setSpecInfo(product.getBuySpecInfo().getSpecSize());				orderdetail.setPurchasePrice(product.getBuySpecInfo().getPurchasePrice());			}else{				orderdetail.setPurchasePrice(Double.valueOf(product.getChuChangPrice()));			}			orderdetailService.insert(orderdetail);						/**			 * 配送地址信息			 */			Ordership ordership = new Ordership();			ordership.setOrderid(order.getId());						Address address = addressService.selectById(e.getSelectAddressID());			if(address==null){				throw new NullPointerException("根据ID="+e.getSelectAddressID()+"查询不到配送地址信息！本次请求视为非法！");			}			logger.error(address.toString());						String proinceName = CreateAreaUtil.getAreaMap().get(address.getProvince()).getName();			String cityName = address.getCity()==null?"":CreateAreaUtil.getAreaMap().get(address.getCity()).getName();			String areaName = address.getArea()==null?"": CreateAreaUtil.getAreaMap().get(address.getArea()).getName();			ordership.setShipname(address.getName());			ordership.setShipaddress(address.getAddress());			ordership.setProvinceCode(address.getProvince());			ordership.setProvince(proinceName);			ordership.setCityCode(address.getCity());			ordership.setCity(cityName);			ordership.setAreaCode(address.getArea());			ordership.setArea(areaName);			ordership.setPhone(address.getMobile());			ordership.setZip(address.getZip());			ordership.setSex("1");			logger.error(ordership.toString());			ordershipService.insert(ordership);									createQuickPayInfo(order);//创建快捷支付						// 记录订单创建日志			Orderlog orderlog = new Orderlog();			orderlog.setOrderid(String.valueOf(order.getId()));			orderlog.setAccount(order.getAccount());			orderlog.setContent("【创建订单】用户创建订单。订单总金额：" + order.getAmount());			orderlog.setAccountType(net.jeeshop.services.common.Orderlog.orderlog_accountType_w);			orderlogService.insert(orderlog);			getSession().setAttribute(FrontContainer.myBuyNow,null);			if(yhqzf==1){				getRequest().setAttribute("message", "你已使用优惠券全额支付成功,请等待发货!");				return "showOrders";			}else{ 				if(jfzf==1){					//发送短信					net.jeeshop.services.manage.company.bean.Company comp = companyService.selectById(order.getCompID());					String sms = CommonPropertiesUtil.getSMStemValue( "WAIT_SELLER_SEND_GOODS").replace("orderid", order.getId());					String rtmsg=SendSMSUtil.sendSMS(sms,comp.getContactorTelephone());					logger.error("支付成功发送短信--->号码："+comp.getContactorTelephone()+"，内容："+sms+",结果："+rtmsg);					getRequest().setAttribute("message", "你已使用积分全额支付成功,请等待发货!");					return "showOrders";				}else{					//getResponse().sendRedirect(getRequest().getContextPath()+"/quickpaySel.jsp?id="+order.getId());					//getSession().setAttribute("nowOrder", order);					//return "toQuick";					return toQuickPay(order.getId());				}			//return "showOrders";		}	}	/**	 * 跳转到退货页面	 * Teng	 * 2015-04-07	 * @return	 */	public String toReturnGoods(){		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null) {			return "toLogin";		}		getRequest().setAttribute("selectLeftMenu", "orders");//		String productID = getRequest().getParameter("productID");		String id = getRequest().getParameter("id");		if(StringUtils.isBlank(id)){			throw new NullPointerException("参数异常！");		}		 e= orderService.selectById(id);		if(e==null){			throw new NullPointerException("根据订单ID查询不到订单信息！");		}		return "returnGoods";	}	/**	 * 退货处理	 * Teng	 * 2015-04-09	 * @return	 */	public String doReturnGoods(){		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null) {			return "toLogin";		}		getSession().setAttribute(FrontContainer.selectMenu, FrontContainer.not_select_menu);//		String productID = getRequest().getParameter("productID");		String id = getRequest().getParameter("orderid");		String type = getRequest().getParameter("WIDtransport_type");		String expressCompanyName = getRequest().getParameter("expressCompanyName");		String WIDinvoice_no = getRequest().getParameter("WIDinvoice_no");		if(StringUtils.isBlank(id)||StringUtils.isBlank(type)||StringUtils.isBlank(WIDinvoice_no)){			throw new NullPointerException("参数异常！");		}		e= orderService.selectById(id);		if(e==null){			throw new NullPointerException("根据订单ID查询不到订单信息！");		}		e=new Order();		e.setId(id);		if(type.equals("no")){			e.setReturnExpressName(null);		}else if(type.equals("POST")){			e.setReturnExpressName("中国邮政");		}else{			e.setReturnExpressName(expressCompanyName);		}		e.setReturnExpressNo(WIDinvoice_no);		e.setRefundStatus("WAIT_SELLER_CONFIRM_GOODS");		orderService.update(e);		insertOrderlog(id, "【退货】已退货，等待卖家收到退货");		getRequest().setAttribute("message", "订单["+id+"]提交退货成功,请等待商家处理!");		return "returnSuccess";	}	/**	 * 跳转到退货申请页面	 * Teng	 * 2015-04-07	 * @return	 */	public String toReturnApply(){		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null) {			return "toLogin";		}		getSession().setAttribute(FrontContainer.selectMenu, FrontContainer.not_select_menu);//		String productID = getRequest().getParameter("productID");		String id = getRequest().getParameter("id");		if(StringUtils.isBlank(id)){			throw new NullPointerException("参数异常！");		}		//查询订单信息		e= orderService.selectById(id);		if(e==null){			throw new NullPointerException("根据订单ID查询不到订单信息！");		}				//查询订单物流信息		e.setKuaid100Info(kuaidi100Helper.selectKuaidi100());		selectLeftMenu = "orders";		return "returnApply";	}	/**	 * 跳转到退款申请页面	 * Teng	 * 2015-04-07	 * @return	 */	public String toReturnMoneyApply(){		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null) {			return "toLogin";		}		getSession().setAttribute(FrontContainer.selectMenu, FrontContainer.not_select_menu);//		String productID = getRequest().getParameter("productID");		String id = getRequest().getParameter("id");		if(StringUtils.isBlank(id)){			throw new NullPointerException("参数异常！");		}		//查询订单信息		e= orderService.selectById(id);		if(e==null){			throw new NullPointerException("根据订单ID查询不到订单信息！");		}				//查询订单物流信息		e.setKuaid100Info(kuaidi100Helper.selectKuaidi100());		selectLeftMenu = "orders";		return "returnMoneyApply";	}	/**	 * 退货申请处理	 * Teng	 * 2015-04-07	 * @return	 */	public String doReturnApply(){		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null) {			return "toLogin";		}		getSession().setAttribute(FrontContainer.selectMenu, FrontContainer.not_select_menu);		String id = getRequest().getParameter("id");		String reason = getRequest().getParameter("reason");		String returnMoney = getRequest().getParameter("returnMoney");		String type = getRequest().getParameter("type");		if(StringUtils.isBlank(reason)||StringUtils.isBlank(reason)||StringUtils.isBlank(returnMoney)){			throw new NullPointerException("参数异常！");		}		e= orderService.selectById(id);		if(e==null){			throw new NullPointerException("根据订单ID查询不到订单信息！");		}		e=new Order();		e.setId(id);		e.setRefundStatus("WAIT_SELLER_AGREE");		e.setReturnReason(reason);		e.setReturnMoney(Double.valueOf(returnMoney));		orderService.update(e);		getRequest().setAttribute("message", "订单["+id+"]提交"+type+"申请成功,请等待处理!");		insertOrderlog(id, "【提交"+type+"申请】等待卖家同意");		return "returnSuccess";	}			/**	 * 异步查询是否设置银行卡	 * 2015-04-03 10:10:23	 * Teng 	 */	public String getBankSet() {		Account account = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		  try {		   HttpServletResponse response = ServletActionContext.getResponse();		   PrintWriter writer = response.getWriter();			account=accountService.selectOne(account);			if(account==null || (account.getAccountBank()==null) || (account.getAccountNumber()==null)){				writer.print(0);//银行卡未设置			}else{				writer.print(1);//银行卡已设置			}		   		   writer.flush();		   writer.close();		  } catch (IOException e) {			  logger.error("getBankSet..."+e);		  }		  return null;		 }	/**	 * ajax删除订单	 * @return	 */	public String deleteOrder(){		Account account = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (account == null || StringUtils.isBlank(account.getAccount())) {			return "toLogin";		}		  try {		  		   if(StringUtils.isBlank(e.getId())){			   jsonStr="2";			}else{				Order o = orderService.selectById(e.getId());				if(o==null){					jsonStr="2";				}else{					if((o.getStatus().equals(net.jeeshop.services.common.Order.order_status_init)&&o.getPaystatus().equals(net.jeeshop.services.common.Order.order_paystatus_n))||o.getStatus().equals(net.jeeshop.services.common.Order.order_status_file)||o.getStatus().equals(net.jeeshop.services.common.Order.order_status_cancel)){			orderService.delete(e);			insertOrderlog(e.getId(), "【订单删除】");			jsonStr="1";					}else{						jsonStr="2";					}				}			}		   		  } catch (Exception e) {			  logger.error("deleteOrder..."+e);		  }		return "toJson";	}	/**	 * ajax取消订单	 * @return	 */	public String cancelOrder(){		Account account = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (account == null || StringUtils.isBlank(account.getAccount())) {			return "toLogin";		}		try {			if(StringUtils.isBlank(e.getId())){				jsonStr="2";			}else{				Order o = orderService.selectById(e.getId());				if(o==null){					jsonStr="2";				}else{					if(o.getStatus().equals(net.jeeshop.services.common.Order.order_status_init)&&o.getPaystatus().equals(net.jeeshop.services.common.Order.order_paystatus_n)){												Orderdetail od=new Orderdetail();						od.setOrderID(Integer.valueOf(o.getId()));						List<Orderdetail> list = orderdetailService.selectList(od);						synchronized (SystemManager.product_stock_lock) {//操作库存必须加锁						for (Orderdetail oda : list) {							ProductStockInfo stockInfo = SystemManager.productStockMap.get(oda.getProductID()+"");							stockInfo.setStock(stockInfo.getStock()+oda.getNumber());														if(StringUtils.isNotBlank(oda.getSpecInfo())){								Map<String, Integer> specMap = stockInfo.getSpecMap();								Integer stock = specMap.get(oda.getSpecInfo());								stockInfo.getSpecMap().put(oda.getSpecInfo(), stock+oda.getNumber());								myCommonDao.executeSql(2, "update t_spec set specStock="+(stock+oda.getNumber())+" where productID="+oda.getProductID()+" and specSize='"+oda.getSpecInfo()+"'");							}							SystemManager.productStockMap.put(oda.getProductID()+"", stockInfo);							myCommonDao.executeSql(2, "update t_product set stock="+stockInfo.getStock()+" where id="+oda.getProductID());							if(StringUtils.isNotBlank(oda.getActivityID())){								myCommonDao.executeSql(2, "update t_activity_count set count=count-"+oda.getNumber()+" where productID="+oda.getProductID()+" and userName='"+account.getAccount()+"' and activityID='"+oda.getActivityID()+"'");								}													}						}						e.setStatus(net.jeeshop.services.common.Order.order_status_cancel);						orderService.update(e);						insertOrderlog(e.getId(), "【订单取消】");						jsonStr="1";					}									}			}					} catch (Exception e) {			e.printStackTrace();			logger.error("deleteOrder..."+e);		}		return "toJson";	}		/**	 * 插入订单操作日志	 * @param orderid	订单ID	 * @param content	日志内容	 */	private void insertOrderlog(String orderid,String content) {		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		Orderlog orderlog = new Orderlog();		orderlog.setOrderid(orderid);//订单ID		orderlog.setAccount(acc.getAccount());//操作人账号		orderlog.setContent(content);//日志内容		orderlog.setAccountType(net.jeeshop.services.common.Orderlog.orderlog_accountType_m);		orderlogService.insert(orderlog);	}		/**	 * 线下支付	 * @throws Exception 	 */	public void offLinePay() throws Exception{		try {			Order e=new Order();			String orderid = getRequest().getParameter("id");			String payType = getRequest().getParameter("payType");			e.setId(orderid);			e.setPayType(payType);			this.orderService.update(e);						Order order=this.orderService.selectById(orderid);			net.jeeshop.services.manage.company.bean.Company comp = companyService.selectById(order.getCompID());			String sms = CommonPropertiesUtil.getSMStemValue( "WAIT_SELLER_SEND_OFFLINE").replace("orderid", order.getId());			String rtmsg=SendSMSUtil.sendSMS(sms,comp.getContactorTelephone());			logger.error("支付成功发送短信--->号码："+comp.getContactorTelephone()+"，内容："+sms+",结果："+rtmsg);						getResponse().sendRedirect("../order/orderInfo.html?id="+orderid);		} catch (IOException ex) {			ex.printStackTrace();		}	}			/**	 * 点击我的订单页面的未付款的订单进行付款操作,则跳转到付款页面进行付款	 * @return	 * @throws IOException 	 */	public String toPay() throws IOException{		if (getSession().getAttribute(FrontContainer.USER_INFO) == null) {			return "toLogin";		}		String orderid = getRequest().getParameter("id");		logger.error("orderid="+orderid);		if(StringUtils.isBlank(orderid)){			throw new NullPointerException();		}		String bkSel = getRequest().getParameter("bk_sel") ;		if( bkSel != null ){			getRequest().setAttribute("bk_sel", bkSel);		}				Order order = orderService.selectById(orderid);		if(order==null){			throw new NullPointerException("根据订单号查询不到订单信息！");		}		if(order.getIsParent()!=null&&order.getIsParent().equals("y")){			List<Order> list = orderService.selectListByPid(orderid);			for (Order o : list) {				//创建支付记录对象				Orderpay orderpay = new Orderpay();				orderpay.setOrderid(o.getId());				orderpay.setPaystatus(net.jeeshop.services.common.Orderpay.orderpay_paystatus_n);				orderpay.setPayamount(Double.valueOf(o.getAmount()));				orderpay.setPaymethod(bkSel);				orderpayService.insert(orderpay);			}		}else{			Ordership ordership = ordershipService.selectOne(new Ordership(orderid));			if(ordership==null){				throw new NullPointerException("根据订单号查询不到配送信息！");			}			order.setOrdership(ordership);		//创建支付记录对象		Orderpay orderpay = new Orderpay();		orderpay.setOrderid(orderid);		orderpay.setPaystatus(net.jeeshop.services.common.Orderpay.orderpay_paystatus_n);		orderpay.setPayamount(Double.valueOf(order.getAmount()));				if(order.getCoupon()!=null){			orderpay.setPayamount(Double.valueOf(order.getAmount())-order.getCoupon());		}else if(order.getUseIntegral()!=null){			orderpay.setPayamount(Double.valueOf(order.getAmount())-order.getUseIntegral()/100);		}						//		if("ny".equalsIgnoreCase(bkSel))//			orderpay.setPaymethod(Orderpay.orderpay_paymethod_bank_ny);//		else if( "xy".equalsIgnoreCase(bkSel))//			orderpay.setPaymethod(Orderpay.orderpay_paymethod_bank_xy);//		else if( "nyot".equalsIgnoreCase(bkSel))//			orderpay.setPaymethod(Orderpay.orderpay_paymethod_bank_ny_ot);//		else if( "ali".equalsIgnoreCase(bkSel))//		  orderpay.setPaymethod(Orderpay.orderpay_paymethod_alipayescow);//		else if( "yhq".equalsIgnoreCase(bkSel))//			orderpay.setPaymethod(Orderpay.orderpay_paymethod_yhq);		orderpay.setPaymethod(bkSel);				int orderpayID = orderpayService.insert(orderpay);		logger.error("orderpayID="+orderpayID);				order.setOrderpayID(String.valueOf(orderpayID));				//查询配送地址信息		//createPayInfo(order,ordership);		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		//getRequest().setAttribute("bk_order", order);				if( "coupon".equalsIgnoreCase(bkSel)){			Coupon c=new Coupon();			c.setOwnerID(acc.getId());			c.setOrientationType("pay");			c.setStatus(net.jeeshop.services.common.Coupon.status_y);			c.setOrientationID(order.getCompID());			c.setOrientationName(order.getCompName());			List<Coupon> list=couponService.selectAccCoupon(c);			Double remaining=0.0;			for (Coupon con : list) {				remaining+=con.getRemaining();			}			getRequest().setAttribute("yhqList", list);			getRequest().setAttribute("remaining", remaining);			getRequest().setAttribute("orderid", orderid);			getRequest().setAttribute("orderpayID", orderpayID);			if(remaining>=Double.valueOf(order.getAmount())){				getRequest().setAttribute("type", 1);			}else{				getRequest().setAttribute("type", 0);			}			return "toCouponPay";		}else if("nxb".equalsIgnoreCase(bkSel)){						String url = payUtilService.sendPayRequest(order,KeyValueHelper.get("nxbUrl"));			if(url.equals("0")){				getRequest().setAttribute("message", "您还未绑定农信宝,请绑定农信宝后再进行提交!");				getRequest().setAttribute("id",orderid);				return "nxbSet";			}else if(url.equals("1")){				getRequest().setAttribute("message", "商家未关联农信宝!");				getRequest().setAttribute("id",orderid);				return "quickpaySel";			}else{			getResponse().sendRedirect(url);			}		}		order.setAmount(orderpay.getPayamount()+"");		}//		QuickPayInfo payInfo = createQuickPayInfo(order);//		getRequest().setAttribute("payInfo", payInfo);				getRequest().setAttribute("bk_order", order);		return "toQuickPay";	}		public String couponPay(){		if(!TokenUtil.getInstance().isTokenValid(getRequest())){			throw new  NullPointerException("表单重复提交了！");		}		if (getSession().getAttribute(FrontContainer.USER_INFO) == null) {			return "toLogin";		}		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);						String opid = getRequest().getParameter("orderpayID");		Orderpay orderpay = orderpayService.selectById(opid);		Order order = orderService.selectById(orderpay.getOrderid());						Coupon c=new Coupon();		c.setOwnerID(acc.getId());		c.setOrientationType("pay");		c.setStatus(net.jeeshop.services.common.Coupon.status_y);		c.setOrientationID(order.getCompID());		c.setOrientationName(order.getCompName());		List<Coupon> list=couponService.selectAccCoupon(c);		Double amount = Double.valueOf(order.getAmount());		for (Coupon cou : list) {			if(cou.getRemaining()>amount){				cou.setRemaining(cou.getRemaining()-amount);				couponService.update(cou);				break;			}else if(cou.getRemaining()==amount){				cou.setRemaining(0.0);				cou.setStatus(net.jeeshop.services.common.Coupon.status_n);				break;			}else{				cou.setRemaining(0.0);				cou.setStatus(net.jeeshop.services.common.Coupon.status_n);				amount=amount-cou.getRemaining();			}		}		orderService.quickpayNotify("WAIT_SELLER_SEND_GOODS", opid);				return "paySuccess";	}	/**	 * 确认收货	 * @return	 */	public String receive(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (getSession().getAttribute(FrontContainer.USER_INFO) == null) {			return "toLogin";		}		String orderid = getRequest().getParameter("id");		logger.error("orderid="+orderid);		if(StringUtils.isBlank(orderid)){			throw new NullPointerException();		}				Order order = orderService.selectById(orderid);		if(order==null){			throw new NullPointerException("根据订单号查询不到订单信息！");		}				Ordership ordership = ordershipService.selectOne(new Ordership(orderid));		if(ordership==null){			throw new NullPointerException("根据订单号查询不到配送信息！");		}				//购买物品列表		Orderdetail orderdetail=new Orderdetail();		orderdetail.setOrderID(Integer.valueOf(orderid));		List<Orderdetail> odlist = orderdetailService.selectList(orderdetail);//		for (Orderdetail od : odlist) {//			// 数据库加销量//			Product product = new Product();//			product.setId(od.getProductID()+"");//			product.setAddSellcount(od.getNumber());// 增加销量//			productService.updateStockAfterPaySuccess(product);//		}				/*		 * 积分处理		 * teng		 */				if(order.getActivityID()!=null&&!order.getActivityID().equals("")){			Account acc2=new Account();			acc2.setId(acc.getId());			acc2.setMoney((acc.getMoney()==null?0.0:acc.getMoney())+order.getIntegral());			accountService.updateMoney(acc2);			acc.setMoney((acc.getMoney()==null?0.0:acc.getMoney())+order.getIntegral());			getSession().setAttribute(FrontContainer.USER_INFO,acc);		}				/*		 * 返优惠券处理		 * teng		 */		Double ptotal=Double.valueOf(order.getPtotal())-(order.getCoupon()==null?0:order.getCoupon());		net.jeeshop.services.manage.company.bean.Company com1 = companyService.selectById(order.getCompID());		Coupon coupon=new Coupon();		coupon.setOwnerName(com1.getCreateAccount());		coupon.setStatus(net.jeeshop.services.common.Coupon.status_y);		coupon.setParentID("two");		List<Coupon> list2 = couponService.selectList(coupon);		coupon=null;		for (Coupon cp2 : list2) {			if(cp2.getBegin()==null||ptotal>=cp2.getBegin()){				if(cp2.getEnd()==null||ptotal<cp2.getEnd()){					coupon=cp2;					break;				}			}		}		if(coupon!=null){			Coupon cp2=new Coupon();			cp2.setOrientationType(coupon.getOrientationType());			cp2.setOrientationID(coupon.getOrientationID());			cp2.setOrientationName(coupon.getOrientationName());			cp2.setOwnerID(acc.getId());			cp2.setOwnerName(acc.getAccount());			cp2.setOwnerType(net.jeeshop.services.common.Coupon.ownerType_user);			cp2.setAmount(coupon.getMaxMoney()*Math.floor((ptotal/coupon.getBegin())));			cp2.setRemaining(cp2.getAmount());			cp2.setRecycle(0.00);			cp2.setStatus(net.jeeshop.services.common.Coupon.status_y);			cp2.setParentID(coupon.getId());						cp2.setBeginTime(coupon.getBeginTime());			cp2.setEndTime(coupon.getEndTime());			couponService.insert(cp2);			Coupon cp3=new Coupon();			cp3.setId(coupon.getId());			cp3.setRemaining(coupon.getRemaining()-cp2.getAmount());			couponService.update(cp3);					}						//推荐者返款		if(acc.getPresenter()!=null&&!acc.getPresenter().equals("")){			//上级			Account pa=new Account();						if(acc.getPresenter().equals("0")){				pa=acc;			}else{			pa.setAccount(acc.getPresenter());			pa = accountService.selectOne(pa);			}			//上级商家			net.jeeshop.services.manage.company.bean.Company c=new net.jeeshop.services.manage.company.bean.Company();			c.setCreateAccount(pa.getAccount());			c=companyService.selectOne(c);						//购买物品			for (Orderdetail od : odlist) {												if(od.getPurchasePrice()==null||Double.valueOf(od.getPrice())<=od.getPurchasePrice()){					continue;				}												Product p = productService.selectById(od.getProductID()+"");				if(StringUtils.isBlank(p.getCompanyType()) || !p.getCompanyType().equals("2")){					continue;				}				if(p.getChuChangPrice()==null||p.getChuChangPrice().length()==0){					continue;				}												Profit profit=new Profit();								profit.setPresentee(acc.getAccount());				profit.setProductID(od.getProductID()+"");				profit.setProductName(od.getProductName());				profit.setNumber(od.getNumber());				profit.setPrice(Double.valueOf(od.getPrice()));				profit.setCreateTime(DateUtil.dateToStr(new Date(),"yyyy-MM-dd HH:mm:ss"));												profit.setCompID(p.getCompID());				profit.setCompName(p.getCompName());				profit.setProfit(Double.valueOf(od.getPrice())-od.getPurchasePrice());												if(c!=null&&p.getCompID().equals(c.getId())){					Account a2=new Account();					//推荐者收益					profit.setType("2");					if(pa.getPresenter()==null||pa.getPresenter().equals("0")){					profit.setUserID(pa.getId());					profit.setAccount(pa.getAccount());					profit.setRatio(Double.valueOf(KeyValueHelper.get("SYBL2").split(":")[0])/10*100);					profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio());					a2.setId(profit.getUserID());					a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());					accountService.updateMoney(a2);					profitService.insert(profit);					}else{						Double sybl=Double.valueOf(KeyValueHelper.get("SYBL2").split(":")[0])/10;																		Account pa2=new Account();						pa2.setAccount(pa.getPresenter());						pa2 = accountService.selectOne(pa2);						if(pa2.getPresenter()==null||pa2.getPresenter().equals("0")){//一级推广为空(只有两级)														Double sybl1=sybl*Double.valueOf(KeyValueHelper.get("SYBL3").split(":")[0])/10;							Double sybl2=sybl*Double.valueOf(KeyValueHelper.get("SYBL3").split(":")[1])/10;												if(pa2==null){//二级推广为空(只有一级)							profit.setUserID(pa.getId());							profit.setAccount(pa.getAccount());							profit.setRatio(sybl);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);													}else{//二级推广不为空(有两级)							profit.setUserID(pa.getId());							profit.setAccount(pa.getAccount());							profit.setRatio(sybl2);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);																					profit.setId(null);							profit.setUserID(pa2.getId());							profit.setAccount(pa2.getAccount());							profit.setRatio(sybl1);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);													}						}else{//一级推广不为空(有三级)							Double sybl1=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[0])/10;							Double sybl2=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[1])/10;							Double sybl3=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[2])/10;														profit.setUserID(pa.getId());							profit.setAccount(pa.getAccount());							profit.setRatio(sybl3);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);																					profit.setId(null);							profit.setUserID(pa2.getId());							profit.setAccount(pa2.getAccount());							profit.setRatio(sybl2);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);														Account pa3=new Account();							pa3.setAccount(pa2.getPresenter());							pa3 = accountService.selectOne(pa3);														profit.setId(null);							profit.setUserID(pa3.getId());							profit.setAccount(pa3.getAccount());							profit.setRatio(sybl1);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa3.getMoney()==null?0:pa3.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);						}											}					//平台收益					profit.setId(null);					profit.setType("1");					Account pa2=accountService.selectById(KeyValueHelper.get("PTSYZH"));					profit.setUserID(pa2.getId());					profit.setAccount(pa2.getAccount());					profit.setRatio(Double.valueOf(KeyValueHelper.get("SYBL2").split(":")[1])/10);					profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);					a2.setId(profit.getUserID());					a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());					accountService.updateMoney(a2);					profitService.insert(profit);										//渠道商收益					profit.setId(null);					profit.setType("4");										pa2=accountService.selectById(KeyValueHelper.get("PTSYZH2"));					profit.setUserID(pa2.getId());					profit.setAccount(pa2.getAccount());					profit.setRatio(Double.valueOf(KeyValueHelper.get("SYBL2").split(":")[2])/10);					profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);					a2.setId(profit.getUserID());					a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());					accountService.updateMoney(a2);					profitService.insert(profit);									}else{					Account a2=new Account();					//推荐者收益					profit.setType("3");					Double sybl=Double.valueOf(KeyValueHelper.get("SYBL1").split(":")[0])/10;					if(pa.getPresenter()==null||pa.getPresenter().equals("0")){					profit.setUserID(pa.getId());					profit.setAccount(pa.getAccount());					profit.setRatio(sybl);					profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio());					a2.setId(profit.getUserID());					a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());					accountService.updateMoney(a2);					profitService.insert(profit);					}else{												Account pa2=new Account();						pa2.setAccount(pa.getPresenter());						pa2 = accountService.selectOne(pa2);						if(pa2.getPresenter()==null||pa2.getPresenter().equals("0")){//一级推广为空(只有两级)														Double sybl1=sybl*Double.valueOf(KeyValueHelper.get("SYBL3").split(":")[0])/10;							Double sybl2=sybl*Double.valueOf(KeyValueHelper.get("SYBL3").split(":")[1])/10;												if(pa2==null){//二级推广为空(只有一级)							profit.setUserID(pa.getId());							profit.setAccount(pa.getAccount());							profit.setRatio(sybl);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);													}else{//二级推广不为空(有两级)							profit.setUserID(pa.getId());							profit.setAccount(pa.getAccount());							profit.setRatio(sybl2);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);																					profit.setId(null);							profit.setUserID(pa2.getId());							profit.setAccount(pa2.getAccount());							profit.setRatio(sybl1);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);													}						}else{//一级推广不为空(有三级)							Double sybl1=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[0])/10;							Double sybl2=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[1])/10;							Double sybl3=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[2])/10;														profit.setUserID(pa.getId());							profit.setAccount(pa.getAccount());							profit.setRatio(sybl3);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);																					profit.setId(null);							profit.setUserID(pa2.getId());							profit.setAccount(pa2.getAccount());							profit.setRatio(sybl2);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);														Account pa3=new Account();							pa3.setAccount(pa2.getPresenter());							pa3 = accountService.selectOne(pa3);														profit.setId(null);							profit.setUserID(pa3.getId());							profit.setAccount(pa3.getAccount());							profit.setRatio(sybl1);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa3.getMoney()==null?0:pa3.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitService.insert(profit);						}											}					//平台收益					profit.setId(null);					profit.setType("1");					Account pa2=accountService.selectById(KeyValueHelper.get("PTSYZH"));					profit.setUserID(pa2.getId());					profit.setAccount(pa2.getAccount());					profit.setRatio(Double.valueOf(KeyValueHelper.get("SYBL1").split(":")[1])/10);					profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);					a2.setId(profit.getUserID());					a2.setMoney((pa.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());					accountService.updateMoney(a2);					profitService.insert(profit);										//商家收益					profit.setId(null);					profit.setType("2");					net.jeeshop.services.manage.company.bean.Company com = companyService.selectById(p.getCompID());					pa2=new Account();					pa2.setAccount(com.getCreateAccount());					pa2 = accountService.selectOne(pa2);					profit.setUserID(pa2.getId());					profit.setAccount(pa2.getAccount());					profit.setRatio(Double.valueOf(KeyValueHelper.get("SYBL1").split(":")[2])/10);					profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);					a2.setId(profit.getUserID());					a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());					accountService.updateMoney(a2);					profitService.insert(profit);				}							}						if(!DateUtil.strToDate(acc.getPastDue().substring(0,10)).after(DateUtil.strToDate("2999-12-30"))){			Account a=new Account();			a.setId(acc.getId());			a.setPastDue("2999-12-31");			accountService.update(a);						acc.setPastDue(a.getPastDue());			getSession().setAttribute(FrontContainer.USER_INFO, acc);			}		}								//add by wm 2015 		Orderpay orderpay = new Orderpay();		orderpay.setOrderid(orderid);		List<Orderpay> oplist = orderpayService.selectList(orderpay);		try { 			  			   if(order.getPaystatus().equals(net.jeeshop.services.common.Order.order_paystatus_y)&&order.getStatus().equals(net.jeeshop.services.common.Order.order_status_send)&&oplist!=null&&oplist.size()>0){				   String pid=null;				   for (Orderpay op : oplist) {					if(op.getPaystatus().equals(net.jeeshop.services.common.Orderpay.orderpay_paystatus_y)){						pid=op.getId();						break;					}				}				   if(pid!=null){					   orderService.quickpayNotify("TRADE_FINISHED", pid);					   jsonStr="1";				   }else{					   jsonStr="2";				   }			}			  			  } catch (Exception e) {				  logger.error("receive..."+e);			  }		return "toJson";	}	/**	 * 获取结果	 * @return	 * @throws IOException 	 */	public String payBak() throws IOException{		if (getSession().getAttribute(FrontContainer.USER_INFO) == null) {			return "toLogin";		}		String orderid = getRequest().getParameter("id");		logger.error("orderid="+orderid);		if(StringUtils.isBlank(orderid)){			throw new NullPointerException();		}				Order order = orderService.selectById(orderid);		if(order==null){			throw new NullPointerException("根据订单号查询不到订单信息！");		}				Ordership ordership = ordershipService.selectOne(new Ordership(orderid));		if(ordership==null){			throw new NullPointerException("根据订单号查询不到配送信息！");		}		//add by wm 2015 		String bkSel = getRequest().getParameter("bk_sel") ;		if( bkSel != null ){			getRequest().setAttribute("bk_sel", bkSel);		}		getRequest().setAttribute("bk_order", order);						//创建支付记录对象		Orderpay orderpay = new Orderpay();		orderpay.setOrderid(orderid);		List<Orderpay> list = orderpayService.selectList(orderpay);		if(list==null||list.size()==0){			getResponse().sendRedirect(getRequest().getContextPath()+"/user/orders.html");		}else{			orderpay=list.get(0);			order.setOrderpayID(String.valueOf(orderpay.getId()));			createQuickPayInfo(order);			if(orderpay.getPaymethod()!=null&&(orderpay.getPaymethod().equals(net.jeeshop.services.common.Orderpay.orderpay_paymethod_bank_ny)||orderpay.getPaymethod().equals(net.jeeshop.services.common.Orderpay.orderpay_paymethod_bank_ny_ot))){									///////////////////////////////////////////////////////////////////////////////////////////////////////////////////		QuickPayInfo payInfo = (QuickPayInfo)getRequest().getAttribute("payInfo");		Order ord = (Order)   getRequest().getAttribute("bk_order");		String status = "" ; 		String trade_order_no = "";//交易订单号		trade_order_no=payInfo.getTradeOrderNo();		//1、生成订单对象		PaymentRequest tPaymentRequest = new PaymentRequest();		tPaymentRequest.dicOrder.put("PayTypeID","ImmediatePay");// request.getParameter("PayTypeID"));                   //设定交易类型		tPaymentRequest.dicOrder.put("OrderDate", ord.getCreatedate().substring(0, 10).replace("-", "/"));                   //设定订单日期 （必要信息 - YYYY/MM/DD）		tPaymentRequest.dicOrder.put("OrderTime", ord.getCreatedate().substring(11,19) ) ;                   //设定订单时间 （必要信息 - HH:MM:SS）		tPaymentRequest.dicOrder.put("orderTimeoutDate", new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date( System.currentTimeMillis()+6000000L ))     ) ;// request.getParameter("ExpiredDate"));               //设定订单保存时间     //设定订单有效期		tPaymentRequest.dicOrder.put("OrderNo", ord.getId());                       //设定订单编号 （必要信息）		tPaymentRequest.dicOrder.put("CurrencyCode", "156");//request.getParameter("CurrencyCode"));             //设定交易币种		tPaymentRequest.dicOrder.put("OrderAmount", ord.getAmount() );      //设定交易金额		tPaymentRequest.dicOrder.put("OrderDesc", getRequest().getParameter("OrderDesc"));                   //设定订单说明		tPaymentRequest.dicOrder.put("OrderURL", getRequest().getParameter("OrderURL"));                     //设定订单地址		tPaymentRequest.dicOrder.put("ReceiverAddress", getRequest().getParameter("ReceiverAddress"));       //收货地址		tPaymentRequest.dicOrder.put("InstallmentMark","0");// getRequest().getParameter("InstallmentMark"));       //分期标识		tPaymentRequest.dicOrder.put("CommodityType", "2") ;//getRequest().getParameter("CommodityType"));           //设置商品种类		//2、订单明细		ord.getOrderdetailID() ;		//3、生成支付请求对象				String paymentType = orderpay.getPaymethod().equals(net.jeeshop.services.common.Orderpay.orderpay_paymethod_bank_ny)?"A":"6"; 		tPaymentRequest.dicRequest.put("PaymentType", paymentType);            //设定支付类型		String paymentLinkType  = "1" ;// getRequest().getParameter("PaymentLinkType");                                         		tPaymentRequest.dicRequest.put("PaymentLinkType", paymentLinkType);    //设定支付接入方式		if (paymentType.equals(Constants.PAY_TYPE_UCBP) && paymentLinkType.equals(Constants.PAY_LINK_TYPE_MOBILE))		{		    tPaymentRequest.dicRequest.put("UnionPayLinkType","0" );//request.getParameter("UnionPayLinkType"));  //当支付类型为6，支付接入方式为2的条件满足时，需要设置银联跨行移动支付接入方式		}		tPaymentRequest.dicRequest.put("NotifyType","1");// request.getParameter("NotifyType"));              //设定通知方式0：URL页面通知 1：服务器通知，*必输		tPaymentRequest.dicRequest.put("ResultNotifyURL","http://171.8.252.29/animalshop/quickpay_ny_rec.jsp");// request.getParameter("ResultNotifyURL"));    //设定通知URL地址		tPaymentRequest.dicRequest.put("MerchantRemarks","TEST" ) ;// request.getParameter("MerchantRemarks"));    //设定附言		tPaymentRequest.dicRequest.put("IsBreakAccount", "0") ;// request.getParameter("IsBreakAccount"));      //设定交易是否分账		JSON json = tPaymentRequest.postRequest();		String ReturnCode = json.GetKeyValue("ReturnCode");		String ErrorMessage = json.GetKeyValue("ErrorMessage");				  //可能已经支付过. 		  if ("2306".equals(ReturnCode)){		  		        WebApplicationContext app = WebApplicationContextUtils							.getWebApplicationContext(getRequest().getSession()									.getServletContext());					OrderService orderService = (OrderService) app							.getBean("orderServiceFront");		    QueryOrderRequest tQueryRequest = new QueryOrderRequest();		    tQueryRequest.queryRequest.put("PayTypeID",  "ImmediatePay" );    //设定交易类型		    tQueryRequest.queryRequest.put("OrderNo", ord.getId() );    //设定订单编号 （必要信息）		    tQueryRequest.queryRequest.put("QueryDetail", "0" );//设定查询方式		    JSON json2 = tQueryRequest.postRequest();		 String orderInfo = json2.GetKeyValue("Order");		Base64 tBase64 = new Base64();		  		String orderDetail = new String(tBase64.decode(orderInfo));		        json.setJsonString(orderDetail);		        		    String stat =  json.GetKeyValue("Status"); 		    if( "04".equalsIgnoreCase(stat)){					orderService.quickpayNotify("WAIT_SELLER_SEND_GOODS", trade_order_no);		     }		  }		  getResponse().sendRedirect(getRequest().getContextPath()+"/user/orders.html");		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			}		}		getResponse().sendRedirect(getRequest().getContextPath()+"/user/orders.html");		return "myOrders";	}		/**	 * 用户进行评论提交	 * @return	 * @throws Exception 	 */	public String doRate() throws Exception{		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null) {			getResponse().getWriter().write("-1");			return null;		}		logger.error("doRate...");				int orderid = Integer.valueOf(getRequest().getParameter("orderid").toString());		Order order = orderService.selectById(String.valueOf(orderid));		if (StringUtils.isNotBlank(order.getClosedComment())				&& order.getClosedComment().equals(net.jeeshop.services.common.Order.order_closedComment_y)) {			//订单的点评功能已被关闭。			throw new RuntimeException(FrontContainer.request_illegal_error);		}				/*		 * 用户可以对每个订单项对应的商品进行评价		 */		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(orderid);		List<Orderdetail> list = orderdetailService.selectList(orderdetail);		List<Comment> comments = new LinkedList<Comment>();		for(int i=0;i<list.size();i++){			Orderdetail item = list.get(i);			//获取页面上填写的评论类容			String content = getRequest().getParameter("product_"+item.getProductID());			if(StringUtils.isBlank(content)){				continue;			}			Comment c = new Comment();			c.setProductID(String.valueOf(item.getProductID()));			c.setOrderdetailID(item.getId());			c.setOrderID(String.valueOf(orderid));			c.setContent(content);			c.setStatus(net.jeeshop.services.common.Comment.comment_status_y);			c.setNickname(acc.getNickname());			c.setStar(5);			c.setAccount(acc.getAccount());			comments.add(c);		}		commentService.insertList(comments);		getResponse().sendRedirect("thinksRate.html");		return null;	}		public String thinksRate(){		logger.error("thinksRate...");		return "thinksRate";	}		/**	 * 支付成功后进行评价,转到评论页面	 * @return	 * @throws Exception 	 */	public String rate() throws Exception{		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null) {			return "toLogin";		}		getSession().setAttribute(FrontContainer.selectMenu, FrontContainer.not_select_menu);//		String productID = getRequest().getParameter("productID");		String orderid = getRequest().getParameter("orderid");		if(StringUtils.isBlank(orderid)){			throw new NullPointerException("参数异常！");		}				/*		 * 用户可以对每个订单项对应的商品进行评价		 */		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(Integer.valueOf(orderid));		orderdetail.setIsComment(net.jeeshop.services.common.Orderdetail.orderdetail_isComment_n);		e.setRateOrderdetailList(orderdetailService.selectList(orderdetail));		e.setId(orderid);		if(e.getRateOrderdetailList()!=null && e.getRateOrderdetailList().size()==0){			e.setRateOrderdetailList(null);		}				//加载商品信息//		product = productService.selectById(productID);//		//加载以往用户的评价信息//		comment.clear();//		comment.setAccount(acc.getAccount());//		comment.setProductID(Integer.valueOf(productID));//		comment.setOrderID(Integer.valueOf(orderid));//		comment = commentService.selectOne(comment);//		if(comment==null){//			logger.error("还没有评价");//		}else{//			logger.error("已经评价过了");//		}				//加载指定商品的评论列表//		Comment commentParam = new Comment();//		commentParam.setProductID(Integer.valueOf(productID));//		selectCommentList(commentParam);		return "rate";	}			/**	 * 分页加载评论	 * @return	 * @throws Exception	 */	private void selectCommentList(Comment commentParam) throws Exception {		int offset = 0;		if (getRequest().getParameter("pager.offset") != null) {			offset = Integer					.parseInt(getRequest().getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;//		Comment comment = new Comment();		((PagerModel) commentParam).setOffset(offset);		pager = commentService.selectPageList(commentParam);		if(pager==null)pager = new PagerModel();		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		//		selectListAfter();		pager.setPagerUrl("rate.html");	}		DecimalFormat df = new DecimalFormat("0.00");	/**	 * 创建支付宝的付款信息对象	 * @param order	 */	private void createPayInfo(Order order,Ordership ordership) {		if(order==null || ordership==null){			throw new NullPointerException("参数不能为空！请求非法！");		}				PayInfo payInfo = new PayInfo();		payInfo.setWIDseller_email(ordership.getPhone());//		String debug = SystemManager.getInstance().get("system_debug");		String www = SystemManager.systemSetting.getWww();		/**		 * 解决由于本地和线上正式环境提交相同的商户订单号导致支付宝出现TRADE_DATA_MATCH_ERROR错误的问题。		 * 本地提交的商户订单号前缀是test开头，正式环境提交的就是纯粹的支付订单号		 */		if(www.startsWith("http://127.0.0.1") || www.startsWith("http://localhost")){			payInfo.setWIDout_trade_no("test"+order.getOrderpayID());		}else{			payInfo.setWIDout_trade_no(order.getOrderpayID());		}		payInfo.setWIDsubject(order.getProductName());				payInfo.setWIDprice(Double.valueOf(order.getPtotal()));		payInfo.setWIDbody(order.getRemark());//		payInfo.setShow_url(SystemManager.systemSetting.getWww()+"/product/"+payInfo.getWIDout_trade_no()+".html");		payInfo.setShow_url(SystemManager.systemSetting.getWww()+"/order/orderInfo.html?id="+order.getId());		payInfo.setWIDreceive_name(ordership.getShipname());		payInfo.setWIDreceive_address(ordership.getShipaddress());		payInfo.setWIDreceive_zip(ordership.getZip());		payInfo.setWIDreceive_phone(ordership.getTel());		payInfo.setWIDreceive_mobile(ordership.getPhone());		payInfo.setWIDsubject(order.getRemark());				payInfo.setLogistics_fee(Double.valueOf(order.getFee()));		payInfo.setLogistics_type(order.getExpressCode());				logger.error(payInfo.toString());		getRequest().setAttribute("payInfo", payInfo);	}		/**	 * 创建快捷支付的付款信息对象	 * @param order	 */	private QuickPayInfo createQuickPayInfo(Order order) {		if(order==null){			throw new NullPointerException("参数不能为空！请求非法！");		}		QuickPayInfo payInfo=new QuickPayInfo();		payInfo.setTradeOrderNo(order.getOrderpayID());		payInfo.setTradePrice(order.getPtotal());		if(order.getStatus().equals("init")){//付款 			Account account=new Account();			account.setAccount(order.getAccount());			account=accountService.selectOne(account);						if(account==null){				throw new NullPointerException("参数不能为空！请求非法！");			}						payInfo.setTradeStatus("10");		}				if(order.getStatus().equals("send")){//收货			Company company=companyService.selectById(order.getCompID());			if(company==null || (company.getAccountBank()==null) || (company.getAccountNumber()==null)){				throw new NullPointerException("银行账户信息参数不能为空！请您到个人资料中进行完善！");			}			payInfo.setAccountBank(company.getAccountBank());			payInfo.setAccountNumber(company.getAccountNumber());			payInfo.setTradeStatus("11");		}		return payInfo;	}		/**	 * 查询我的订单列表信息	 */	@Override	public String selectList() throws Exception {		/*this.initPageSelect();		setParamWhenInitQuery();		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		int offset = pager.getOffset();//分页偏移量		Order order = new Order();		order.setAccount(acc.getAccount());		String cName = this.getRequest().getParameter("e.compName");		String sDate = this.getRequest().getParameter("e.startDate");		String eDate = this.getRequest().getParameter("e.endDate");		String status = this.getRequest().getParameter("e.status");		order.setStartDate(sDate);		order.setEndDate(eDate);		order.setStatus(status);		order.setCompName(cName);		if (offset < 0)			offset = 0;		((PagerModel) order).setOffset(offset);		pager = getServer().selectPageList(order);		if(pager==null)pager = new PagerModel();		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		selectListAfter();*/		return super.selectList();	}	/**	 * 删除我的订单信息	 */	@Override	public String deletes() throws Exception {		return super.deletes();	}		/**	 * 退订或取消指定的订单	 * @return	 * @throws Exception	 */	public String cancel() throws Exception {		return "";	}		/**	 * 读取指定订单的信息	 * @return	 */	public String read(){				return "";	}		/**	 * 对指定的订单进行支付	 * @return	 *///	public String doPay(){//		if(1==1){//			throw new NullPointerException();//		}//		//		String orderID = getRequest().getParameter("orderID");//		e.clear();//		e.setId(orderID);//		e.setStatus(Order.order_status_init);//等待付款//		logger.error("orderid=" + orderID);//		orderService.update(e);//		return "doPay";//	}		/**	 * 查看订单详情	 * @return	 */	public String orderInfo(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null) {			return "toLogin";		}		logger.error("orderInfo...");		String id = getRequest().getParameter("id");		if(StringUtils.isBlank(id)){			throw new NullPointerException("订单ID不能为空！");		}		e=orderService.selectById(id);		if(StringUtils.isNotBlank(e.getReceiveTime())){		e.setReceiveTime(e.getReceiveTime().substring(0,19).replace("-", "/"));		}//		//查询订单信息//		Order order = new Order();//		order.setId(id);//		order.setAccount(acc.getAccount());//		List<Order> orders = orderService.selectOrderInfo(order);//		if(orders==null || orders.size()==0){//			throw new NullPointerException("根据订单ID查询不到订单信息！");//		}//		logger.error("orders.size="+orders.size());//		e = orders.get(0);//		e.setOrders(orders);						Orderdetail od=new Orderdetail();		od.setOrderID(Integer.valueOf(id));		List<Orderdetail> list = orderdetailService.selectList(od);		e.setOrderdetail(list);				//查询订单配送信息		Ordership ordership = new Ordership();		ordership.setOrderid(id);		ordership = ordershipService.selectOne(ordership);		if(ordership==null){			throw new NullPointerException("根据订单ID查询不到订单配送信息！");		}		e.setOrdership(ordership);				//查询订单物流信息		e.setKuaid100Info(kuaidi100Helper.selectKuaidi100());		selectLeftMenu = "orders";				//评论信息		Comment c=new Comment();		c.setOrderID(id);		List<Comment> clist = commentService.selectList(c);		if(clist!=null&&clist.size()>0){		getRequest().setAttribute("clist", clist);		}		return "orderInfo";	}		/**	 * 查看物流信息	 * @return	 */	public String orderhipInfo(){		logger.error("orderhipInfo...");		return "orderhipInfo";	}		/**	 * 确认订单信息	 * @return	 * @throws Exception 	 */	public String confirmOrder() throws Exception{		logger.error("confirmOrder..");		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {//			getSession().getAttribute(FrontContainer);			return "toLogin";		}				//检查购买的商品是否超出可购买的库存数		CartInfo cartInfo = (CartInfo)getSession().getAttribute(FrontContainer.myCart);		if(cartInfo==null){			throw new NullPointerException("非法请求");		}		Set<String> set=new HashSet<String>();		for(int i=0;i<cartInfo.getProductList().size();i++){			Product product = cartInfo.getProductList().get(i);			ProductStockInfo stockInfo = SystemManager.productStockMap.get(product.getId());			if(stockInfo==null){				//商品已卖完或已下架，请联系站点管理员!				throw new RuntimeException("商品已卖完或已下架，请联系站点管理员!");			}else if(stockInfo.getStock() < product.getBuyCount()){				//购买的商品数超出库存数				throw new RuntimeException("商品已卖完或已下架，请联系站点管理员!");			}			set.add(product.getCompID());		}				String province="";		String city="";		String area="";		//加载配送信息		Address add = new Address();		add.setAccount(acc.getAccount());		List<Address> addressList = addressService.selectList(add);		cartInfo.setAddressList(addressList);		cartInfo.setDefaultAddessID(null);		if(addressList!=null && addressList.size()>0){//			boolean exist = false;			for(int i=0;i<addressList.size();i++){				Address addItem = addressList.get(i);				if(StringUtils.isNotBlank(addItem.getIsdefault()) && addItem.getIsdefault().equals("y")){					cartInfo.setDefaultAddessID(addItem.getId());					province=addItem.getProvince();					city=addItem.getCity();					area=addItem.getArea();					break;				}			}		}				/**		 * 加载商品的物流信息		 */		List<Product> productList=new ArrayList<Product>();		for (int i = 0; i < cartInfo.getProductList().size(); i++) {			Product product=cartInfo.getProductList().get(i);						if(StringUtils.isNotBlank(product.getActivityID())){				product.product_sorry_str ="本品为活动商品!请选择直接购买!";				getRequest().setAttribute("message", "包含活动商品!请选择直接购买!");				getRequest().getRequestDispatcher("/cart!cart.action").forward(getRequest(), getResponse());				return null;			}			String productID=product.getId();			int buyCount=product.getBuyCount();			Map<String,String> logisMap=getLogistics(buyCount,productID,province,city,area);			product.setLogisMap(logisMap);			productList.add(product);		}		cartInfo.setProductList(productList);				getRequest().setAttribute("compSize", set.size());		Product product = cartInfo.getProductList().get(0);		Coupon c=new Coupon();		c.setOwnerID(acc.getId());		c.setOrientationType("pay");//定向类型为0或1的		c.setStatus(net.jeeshop.services.common.Coupon.status_y);		c.setOwnerType(net.jeeshop.services.common.Coupon.ownerType_user);		c.setOrientationID(product.getCompID());		c.setOrientationName(product.getCompName());		List<Coupon> list=couponService.selectAccCoupon(c);		Double couponMoney=0.0;		for (int i = list.size()-1; i >=0; i--) {			Coupon c2 = list.get(i);			if(c2.getEndTime()!=null&&DateUtil.strToDatehhmmss(c2.getEndTime().substring(0, c2.getEndTime().length()-2)).before(new Date())){				c2.setStatus(net.jeeshop.services.common.Coupon.status_n);				c2.setRemark("已过期");				couponService.update(c2);				list.remove(i);				continue;			}			if(c2.getBeginTime()!=null&&DateUtil.strToDatehhmmss(c2.getBeginTime().substring(0, c2.getBeginTime().length()-2)).after(new Date())){				list.remove(i);				continue;			}			couponMoney+=c2.getAmount();		}		getRequest().setAttribute("yhqList", list);		getRequest().setAttribute("couponMoney", couponMoney);		getRequest().setAttribute("userMoney", acc.getMoney());				return "confirmOrder";	}	/**	 * 直接购买确认订单信息	 * teng	 * @return	 */	public String confirmOrderNow() throws Exception{ 		logger.error("confirmOrder..");		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {//			getSession().getAttribute(FrontContainer);			return "toLogin";		}		String productID = getRequest().getParameter("productID");				getRequest().setAttribute("productID",productID);				if(StringUtils.isBlank(productID)){						CartInfo cartInfo=(CartInfo) getSession().getAttribute(FrontContainer.myBuyNow);						if(cartInfo!=null){								//加载配送信息				Address add = new Address();				add.setAccount(acc.getAccount());				List<Address> addressList = addressService.selectList(add);				cartInfo.setAddressList(addressList);				if(addressList!=null && addressList.size()>0){					for(int i=0;i<addressList.size();i++){						Address addItem = addressList.get(i);						if(StringUtils.isNotBlank(addItem.getIsdefault()) && addItem.getIsdefault().equals("y")){							cartInfo.setDefaultAddessID(addItem.getId());							break;						}					}				}				getSession().setAttribute(FrontContainer.myBuyNow,cartInfo);				getRequest().setAttribute("userMoney", acc.getMoney());				return "confirmOrderNow";			}		}				String buySpecID = getRequest().getParameter("specID");		int buyCount = Integer.valueOf(getRequest().getParameter("inputBuyNum"));				getRequest().setAttribute("inputBuyNum",buyCount);				if(StringUtils.isEmpty(productID) || buyCount<=0){			throw new NullPointerException("参数错误！");		}				/**		 * 检查内存库存是否已超卖，如果超库存不足，则提醒用户		 */		ProductStockInfo momeryStockInfo = SystemManager.productStockMap.get(productID);		if(momeryStockInfo==null){			throw new RuntimeException("商品已卖完或已下架，请联系站点管理员!");		}				getSession().setAttribute(FrontContainer.myBuyNow,null);		CartInfo cartInfo =  new CartInfo();		if(cartInfo==null){			cartInfo = new CartInfo();		}		//getSession().setAttribute(FrontContainer.myCart,cartInfo);				//检查指定的产品是否已购买到购物车，购买了则数量++，否则查询后添加到购物车		boolean exists = false;		for(int i=0;i<cartInfo.getProductList().size();i++){			Product p = cartInfo.getProductList().get(i);			if(p.getId().equals(productID)){				p.setBuyCount(p.getBuyCount()+buyCount);				logger.error("商品已购买，只对数量进行++，总数="+p.getBuyCount());								if(p.getExchangeScore() > 0){					p.setTotal0("0.00");					p.setTotalExchangeScore(p.getBuyCount() * p.getExchangeScore());				}else{					p.setTotal0(df.format(p.getBuyCount() * Double.valueOf(p.getNowPrice())));				}				exists = true;			}		}				super.utf8JSON();				//如果购物车中部存在此商品，则添加到购物车		if(!exists){			Product product = new Product();			product.setId(productID);//			product.setStatus(1);			product = productService.selectOne(product);			if(product==null){				throw new NullPointerException();			}						/**			 * 如果此商品为促销活动的商品，则按照活动规则计算商品金额			 */			//判断是否符合活动-------------------------			int activityStart=0;			if(StringUtils.isNotBlank(product.getActivityID())){				Activity activity = activityService.selectById(product.getActivityID());				if(DateUtil.strToDatehhmmss(activity.getStartDate().substring(0,19)).before(new Date())){					if(DateUtil.strToDatehhmmss(activity.getEndDate().substring(0,19)).after(new Date())){					product.setPrice(product.getActivityPrice()+"");					activityStart=1;										if(activity.getMaxSellCount()>0){						ActivityCount ac=new ActivityCount(acc.getAccount(),activity.getId(),product.getId());						ActivityCount ac2 = activityCountService.selectOne(ac);						int count=0;						if(ac2!=null){							count=ac2.getCount();						}						if(activity.getMaxSellCount()>0&&(product.getBuyCount()+count)>activity.getMaxSellCount()){							getRequest().setAttribute("message", "本商品活动期内,您还能能购买的数量为:"+(activity.getMaxSellCount()-count));							getRequest().getRequestDispatcher("/product!product?e.id="+product.getId()).forward(getRequest(), getResponse());							return null;						}						}					}else{						activityStart=3;						myCommonDao.executeSql(2, "update t_product set activityID=null,activityType=null where activityID="+activity.getId());					}				}			}			if(activityStart==3){				getRequest().setAttribute("message", "操作失败!活动已到期,请重新购买!");				getRequest().getRequestDispatcher("/product!product?e.id="+product.getId()).forward(getRequest(), getResponse());				return null;			}			if(activityStart==1){				if(product.getActivityPrice()!=null&&product.getActivityPrice()>0){				product.setNowPrice(product.getActivityPrice()+"");				}			}						product.setBuyCount(buyCount);						/**			 * 加载指定商品的规格信息			 */			if(StringUtils.isNotBlank(buySpecID)){				Spec spec = specService.selectById(buySpecID);				if(spec==null){					throw new NullPointerException("根据指定的规格"+buySpecID+"查询不到任何数据!");				}				product.setBuySpecInfo(spec);				//减少以后的逻辑判断，规格的价格等同于商品的价格				if(activityStart==1&&spec.getActivityPrice()!=null&&spec.getActivityPrice()>0){					product.setNowPrice(spec.getActivityPrice()+"");				}else{				product.setNowPrice(spec.getSpecPrice());				}			}						if(product.getExchangeScore()==0){				product.setTotal0(df.format(product.getBuyCount() * Double.valueOf(product.getNowPrice())));			}else{				product.setTotalExchangeScore(product.getBuyCount() * product.getExchangeScore());				product.setTotal0("0.00");			}			cartInfo.getProductList().add(product);			logger.error("添加商品到购物车!商品ID="+product.getId());		}		cartInfo.totalCacl();//计算购物车中商品总金额						String province="0";//默认收货地址-省		String city="0";//默认收货地址-市		String area="0";//默认收货地址-区				//加载配送信息		Address add = new Address();		add.setAccount(acc.getAccount());		List<Address> addressList = addressService.selectList(add);		cartInfo.setAddressList(addressList);		cartInfo.setDefaultAddessID(null);		if(addressList!=null && addressList.size()>0){//			boolean exist = false;			for(int i=0;i<addressList.size();i++){				Address addItem = addressList.get(i);				if(StringUtils.isNotBlank(addItem.getIsdefault()) && addItem.getIsdefault().equals("y")){					cartInfo.setDefaultAddessID(addItem.getId());					province=addItem.getProvince();					city=addItem.getCity();					area=addItem.getArea();					break;				}			}		}		/**		 * 加载商品的物流信息		 */		List<Product> productList=new ArrayList<Product>();		Product product=cartInfo.getProductList().get(0);		Map<String,String> logisMap=getLogistics(buyCount,productID,province,city,area);		product.setLogisMap(logisMap);		productList.add(product);		cartInfo.setProductList(productList);				/**		 * 加载商品的物流信息		 */		//Map<String,String> logisMap=getLogistics(buyCount,productID,province,city,area);		//getRequest().setAttribute("logisMap", logisMap);				getSession().setAttribute(FrontContainer.myBuyNow,cartInfo );		//Product product = cartInfo.getProductList().get(0);		Coupon c=new Coupon();		c.setOwnerID(acc.getId());		c.setOrientationType("pay");//定向类型为0或1的		c.setStatus(net.jeeshop.services.common.Coupon.status_y);		c.setOrientationID(product.getCompID());		c.setOrientationName(product.getCompName());		List<Coupon> list=couponService.selectAccCoupon(c);		Double couponMoney=0.0;		for (int i = list.size()-1; i >=0; i--) {			Coupon c2 = list.get(i);			if(c2.getEndTime()!=null&&DateUtil.strToDatehhmmss(c2.getEndTime().substring(0, c2.getEndTime().length()-2)).before(new Date())){				c2.setStatus(net.jeeshop.services.common.Coupon.status_n);				couponService.update(c2);				list.remove(i);				continue;			}			if(c2.getBeginTime()!=null&&DateUtil.strToDatehhmmss(c2.getBeginTime().substring(0, c2.getBeginTime().length()-2)).after(new Date())){				list.remove(i);				continue;			}			couponMoney+=c2.getAmount();		}		getRequest().setAttribute("yhqList", list);		getRequest().setAttribute("couponMoney", couponMoney);		getRequest().setAttribute("userMoney", acc.getMoney());				return "confirmOrderNow";	}	/**	 * 修改区域重新计算运费	 * @throws Exception	 */	public String selectLogistics() throws Exception{		int buyCount=Integer.parseInt(getRequest().getParameter("buyCount"));		String productID=getRequest().getParameter("productID");		String province=getRequest().getParameter("province");		String city=getRequest().getParameter("city");		String area=getRequest().getParameter("area");		Map<String,String> logisMap=getLogistics(buyCount,productID,province,city,area);				JSONArray json = JSONArray.fromObject(logisMap);		String jsonStr = json.toString();		super.write(jsonStr);				return null;	}	/**	 * 计算运费	 * 靳友斌	 */	public Map<String,String> getLogistics(int buyCount,String productID,String province,String city,String area) throws Exception{		Logistics logistics=logisticsService.selectLogisticsByProductId(productID);		Map<String,String> logisMap=new HashMap<String, String>();		if("0".equals(province)&&"0".equals(city)&&"0".equals(area)){			province="000000";			city="000000";			area="000000";		}		if (logistics!=null) {			String isfree=logistics.getIsfree();			String logisticsid=logistics.getId();			if("1".equals(isfree)){//包邮				logisMap.put("type", "包邮");//运送方式				logisMap.put("price", "0");//费用			}else if("2".equals(isfree)){//自定义运费								Logistics_free lf=new Logistics_free();				lf.setLogisticsid(Integer.parseInt(logisticsid));				lf.setProvince(province);				lf.setCity(city);				lf.setArea(area);				Logistics_price lp=new Logistics_price();				lp.setLogisticsid(Integer.parseInt(logisticsid));				lp.setProvince(province);				lp.setCity(city);				lp.setArea(area);				//根据默认地区查询是否有包邮优惠				List<Logistics_free> freeList=this.logistics_freeService.selectFreeByArea(lf);				//根据默认地区查询运费				List<Logistics_price> priceList=this.logistics_priceService.selectPriceByArea(lp);				//查询默认运费				List<Logistics_price> defaultPrice=this.logistics_priceService.selectListByLogid(lp);								//如果该商品存在优惠条件				if(freeList.size()!=0){					//如果购买的数量满足条件					if(freeList.get(0).getConditions()<=buyCount){						logisMap.put("type", "包邮");//运送方式						logisMap.put("price", "0");//费用					}else{//如果不满足，使用自定义运费						//如果买家所在地区有自定义运费						if(priceList.size()!=0){							if (priceList.get(0).getType()==1) {								logisMap.put("type", "快递");//运送方式							}else{								logisMap.put("type", "物流");//运送方式							}							//计算费用							//如果购买的数量满足首件条件							int firstnum=Integer.parseInt(priceList.get(0).getFirstnum());							double firstprice=Double.parseDouble(priceList.get(0).getFirstprice());							int extendnum=Integer.parseInt(priceList.get(0).getExtendnum());							double extendprice=Double.parseDouble(priceList.get(0).getExtendprice());							if(buyCount<=firstnum){								logisMap.put("price", String.valueOf((int)firstprice));//费用							}else{								int extend=buyCount-firstnum;//超出数量								int twice=extend%extendnum;								if(twice>0){									twice=extend/extendnum+1;								}else{									twice=extend/extendnum;								}								double c=extendprice * twice;								logisMap.put("price", String.valueOf((int)(c+firstprice)));//费用							}						}else{//如果没有，使用默认运费							if (defaultPrice.get(0).getType()==1) {								logisMap.put("type", "快递");//运送方式							}else{								logisMap.put("type", "物流");//运送方式							}							//计算费用							//如果购买的数量满足首件条件							int firstnum=Integer.parseInt(defaultPrice.get(0).getFirstnum());							double firstprice=Double.parseDouble(defaultPrice.get(0).getFirstprice());							int extendnum=Integer.parseInt(defaultPrice.get(0).getExtendnum());							double extendprice=Double.parseDouble(defaultPrice.get(0).getExtendprice());							if(buyCount<=firstnum){								logisMap.put("price", String.valueOf((int)firstprice));//费用							}else{								int extend=buyCount-firstnum;//超出数量								///////// 如果被整除不用+1								int twice=extend%extendnum;								if(twice>0){									twice=extend/extendnum+1;								}else{									twice=extend/extendnum;								}								double c=extendprice * twice;								logisMap.put("price", String.valueOf((int)(c+firstprice)));//费用							}						}					}				}else{					if(priceList.size()!=0){						if (priceList.get(0).getType()==1) {							logisMap.put("type", "快递");//运送方式						}else{							logisMap.put("type", "物流");//运送方式						}						//计算费用						//如果购买的数量满足首件条件						int firstnum=Integer.parseInt(priceList.get(0).getFirstnum());						double firstprice=Double.parseDouble(priceList.get(0).getFirstprice());						int extendnum=Integer.parseInt(priceList.get(0).getExtendnum());						double extendprice=Double.parseDouble(priceList.get(0).getExtendprice());						if(buyCount<=firstnum){							logisMap.put("price", String.valueOf((int)firstprice));//费用						}else{							int extend=buyCount-firstnum;//超出数量							int twice=extend%extendnum;							if(twice>0){								twice=extend/extendnum+1;							}else{								twice=extend/extendnum;							}							double c=extendprice * twice;							logisMap.put("price", String.valueOf((int)(c+firstprice)));//费用						}					}else{//如果没有，使用默认运费						if (defaultPrice.get(0).getType()==1) {							logisMap.put("type", "快递");//运送方式						}else{							logisMap.put("type", "物流");//运送方式						}						//计算费用						//如果购买的数量满足首件条件						int firstnum=Integer.parseInt(defaultPrice.get(0).getFirstnum());						double firstprice=Double.parseDouble(defaultPrice.get(0).getFirstprice());						int extendnum=Integer.parseInt(defaultPrice.get(0).getExtendnum());						double extendprice=Double.parseDouble(defaultPrice.get(0).getExtendprice());						if(buyCount<=firstnum){							logisMap.put("price", String.valueOf((int)firstprice));//费用						}else{							int extend=buyCount-firstnum;//超出数量							int twice=extend%extendnum;							if(twice>0){								twice=extend/extendnum+1;							}else{								twice=extend/extendnum;							}							double c=extendprice * twice;							logisMap.put("price", String.valueOf((int)(c+firstprice)));//费用						}					}				}			}		}else{			logisMap.put("type", "无");			logisMap.put("price", "0");		}		getRequest().setAttribute("logisMap", logisMap);				return logisMap;	}	/**	 * 支付成功后，回调请求跳转到的页面	 * @return	 */	public String paySuccess(){		logger.error("paySuccess...");		return "paySuccess";	}	/**	 * 清空购物车	 * @author 滕武超	 * @date 2015-11-20 下午01:11:21 	 * @Description:	 */	public String qkCart(){		getSession().setAttribute(FrontContainer.myCart, null);		jsonStr="1";		return "toJson";	}		/**	 * 交易成功后，回调请求跳转到的页面	 * @return	 */	public String tradeSuccess(){		logger.error("tradeSuccess...");		return "tradeSuccess";	}		/**	 * 延长收货	 * @author 滕武超	 * @date 2015-12-20 下午04:31:39 	 * @Description:	 */	public String delayed(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null) {			return "toLogin";		}		String id = getRequest().getParameter("id");		if(StringUtils.isBlank(id)){			throw new RuntimeException("参数有误!");		}		 Order o=new Order();		 o.setId(id);		 Integer rt = Integer.valueOf(KeyValueHelper.get("ReceiveTime"));		 o.setReceiveTime(DateUtil.dateToStr(DateUtil.addDay(new Date(), rt), "yyyy-MM-dd HH:mm:ss"));		 orderService.update(o);		 getRequest().setAttribute("message", "延长收货成功,已为您延时"+rt+"天!");		 return orderInfo();	}		public OrderlogService getOrderlogService() {		return orderlogService;	}	public void setOrderlogService(OrderlogService orderlogService) {		this.orderlogService = orderlogService;	}}