package net.jeeshop.web.action.front.company;import java.io.IOException;import java.util.Date;import java.util.List;import java.util.Map;import javax.servlet.http.Cookie;import net.jeeshop.core.BaseAction;import net.jeeshop.core.FrontContainer;import net.jeeshop.core.KeyValueHelper;import net.jeeshop.core.ManageContainer;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.util.AddressUtils;import net.jeeshop.core.util.DateUtil;import net.jeeshop.core.util.MD5;import net.jeeshop.services.common.FavoriteShop;import net.jeeshop.services.common.TuiGuang;import net.jeeshop.services.front.account.AccountService;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.address.AddressService;import net.jeeshop.services.front.area.bean.Area;import net.jeeshop.services.front.attribute_link.Attribute_linkService;import net.jeeshop.services.front.catalog.CatalogService;import net.jeeshop.services.front.comment.CommentService;import net.jeeshop.services.front.company.CompanyService;import net.jeeshop.services.front.company.bean.Company;import net.jeeshop.services.front.emailNotifyProduct.EmailNotifyProductService;import net.jeeshop.services.front.emailNotifyProduct.bean.EmailNotifyProduct;import net.jeeshop.services.front.favorite.FavoriteService;import net.jeeshop.services.front.favorite.bean.Favorite;import net.jeeshop.services.front.favoriteShop.service.FavoriteShopService;import net.jeeshop.services.front.news.NewsService;import net.jeeshop.services.front.product.ProductService;import net.jeeshop.services.front.product.bean.Product;import net.jeeshop.services.manage.gift.GiftService;import net.jeeshop.services.manage.spec.SpecService;import net.jeeshop.services.manage.tuiGuang.service.TuiGuangService;import org.apache.commons.beanutils.BeanUtils;import org.apache.commons.lang.StringUtils;import org.slf4j.LoggerFactory;/** * 商品信息管理 *  * @author jqsl2012@163.com *  */public class CompanyAction extends BaseAction<Company> {	private static final long serialVersionUID = 1L;	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(CompanyAction.class);	private ProductService productService;//商品服务	private CompanyService companyService;//商城服务	private CommentService commentService;//评论服务	private AccountService accountService;	private TuiGuangService tuiGuangService;	private AddressService addressService;//收货人地址服务	private Attribute_linkService attribute_linkService;//商品属性链接表服务	private NewsService newsService;//文章服务	private FavoriteService favoriteService;//商品收藏夹服务	private FavoriteShopService favoriteShopService;//店铺收藏	private EmailNotifyProductService emailNotifyProductService;//商品到货通知	private SpecService specService;	private GiftService giftService;	private CatalogService catalogService;//分类	//	private int catalogID;//选择的产品目录ID	private String catalogCode;//选择的目录code	private int attributeID;//产品属性ID	private String special;//促销活动	private Map<String, String> orderMap;//排序map	private List<Product> productList;//商品列表	private List<Company> companyList;//商品列表	private int orderBy;//排序规则		private String compType;//企业类型				private String account;	private String password;	private String password2;	private String mobile;	private String vcode;					public FavoriteShopService getFavoriteShopService() {		return favoriteShopService;	}	public void setFavoriteShopService(FavoriteShopService favoriteShopService) {		this.favoriteShopService = favoriteShopService;	}	public void setTuiGuangService(TuiGuangService tuiGuangService) {		this.tuiGuangService = tuiGuangService;	}	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}	public String getAccount() {		return account;	}	public void setAccount(String account) {		this.account = account;	}	public String getPassword() {		return password;	}	public void setPassword(String password) {		this.password = password;	}	public String getPassword2() {		return password2;	}	public void setPassword2(String password2) {		this.password2 = password2;	}	public String getMobile() {		return mobile;	}	public void setMobile(String mobile) {		this.mobile = mobile;	}	public String getVcode() {		return vcode;	}	public void setVcode(String vcode) {		this.vcode = vcode;	}	public void setCompanyService(CompanyService companyService) {		this.companyService = companyService;	}		public String getCompType() {		return compType;	}	public void setCompType(String compType) {		this.compType = compType;	}	public GiftService getGiftService() {		return giftService;	}	public void setGiftService(GiftService giftService) {		this.giftService = giftService;	}	public CatalogService getCatalogService() {		return catalogService;	}	public void setCatalogService(CatalogService catalogService) {		this.catalogService = catalogService;	}	public SpecService getSpecService() {		return specService;	}	public void setSpecService(SpecService specService) {		this.specService = specService;	}	public void setEmailNotifyProductService(			EmailNotifyProductService emailNotifyProductService) {		this.emailNotifyProductService = emailNotifyProductService;	}	public void setFavoriteService(FavoriteService favoriteService) {		this.favoriteService = favoriteService;	}	public String getCatalogCode() {		return catalogCode;	}	public void setCatalogCode(String catalogCode) {		this.catalogCode = catalogCode;	}	public void setNewsService(NewsService newsService) {		this.newsService = newsService;	}	public String getSpecial() {		return special;	}	public void setSpecial(String special) {		this.special = special;	}	public AddressService getAddressService() {		return addressService;	}	public void setAddressService(AddressService addressService) {		this.addressService = addressService;	}	public void setCommentService(CommentService commentService) {		this.commentService = commentService;	}	public void setAttribute_linkService(Attribute_linkService attribute_linkService) {		this.attribute_linkService = attribute_linkService;	}	public int getOrderBy() {		return orderBy;	}	public void setOrderBy(int orderBy) {		this.orderBy = orderBy;	}	public int getAttributeID() {		return attributeID;	}	public void setAttributeID(int attributeID) {		this.attributeID = attributeID;	}	public Map<String, String> getOrderMap() {		return orderMap;	}	public void setOrderMap(Map<String, String> orderMap) {		this.orderMap = orderMap;	}	public ProductService getProductService() {		return productService;	}	public void setProductService(ProductService productService) {		this.productService = productService;	}	public List<Product> getProductList() {		return productList;	}	public void setProductList(List<Product> productList) {		this.productList = productList;	}		public List<Company> getCompanyList() {		return companyList;	}	public void setCompanyList(List<Company> companyList) {		this.companyList = companyList;	}	@Override	protected void selectListAfter() {			pager.setPagerUrl(getRequest().getContextPath()+"/company/search.html");	}	@Override	public Company getE() {		return this.e;	}	public String toRegCompany() {		// TODO Auto-generated method stub		net.jeeshop.services.manage.company.bean.Company c=(net.jeeshop.services.manage.company.bean.Company) getSession().getAttribute(ManageContainer.manage_session_company_info);		if(c!=null){			if(c.getStatus().equals("1")){				getRequest().setAttribute("message", "您的企业已提交未审核,不能重复申请!");			}else{			getRequest().setAttribute("message", "您已有企业信息,不能重复申请!");			}			return "userError";		}		return "toRegCompany";	}	public String doRegister() throws Exception{		Account ac=(Account) getSession().getAttribute(FrontContainer.USER_INFO);		if(ac==null){		ac=new Account();		String yzm =getRequest().getParameter("vcode");		String yzmS = getSession().getAttribute(FrontContainer.validateMobileCode).toString();		String phoneS = getSession().getAttribute(FrontContainer.validateMobile).toString();		if(StringUtils.isBlank(mobile)||StringUtils.isBlank(yzm)||!mobile.equals(phoneS)||!yzm.equals(yzmS)){			throw new NullPointerException("非法请求！");		}		ac.setNickname(account);		ac.setPassword(MD5.md5(password));		ac.setEmailIsActive("y");		// 用户注册		ac.setLastLoginTime("yes");		ac.setLastLoginIp(AddressUtils.getIp(getRequest()));		String address = null;		try {			address = AddressUtils.getAddresses("ip=" + ac.getLastLoginIp(), "utf-8");		} catch (Exception e) {			e.printStackTrace();		}		ac.setLastLoginArea(address);				ac.setPresenter(accountService.selectById(KeyValueHelper.get("PTSYZH")).getAccount());    	ac.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));	    	    	ac.setAccount(account);    	ac.setMobile(mobile);	   	    				Cookie[] cookies = getRequest().getCookies();			 for(Cookie cookie : cookies) {			    if("presenter".equals(cookie.getName())) {			    	Account a = accountService.selectById(cookie.getValue());			    	ac.setPresenter(a.getAccount());			    				    	TuiGuang tg=new TuiGuang();					tg.setUserName(account);					tg.setUserPhone(mobile);					tg.setPName(a.getAccount());					tg.setPID(a.getId());					tg.setPPhone(a.getMobile());					tg.setIsLogin("y");					tuiGuangService.insert(tg);			    				    	cookie.setPath(getRequest().getContextPath());			        cookie.setMaxAge(0);//清除cookie,设置生命周期为0			        getResponse().addCookie(cookie);			    }			 }			 accountService.insert(ac);			 //封装角色信息,需重新查询		Account acc = accountService.selectById(ac.getId());		getSession().setAttribute(FrontContainer.USER_INFO, acc);		}				//保存企业信息		if(e.getType().equals("2")){			e.setType("1");		}		e.setCreateAccount(ac.getAccount());		e.setStatus("1");				//需要将省市区的代号换成中文，插入到pcadetail字段里面去，显示的时候方便。		StringBuilder pcadetail = new StringBuilder();		Area sheng = SystemManager.areaMap.get(e.getProvince());//省		pcadetail.append(sheng.getName());				for(int i=0;i<sheng.getChildren().size();i++){			Area shi = sheng.getChildren().get(i);//市			if(shi.getCode().equals(e.getCity())){								pcadetail.append(" ").append(shi.getName());								for(int j = 0;j<shi.getChildren().size();j++){					Area qu = shi.getChildren().get(j);//区					if(qu.getCode().equals(e.getArea())){						pcadetail.append(" ").append(qu.getName());						break;					}				}								break;			}		}				e.setPcadetail(pcadetail.toString());						e.setCompNum(10);		getServer().insert(e);		Company c1 = getServer().selectById(e.getId());		net.jeeshop.services.manage.company.bean.Company c2=new net.jeeshop.services.manage.company.bean.Company();		BeanUtils.copyProperties(c2, c1);		getSession().setAttribute(ManageContainer.manage_session_company_info, c2);		return "regeistOk";	}			/**	 * ajax验证输入的字符的唯一性	 * @return	 * @throws IOException	 */	public String unique() throws IOException{		logger.error("验证输入的字符的唯一性"+e);				if(StringUtils.isNotBlank(account)){//验证用户名是否被占用			logger.error("验证用户名是否被占用");			Account a=new Account();			a.clear();			a.setAccount(account);			getResponse().setCharacterEncoding("utf-8");			if(accountService.selectCount(a)>0){				getResponse().getWriter().write("{\"error\":\"用户名已经被占用!\"}");			}else{				getResponse().getWriter().write("{\"ok\":\"用户名可以使用!\"}");			}		}else if(StringUtils.isNotBlank(vcode)){//验证验证码输入的是否正确			logger.error("检查验证码输入的是否正确"+vcode);			String validateCode = getSession().getAttribute(FrontContainer.validateCode).toString();			logger.error("validateCode="+validateCode);			getResponse().setCharacterEncoding("utf-8");			if(validateCode.equalsIgnoreCase(vcode)){				getResponse().getWriter().write("{\"ok\":\"验证码输入正确!\"}");			}else{				getResponse().getWriter().write("{\"error\":\"验证码输入有误!\"}");			}//			vcode = null;		}		return null;	}	@Override	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Company();		}				this.orderBy = 0;		this.attributeID = 0;		this.special = null;		this.catalogCode = null;		e.clear();				if(productList!=null && productList.size()>0){			for(int i=0;i<this.productList.size();i++){				Product p = this.productList.get(i);				p.clear();				p = null;			}			this.productList.clear();		}		this.productList = null;				super.setSelectMenu(FrontContainer.not_select_menu);//设置主菜单为不选中	}		public void insertAfter(Product e) {		e.clear();	}		/**	 * 根据商品关键字搜索商城列表	 * @return	 * @throws Exception	 */	public String search() throws Exception{//		getSession().setAttribute("selectMenu", "");		Account account = (Account)this.getSession().getAttribute("user_info");				String key = getRequest().getParameter("key");//搜索关键字						String pm=getRequest().getQueryString();				if(pm!=null&&pm.contains("?")){			pm=pm.replace("?", "&");			getResponse().sendRedirect(getRequest().getContextPath()+"/search.html?"+pm);		}		//		logger.error("search?key="+key);		getRequest().setAttribute("key", key);				getE().setName(key);		getE().setType(compType);		super.selectList();//分页搜索数据库中的商品		companyList = pager.getList();		/*判断该店铺是否已收藏*/		if(account!=null){			for (int i = 0; i < companyList.size(); i++) {				FavoriteShop fse=new FavoriteShop();				fse.setAccount(account.getAccount());				fse.setcompanyID(companyList.get(i).getId());				int c=(Integer)this.favoriteShopService.selectFavoriteShopCount(fse);				if(c>0){					companyList.get(i).setIsCollect("1");				}else {					companyList.get(i).setIsCollect("0");				}			}		}		getE().clear(); 		return "companyList";	}				public boolean isEmpty(String value){		if(value==null || value.trim().length()==0){			return true;		}		return false;	}			/**	 * 添加商品到收藏夹	 * @return	 * @throws IOException 	 */	public String addToFavorite() throws IOException{		String productID = getRequest().getParameter("productID");		if(StringUtils.isBlank(productID)){			throw new NullPointerException(FrontContainer.request_illegal_error);		}		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if(acc==null || StringUtils.isBlank(acc.getAccount())){			getResponse().getWriter().write("-1");			return null;		}		Favorite favorite = new Favorite();		favorite.setAccount(acc.getAccount());		favorite.setProductID(productID);				String result = null;		synchronized (FrontContainer.insert_favorite_lock) {			if(favoriteService.selectCount(favorite) == 0){				favoriteService.insert(favorite);				result = "0";//添加成功			}else{				result = "1";//已经添加过了			}		}		getResponse().getWriter().write(result);		return null;	}	//添加到收藏店铺	public String addToFavoriteShop() throws IOException{		String companyID = getRequest().getParameter("companyID");		if(StringUtils.isBlank(companyID)){			throw new NullPointerException(FrontContainer.request_illegal_error);		}		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if(acc==null || StringUtils.isBlank(acc.getAccount())){			getResponse().getWriter().write("-1");			return null;		}		FavoriteShop favoriteShop = new FavoriteShop();		favoriteShop.setAccount(acc.getAccount());		favoriteShop.setcompanyID(companyID);				String result = null;			if(favoriteShopService.selectList(favoriteShop).size()==0){				favoriteShopService.insert(favoriteShop);				result = "0";//添加成功			}else{				result = "1";//已经添加过了			}		getResponse().getWriter().write(result);		return null;	}		/**	 * 商品到货通知-ajax	 * @return	 * @throws IOException 	 */	public String insertEmailNotifyProductService() throws IOException{		String productID = getRequest().getParameter("productID");		String receiveEmail = getRequest().getParameter("receiveEmail");		String productName = getRequest().getParameter("productName");		if(StringUtils.isBlank(productID) || StringUtils.isBlank(receiveEmail)){			throw new NullPointerException(FrontContainer.request_illegal_error);		}				Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if(acc==null){			getResponse().getWriter().write("-1");//用户需要登录			return null;		}				EmailNotifyProduct info = new EmailNotifyProduct();		info.setAccount(acc.getAccount());		info.setReceiveEmail(receiveEmail);		info.setProductID(productID);		info.setProductName(productName);		info.setStatus(net.jeeshop.services.common.EmailNotifyProduct.emailNotifyProduct_status_n);		emailNotifyProductService.insert(info);				getResponse().getWriter().write("0");//成功		return null;	}		/**	 * 加载促销活动的商品列表	 * @return	 * @throws Exception 	 *///	public String activityProductList() throws Exception{//		logger.error("activityProductList...");//		//		//加载商品////		productList = selectProductList0();//		//		//指定分页请求的地址////		pager.setPagerUrl(special+".html");//		return "activityProductList";//	}		/**	 * test	 * 内存库存查询	 * @return	 */	public String selectMemoryStock(){				return "selectMemoryStock";	}	@Override	public void insertAfter(Company e) {		// TODO Auto-generated method stub			}}