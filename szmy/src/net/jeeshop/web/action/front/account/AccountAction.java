package net.jeeshop.web.action.front.account;import java.io.IOException;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Random;import java.util.UUID;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import net.jeeshop.core.BaseAction;import net.jeeshop.core.FrontContainer;import net.jeeshop.core.KeyValueHelper;import net.jeeshop.core.ManageContainer;import net.jeeshop.core.dao.page.PagerModel;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.pay.alipay.alipayescow.config.AlipayConfig;import net.jeeshop.core.pay.alipay.alipayescow.util.AlipaySubmit;import net.jeeshop.core.system.bean.Menu;import net.jeeshop.core.system.bean.MenuItem;import net.jeeshop.core.system.bean.User;import net.jeeshop.core.util.AddressUtils;import net.jeeshop.core.util.CommonPropertiesUtil;import net.jeeshop.core.util.DateUtil;import net.jeeshop.core.util.HttpUtil;import net.jeeshop.core.util.MD5;import net.jeeshop.core.util.SendSMSUtil;import net.jeeshop.core.util.TokenUtil;import net.jeeshop.core.util.TwoDimensionCode;import net.jeeshop.services.common.ConnectUser;import net.jeeshop.services.common.DjSystem;import net.jeeshop.services.common.FavoriteShop;import net.jeeshop.services.common.TuiGuang;import net.jeeshop.services.front.account.AccountService;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.account.bean.LoginTypeEnum;import net.jeeshop.services.front.address.AddressService;import net.jeeshop.services.front.address.bean.Address;import net.jeeshop.services.front.area.bean.Area;import net.jeeshop.services.front.connectUser.service.ConnectUserService;import net.jeeshop.services.front.coupon.CouponService;import net.jeeshop.services.front.coupon.bean.Coupon;import net.jeeshop.services.front.email.EmailService;import net.jeeshop.services.front.email.bean.Email;import net.jeeshop.services.front.favorite.FavoriteService;import net.jeeshop.services.front.favorite.bean.Favorite;import net.jeeshop.services.front.favoriteShop.service.FavoriteShopService;import net.jeeshop.services.front.news.NewsService;import net.jeeshop.services.front.news.bean.News;import net.jeeshop.services.front.notifyTemplate.bean.NotifyTemplate;import net.jeeshop.services.front.order.OrderService;import net.jeeshop.services.front.order.bean.Order;import net.jeeshop.services.front.order.bean.OrderSimpleReport;import net.jeeshop.services.front.orderdetail.OrderdetailService;import net.jeeshop.services.front.orderdetail.bean.Orderdetail;import net.jeeshop.services.front.product.ProductService;import net.jeeshop.services.front.product.bean.Product;import net.jeeshop.services.manage.company.CompanyService;import net.jeeshop.services.manage.company.bean.Company;import net.jeeshop.services.manage.system.impl.MenuService;import net.jeeshop.services.manage.system.impl.UserService;import net.jeeshop.services.manage.tuiGuang.service.TuiGuangService;import net.jeeshop.web.action.front.orders.CartInfo;import net.sf.json.JSONObject;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.apache.struts2.ServletActionContext;import org.springframework.transaction.annotation.Isolation;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import weibo4j.model.WeiboException;import com.alibaba.fastjson.JSON;import com.qq.connect.QQConnectException;import com.qq.connect.api.OpenID;import com.qq.connect.api.qzone.UserInfo;import com.qq.connect.javabeans.AccessToken;import com.qq.connect.javabeans.qzone.UserInfoBean;import com.qq.connect.oauth.Oauth;/** * 门户会员服务类 *  * @author huangf *  */public class AccountAction extends BaseAction<Account> {	private static final Logger logger = Logger.getLogger(AccountAction.class);	private static final long serialVersionUID = 1L;	private MenuService menuService;	private AccountService accountService;	private OrderService orderService; 	private NewsService newsService;	private AddressService addressService;//配送地址service	private List<Address> addressList;//配送地址列表	private ProductService productService;	private FavoriteService favoriteService;//商品收藏夹	private FavoriteShopService favoriteShopService;	private String selectLeftMenu;//选中的个人中心的菜单项	private EmailService emailService;	private CouponService couponService;	private CompanyService companyService;	private TuiGuangService tuiGuangService;	private UserService userService; 	private OrderdetailService orderdetailService; 	private ConnectUserService connectUserService; //关联用户	private String loginType; 	private static final String str = "../";	private String helpCode;//帮助code	private News news;//文章	private Address address;//配送地址	private OrderSimpleReport orderSimpleReport;//简单报表		private static final Object qq_login_lock = new Object();//qq登陆，本地锁	private static final Object sinawb_login_lock = new Object();//新浪微博登陆，本地锁		// 登陆错误信息	private String errorMsg;			private static final String toLogin = "toLogin";//转到登陆界面,forword方式 地址不变	private static final String toLoginRedirect = "toLoginRedirect";//转到登陆界面,getResponse().sendRedirect(arg0)方式 地址变化	private static final String toIndex = "toIndex";//转到门户首页	private static final String toJson = "toJson";		private String pass ;	private String area ;//各地动检区域代码		private String jsonStr;		/**	 * 	 * 作者：王海洋	 * 时间：2015-12-9下午05:10:54	 * 描述: 用户在首页选择省份存入session	 * @return	 */	public String toSaveAreaToSession(){		String province = this.getRequest().getParameter("province");		if(StringUtils.isNotBlank(province)){			if("1".equals(province)){				this.getRequest().getSession().removeAttribute("_province_");			}else{				this.getRequest().getSession().setAttribute("_province_", province);			}			jsonStr="1";		}else{			jsonStr="0";		}		return toJson;	}			public void setConnectUserService(ConnectUserService connectUserService) {		this.connectUserService = connectUserService;	}	public FavoriteShopService getFavoriteShopService() {		return favoriteShopService;	}	public void setFavoriteShopService(FavoriteShopService favoriteShopService) {		this.favoriteShopService = favoriteShopService;	}			public String getArea() {		return area;	}	public void setArea(String area) {		this.area = area;	}	public String getJsonStr() {		return jsonStr;	}	public void setJsonStr(String jsonStr) {		this.jsonStr = jsonStr;	}	public void setTuiGuangService(TuiGuangService tuiGuangService) {		this.tuiGuangService = tuiGuangService;	}	public void setOrderdetailService(OrderdetailService orderdetailService) {		this.orderdetailService = orderdetailService;	}	public void setMenuService(MenuService menuService) {		this.menuService = menuService;	}	public void setCompanyService(CompanyService companyService) {		this.companyService = companyService;	}	public void setUserService(UserService userService) {		this.userService = userService;	}	public void setCouponService(CouponService couponService) {		this.couponService = couponService;	}	public OrderSimpleReport getOrderSimpleReport() {		return orderSimpleReport;	}	public void setOrderSimpleReport(OrderSimpleReport orderSimpleReport) {		this.orderSimpleReport = orderSimpleReport;	}	public FavoriteService getFavoriteService() {		return favoriteService;	}	public void setFavoriteService(FavoriteService favoriteService) {		this.favoriteService = favoriteService;	}	public void setEmailService(EmailService emailService) {		this.emailService = emailService;	}	public void setProductService(ProductService productService) {		this.productService = productService;	}	public OrderService getOrderService() {		return orderService;	}	public Address getAddress() {		return address;	}	public void setAddress(Address address) {		this.address = address;	}	public NewsService getNewsService() {		return newsService;	}	public void setNewsService(NewsService newsService) {		this.newsService = newsService;	}	public News getNews() {		return news;	}	public void setNews(News news) {		this.news = news;	}	public String getHelpCode() {		return helpCode;	}	public void setHelpCode(String helpCode) {		this.helpCode = helpCode;	}	public void setOrderService(OrderService orderService) {		this.orderService = orderService;	}	public List<Address> getAddressList() {		return addressList;	}	public void setAddressList(List<Address> addressList) {		this.addressList = addressList;	}	public AddressService getAddressService() {		return addressService;	}	public void setAddressService(AddressService addressService) {		this.addressService = addressService;	}	public String getSelectLeftMenu() {		return selectLeftMenu;	}	public void setSelectLeftMenu(String selectLeftMenu) {		this.selectLeftMenu = selectLeftMenu;	}	public String getErrorMsg() {		return errorMsg;	}	public void setErrorMsg(String errorMsg) {		this.errorMsg = errorMsg;	}	public AccountService getAccountService() {		return accountService;	}	@Override	protected void selectListAfter() {		pager.setPagerUrl("account!selectList.action");	}	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}	@Override	public Account getE() {		return this.e;	}	@Override	public void prepare() throws Exception {		logger.error("AccountAction.prepare...");		if (this.e == null) {			this.e = new Account();		}else{			e.clear();		}				if(address==null){			this.address = new Address();		}else{			address.clear();		}				errorMsg = null;				if(orderSimpleReport!=null){			orderSimpleReport.clear();			orderSimpleReport = null;		}				/**		 * 清除地址列表数据		 */		if(addressList!=null && addressList.size()>0){			for(int i=0;i<addressList.size();i++){				addressList.get(i).clear();			}			addressList.clear();			addressList = null;		}				super.setSelectMenu(FrontContainer.not_select_menu);//设置主菜单为不选中	}	@Override	public void insertAfter(Account e) {		e.clear();	}	/**	 * 用户注册	 * 	 * @return	 * @throws IOException 	 * 修改返回跳转页面	 * @author 靳友斌	 * 2015年11月23日	 */	public String doRegister() throws IOException {		if(StringUtils.isBlank(e.getMobile())){			throw new NullPointerException("手机号码不能为空！");		}		String yzm =e.getVcode();		String yzmS = getSession().getAttribute(FrontContainer.validateMobileCode).toString();		String phoneS = getSession().getAttribute(FrontContainer.validateMobile).toString();		if(StringUtils.isBlank(e.getMobile())||StringUtils.isBlank(yzm)||!e.getMobile().equals(phoneS)||!yzm.equals(yzmS)){			throw new NullPointerException("非法请求！");		}		e.setPassword(MD5.md5(e.getPassword()));		e.setEmailIsActive("y");		if (StringUtils.isBlank(e.getId())) {			// 用户注册			e.setLastLoginTime("yes");			e.setLastLoginIp(AddressUtils.getIp(getRequest()));			String address = null;			try {				address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");			} catch (Exception e) {				e.printStackTrace();			}			e.setLastLoginArea(address);			e.setPresenter(accountService.selectById(KeyValueHelper.get("PTSYZH")).getAccount());	    	e.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));			Cookie[] cookies = getRequest().getCookies();			 for(Cookie cookie : cookies) {			    if("presenter".equals(cookie.getName())) {			    	Account a = accountService.selectById(cookie.getValue());			    	e.setPresenter(a.getAccount());			    				    	TuiGuang tg=new TuiGuang();					tg.setUserName(e.getAccount());					tg.setUserPhone(e.getMobile());					tg.setUserID(e.getId());					tg.setPName(a.getAccount());					tg.setPID(a.getId());					tg.setPPhone(a.getMobile());					tg.setIsLogin("y");					tuiGuangService.insert(tg);			    				    	cookie.setPath(getRequest().getContextPath());			        cookie.setMaxAge(0);//清除cookie,设置生命周期为0			        getResponse().addCookie(cookie);			    }			 }						getServer().insert(e);		//accountService.sendEmail(e, NotifyTemplate.email_reg);		} else {			// 修改密码//			getServer().update(e);			throw new NullPointerException("不支持！");		}		Account acc = accountService.selectById(e.getId());		getSession().setAttribute(FrontContainer.USER_INFO, acc);		//企业信息		Company company=new Company();		company.setCreateAccount(acc.getAccount());		company=companyService.selectOne(company);		//if(company!=null){		getSession().setAttribute(ManageContainer.manage_session_company_info, company);				return "regeistOk";		//return toIndex;/*	//		getSession().setAttribute("checkEmail","checkEmail");		getSession().setAttribute("uid", e.getId());		getRequest().setAttribute("message", "恭喜，帐号注册成功！");		getRequest().setAttribute("url", getRequest().getContextPath()+"/user/login.html");		//getResponse().sendRedirect(SystemManager.systemSetting.getWww()+"/user/checkEmail.html");		return "successMsg";		*/	}			/**	 * 用户注册--》再次发送邮件	 * @return	 * @throws IOException 	 */	public String sendEmailAgain() throws IOException{		String uid = getRequest().getParameter("uid");		if(StringUtils.isBlank(uid)){			throw new NullPointerException("参数不正确！");		}				Account acc = accountService.selectById(uid);		if(acc==null){			throw new NullPointerException("根据用户ID查询不到用户信息！");		}				accountService.sendEmail(acc, net.jeeshop.services.common.NotifyTemplate.email_reg);		getSession().setAttribute("uid", acc.getId());		getResponse().sendRedirect(SystemManager.systemSetting.getWww()+"/user/checkEmail.html");		return null;	}	/**	 * 转到邮箱验证提示页面	 * @return	 */	public String checkEmail(){		logger.error("checkEmail");		//		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);//		if (acc == null || StringUtils.isBlank(acc.getAccount())) {//			return toLogin;//		}		return "checkEmail";	}		/**	 * 转到忘记密码页面	 * @return	 */	public String forget(){		return "forget";	}		/**	 * 找回密码	 * @return	 * @throws Exception 	 */	public String doForget() throws Exception{//		synchronized (this) {//			String token = getRequest().getParameter("token");//			logger.error("doForget...token="+token);//			boolean _isTokenValid = TokenUtil.getInstance().isTokenValid(getRequest());//			logger.error("_isTokenValid = " + _isTokenValid);//		}		String type = getRequest().getParameter("type");						Account acc = accountService.selectById(e.getId());		if(acc==null){			throw new NullPointerException("根据账号查询不到指定的会员信息，请联系管理员！");		}		e=acc;		if(type.equals("1")){			if(acc.getMobile()==null||acc.getMobile().equals("")){				throw new NullPointerException("手机号码为空！");			}			return "toWaitUserCheckM";		}else if(type.equals("2")){			if(acc.getEmail()==null||acc.getEmail().equals("")){				throw new NullPointerException("邮箱为空！");			}			accountService.doForget(e);			return "toWaitUserCheckE";		}				//		String sms = CommonPropertiesUtil.getSMSValue("Vcode").replace("yzm", randString(4));//		String sendMsg = javaMsgSender.sendMsg(sms, new String[]{acc.getMobile()});//		logger.error("找回密码发送短信---->内容："+sms+"电话："+acc.getMobile()+",反馈信息："+sendMsg);		//等待用户检查短信或邮件		return "toWaitUserCheckM";	}		/**	 * 跳到选择找回方式页面	 * @return	 * @throws Exception 	 */	public String toFountType() throws Exception{//		synchronized (this) {//			String token = getRequest().getParameter("token");//			logger.error("doForget...token="+token);//			boolean _isTokenValid = TokenUtil.getInstance().isTokenValid(getRequest());//			logger.error("_isTokenValid = " + _isTokenValid);		if(!TokenUtil.getInstance().isTokenValid(getRequest())){			throw new Exception("表单重复提交了！");		}//		}		String validateCode = getSession().getAttribute(FrontContainer.validateCode).toString();		if(!validateCode.equalsIgnoreCase(e.getVcode())){			errorMsg="验证码输入错误!";			return "forget";		}		String account = getRequest().getParameter("account");		if(StringUtils.isNotBlank(account)){			//如果此值不为空，则说明是 重新发送按钮 请求的此方法。重新发送按钮来重发邮件			e.setAccount(account);		}		Account acc = new Account();		acc.setAccount(e.getAccount());		acc = accountService.selectOne(acc);		if(acc==null){			throw new NullPointerException("根据账号查询不到指定的会员信息，请联系管理员！");		}		e=acc;		if((acc.getMobile()==null||acc.getMobile().equals(""))&&(acc.getEmail()==null||acc.getEmail().equals(""))){			return "toFountError";		}						if(acc.getMobile()==null||acc.getMobile().equals("")){			getRequest().setAttribute("mnull", "1");		}		if(acc.getEmail()==null||acc.getEmail().equals("")){			getRequest().setAttribute("enull", "1");		}			//		String sms = CommonPropertiesUtil.getSMSValue("Vcode").replace("yzm", randString(4));//		String sendMsg = javaMsgSender.sendMsg(sms, new String[]{acc.getMobile()});//		logger.error("找回密码发送短信---->内容："+sms+"电话："+acc.getMobile()+",反馈信息："+sendMsg);		//等待用户检查短信或邮件		return "toFountType";	}	@SuppressWarnings("unused")	private String randString (int length)    {    	Random r = new Random();        String ssource = "0123456789";        char[] src = ssource.toCharArray();            char[] buf = new char[length];            int rnd;            for(int i=0;i<length;i++)            {                    rnd = Math.abs(r.nextInt()) % src.length;                    buf[i] = src[rnd];            }            return new String(buf);    }		public String waitUserCheck(){		return "waitUserCheck";	}		/**	 * ajax检查用户名称是否存在	 * @return	 * @throws IOException 	 */	public String checkAccountExist() throws IOException{		super.utf8JSON();		if(StringUtils.isBlank(e.getAccount())){			getResponse().getWriter().write("{\"error\":\"用户名不能为空!\"}");		}else{			Account acc = new Account();			acc.setAccount(e.getAccount());			if(accountService.selectCount(acc)==0){				getResponse().getWriter().write("{\"error\":\"用户名不存在!\"}");			}else{				getResponse().getWriter().write("{\"ok\":\"用户名输入正确!\"}");			}		}		return null;	}	/**	 * ajax检查密码是否正确	 * @return	 * @throws IOException 	 */	public String checkPassword() throws IOException{		super.utf8JSON();		if(StringUtils.isBlank(e.getPassword())){			getResponse().getWriter().write("{\"error\":\"密码不能为空!\"}");		}else{			Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);			if(!acc.getPassword().equals(MD5.md5(e.getPassword()))){				getResponse().getWriter().write("{\"error\":\"输入的密码不正确!\"}");			}else{				getResponse().getWriter().write("{\"ok\":\"密码正确!\"}");			}		}		return null;	}		/**	 * ajax检查新邮箱不能和原邮箱一致	 * @return	 * @throws IOException 	 */	public String changeEmailCheck() throws IOException{		super.utf8JSON();		if(StringUtils.isBlank(e.getNewEmail())){			getResponse().getWriter().write("{\"error\":\"新邮箱不能为空!\"}");		}else{			Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);			if (acc == null || StringUtils.isBlank(acc.getAccount())) {				return toLogin;			}						if(acc.getEmail().equals(e.getNewEmail())){				getResponse().getWriter().write("{\"error\":\"新邮箱不能和原邮箱一致!\"}");			}else{				getResponse().getWriter().write("{\"ok\":\"系统认为此邮箱可用!\"}");			}		}		return null;	}	/**	 * ajax检查新邮箱不能和原邮箱一致	 * @return	 * @throws IOException 	 */	public String changeMobileCheck() throws IOException{		super.utf8JSON();		if(StringUtils.isBlank(e.getMobile())){			getResponse().getWriter().write("{\"error\":\"手机号码不能为空!\"}");		}else{			Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);			if (acc == null || StringUtils.isBlank(acc.getAccount())) {				return toLogin;			}						if(acc.getMobile().equals(e.getMobile())){				getResponse().getWriter().write("{\"ok\":\"输入正确!\"}");			}else{				getResponse().getWriter().write("{\"error\":\"手机号码输入有误!\"}");			}		}		return null;	}		/**	 * 使用QQ账号登陆。JAVA版	 * @return	 * @throws IOException	 */	public String qqLogin() throws IOException{		getResponse().setContentType("text/html;charset=utf-8");        try {        	getResponse().sendRedirect(new Oauth().getAuthorizeURL(getRequest()));        } catch (QQConnectException e) {            e.printStackTrace();        }                return null;	}		/**	 * qq登陆回调方法。java版	 * @return	 * @throws IOException	 */	public String qqCallbackNotifySession2() throws IOException{		logger.error("==qqCallbackNotifySession2执行QQ登陆回调方法==");		getResponse().setContentType("text/html; charset=utf-8");//        PrintWriter out = getResponse().getWriter();        try {            AccessToken accessTokenObj = (new Oauth()).getAccessTokenByRequest(getRequest());            String accessToken   = null,openID = null,nickname = null;            long tokenExpireIn = 0L;            if (accessTokenObj.getAccessToken().equals("")) {//                我们的网站被CSRF攻击了或者用户取消了授权//                做一些数据统计工作                logger.error("没有获取到响应参数");            } else {                accessToken = accessTokenObj.getAccessToken();                tokenExpireIn = accessTokenObj.getExpireIn();                getRequest().getSession().setAttribute("demo_access_token", accessToken);                getRequest().getSession().setAttribute("demo_token_expirein", String.valueOf(tokenExpireIn));                // 利用获取到的accessToken 去获取当前用的openid -------- start                OpenID openIDObj =  new OpenID(accessToken);                openID = openIDObj.getUserOpenID();                logger.error("欢迎你，代号为 " + openID + " 的用户!");//                getRequest().getSession().setAttribute("demo_openid", openID);                logger.error("<a href=" + "/shuoshuoDemo.html" +  " target=\"_blank\">去看看发表说说的demo吧</a>");                // 利用获取到的accessToken 去获取当前用户的openid --------- end                logger.error("<p> start -----------------------------------利用获取到的accessToken,openid 去获取用户在Qzone的昵称等信息 ---------------------------- start </p>");                UserInfo qzoneUserInfo = new UserInfo(accessToken, openID);                UserInfoBean userInfoBean = qzoneUserInfo.getUserInfo();//                out.println("<br/>");                if (userInfoBean.getRet() == 0) {                	nickname = userInfoBean.getNickname();                    logger.error(userInfoBean.getNickname() + "<br/>");                    logger.error(userInfoBean.getGender() + "<br/>");                    logger.error("黄钻等级： " + userInfoBean.getLevel() + "<br/>");                    logger.error("会员 : " + userInfoBean.isVip() + "<br/>");                    logger.error("黄钻会员： " + userInfoBean.isYellowYearVip() + "<br/>");                    logger.error("<image src=" + userInfoBean.getAvatar().getAvatarURL30() + "/><br/>");                    logger.error("<image src=" + userInfoBean.getAvatar().getAvatarURL50() + "/><br/>");                    logger.error("<image src=" + userInfoBean.getAvatar().getAvatarURL100() + "/><br/>");                } else {                    logger.error("很抱歉，我们没能正确获取到您的信息，原因是： " + userInfoBean.getMsg());                }                logger.error("<p> end -----------------------------------利用获取到的accessToken,openid 去获取用户在Qzone的昵称等信息 ---------------------------- end </p>");            }                                    synchronized (qq_login_lock) {            	//查询本地数据库，如果没有此用户则创建一个    			Account acc = new Account();    			acc.setOpenId(openID);    			acc = accountService.selectOne(acc);    			if(acc==null){    				logger.error("查询不到此qq用户。准备创建一个。");    				acc = new Account();    				acc.setOpenId(openID);    				acc.setAccessToken(accessToken);    				acc.setLoginType(LoginTypeEnum.qq);//设置为QQ登陆    				acc.setAccountType(acc.getLoginType().toString());    				accountService.insertOutAccount(acc);    				logger.error("创建成功。");    			}    			    			acc.setLoginType(LoginTypeEnum.qq);//设置为QQ登陆    			acc.setNickname(nickname);    			getSession().setAttribute(FrontContainer.USER_INFO,acc);    			logger.error("注册完毕.");			}                        logger.error("QQ登陆回调方法执行完毕，准备跳转到门户首页。。。");            getResponse().sendRedirect(SystemManager.systemSetting.getWww());        } catch (Exception e) {        	e.printStackTrace();        }		return null;	}		/**	 * 新浪微博登陆java版	 * @return	 * @throws IOException 	 * @throws WeiboException 	 */	public String sinawb() throws IOException, WeiboException{		logger.error("sinawb...");//		BareBonesBrowserLaunch.openURL(new weibo4j.Oauth().authorize("code","",""));		String url = new weibo4j.Oauth().authorize("code","","");		logger.error("url = " + url);		getResponse().sendRedirect(url);		return null;	}		/**	 * 新浪微博回调方法java版	 * @return	 */	public String sinawbCallbackNotifySession2() throws Exception{		String code = getRequest().getParameter("code");		logger.error("sinawbCallbackNotifySession2 ..");		if(StringUtils.isBlank(code)){			throw new NullPointerException("非法请求！");		}				weibo4j.Oauth oauth = new weibo4j.Oauth();		weibo4j.http.AccessToken accessToken = oauth.getAccessTokenByCode(code);		logger.error("accessToken = " + accessToken.getAccessToken() + ",uid = " + accessToken.getUid());		logger.error("AccessToken = " + accessToken);				weibo4j.Users um = new weibo4j.Users();		um.client.setToken(accessToken.getAccessToken());		weibo4j.model.User user = um.showUserById(accessToken.getUid());		logger.error("user = " + user);				//查询本地数据库，如果没有此用户则创建一个		synchronized (sinawb_login_lock) {			Account acc = new Account();			acc.setSinaWeiboID(accessToken.getUid());			acc = accountService.selectOne(acc);			if(acc==null){				logger.error("查询不到此新浪微博用户。准备创建一个。");				acc = new Account();				acc.setSinaWeiboID(accessToken.getUid());				acc.setLoginType(LoginTypeEnum.sinawb);//设置为新浪微博登陆				acc.setAccountType(acc.getLoginType().toString());				accountService.insertOutAccount(acc);				logger.error("创建成功。");			}			acc.setLoginType(LoginTypeEnum.sinawb);//设置为新浪微博登陆			acc.setNickname(user.getScreenName());			getSession().setAttribute(FrontContainer.USER_INFO,acc);			logger.error("注册完毕.");		}						logger.error("新浪微博回调方法执行完毕，准备跳转到门户首页。。。");        getResponse().sendRedirect(SystemManager.systemSetting.getWww());		return null;	}		/**	 * QQ回调通知系统session的业务逻辑处理。ajax回调版	 * @return	 * @throws IOException 	 */	@Deprecated	public String qqCallbackNotifySession() throws IOException{		String status = getRequest().getParameter("status");		String openId = getRequest().getParameter("openId");		String accessToken = getRequest().getParameter("accessToken");		String nickname = getRequest().getParameter("nickname");		logger.error("qqCallbackNotifySession >> status="+status+",openId="+openId+",accessToken="+accessToken+",nickname="+nickname);				if(StringUtils.isBlank(status) || StringUtils.isBlank(openId) || StringUtils.isBlank(accessToken) || StringUtils.isBlank(nickname)){			logger.error("qqCallbackNotifySession 非法请求。");			getResponse().getWriter().write("-1");			return null;		}		if(status.equals("login")){			logger.error("qq用户登陆，在本地系统内注册到session中.");						//查询本地数据库，如果没有此用户则创建一个			Account acc = new Account();			acc.setOpenId(openId);			acc = accountService.selectOne(acc);			if(acc==null){				logger.error("查询不到此新浪微博用户。准备创建一个。");				acc = new Account();				acc.setOpenId(openId);				acc.setAccessToken(accessToken);				acc.setLoginType(LoginTypeEnum.qq);//设置为QQ登陆				acc.setAccountType(acc.getLoginType().toString());				accountService.insertOutAccount(acc);				logger.error("创建成功。");			}						acc.setLoginType(LoginTypeEnum.qq);//设置为QQ登陆			acc.setNickname(nickname);			getSession().setAttribute(FrontContainer.USER_INFO,acc);			logger.error("注册完毕.");		}else if(status.equals("loginOut")){			logger.error("qq登陆用户退出。");			loginout();		}		getResponse().getWriter().write("0");		return null;	}		/**	 * 新浪微博登陆成功后通知本地系统	 * @return	 * @throws IOException 	 */	public String sinaWeiboLoginNotifySession() throws IOException{		String id = getRequest().getParameter("id");//新浪微博登陆返回的ID		String status = getRequest().getParameter("status");//login/loginout		String nickname = getRequest().getParameter("nickname");//昵称		logger.error("sinaWeiboLoginNotifySession...id="+id+",status="+status+",nickname="+nickname);		if(StringUtils.isBlank(id) || StringUtils.isBlank(status) || StringUtils.isBlank(nickname)){			getResponse().getWriter().write("-1");//非法请求			return null;		}				if(status.equals("login")){//微博登陆成功			logger.error("sinaWeiboLoginNotifySession用户登陆，在本地系统内注册到session中.");						//查询本地数据库，如果没有此用户则创建一个			Account acc = new Account();			acc.setSinaWeiboID(id);			acc = accountService.selectOne(acc);			if(acc==null){				logger.error("查询不到此新浪微博用户。准备创建一个。");				acc = new Account();				acc.setSinaWeiboID(id);				acc.setLoginType(LoginTypeEnum.sinawb);//设置为新浪微博登陆				acc.setAccountType(acc.getLoginType().toString());				accountService.insertOutAccount(acc);				logger.error("创建成功。");			}			acc.setLoginType(LoginTypeEnum.sinawb);//设置为新浪微博登陆			acc.setNickname(nickname);			getSession().setAttribute(FrontContainer.USER_INFO,acc);			logger.error("注册完毕.");		}else{			//微博退出成功			loginout();		}		getResponse().getWriter().write("0");		return null;	}		/**	 * 转到登陆页面	 * @return	 */	public String login() {		this.errorMsg = null;		getSession().setAttribute(FrontContainer.login_errorMsg, errorMsg);		logger.error("toLogin...");		getSession().setAttribute("errorMsg", null);		if (getSession().getAttribute(FrontContainer.USER_INFO) != null) {			return toIndex;		}		return toLogin;	}		/**	 * 转到注册页面	 * @return	 */	public String register() {		logger.error("register...");		if (getSession().getAttribute(FrontContainer.USER_INFO) != null) {			return toIndex;		}		//加载cookie信息		String u=getRequest().getParameter("u");		if(u!=null&&!u.equals("")){		Cookie  cookie = new Cookie("presenter",u);		cookie.setPath(getRequest().getContextPath());		cookie.setMaxAge(365*24*60*60);//生命周期一年		getResponse().addCookie(cookie);		}		return "register";	}		/**	 * 用户登陆	 * 	 * @return	 * @throws IOException 	 */	public String doLogin() throws IOException {		logger.error("doLogin()...");		if (getSession().getAttribute(FrontContainer.USER_INFO) != null) {			return toIndex;		}		errorMsg = "<font color='red'>帐号或密码错误!</font>";		if (e.getAccount() == null || e.getAccount().trim().equals("")				|| e.getPassword() == null || e.getPassword().trim().equals("")){			getSession().setAttribute(FrontContainer.login_errorMsg, errorMsg);			logger.error("doLogin.errorMsg="+errorMsg);			return toLogin;		}				String vcode = getRequest().getParameter("vcode");		if(StringUtils.isNotBlank(vcode)){//验证验证码输入的是否正确			String validateCode = getSession().getAttribute(FrontContainer.validateCode).toString();			if(!validateCode.equalsIgnoreCase(vcode)){				getSession().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>验证码输入错误!</font>");				return toLogin;			}		}else{			getSession().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>请输入验证码!</font>");			return toLogin;		}		//用户验证		e.setPassword(MD5.md5(e.getPassword()));		String account = e.getAccount();		String password = e.getPassword();		e.clear();		e.setAccount(account);		e.setPassword(password);		Account acc = accountService.selectOne(e);		if (acc == null) {			getSession().setAttribute(FrontContainer.login_errorMsg, errorMsg);			return toLogin;		}else if(acc.getFreeze().equals(Account.account_freeze_y)){			if(StringUtils.isBlank(acc.getFreezeStartdate()) && StringUtils.isBlank(acc.getFreezeEnddate())){				getSession().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>此账号已永久冻结!有疑问请联系站点管理员!</font>");			}else{				getSession().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>此账号已暂时冻结!有疑问请联系站点管理员!</font>");			}			return toLogin;		}else if(acc.getEmailIsActive().equals(Account.account_emailIsActive_n)){			//邮箱未激活			errorMsg = "<font color='red'>此账号的邮箱尚未激活，请立即去激活邮箱！</font>";			getSession().setAttribute(FrontContainer.login_errorMsg, errorMsg);			return toLogin;		}		if(acc.getPastDue()==null){			Account a=new Account();    		a.setId(acc.getId());			a.setPresenter(accountService.selectById(KeyValueHelper.get("PTSYZH")).getAccount());	    	a.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));	    	accountService.update(a);	    	acc.setPresenter(a.getPresenter());	    	acc.setPastDue(a.getPastDue());	    			}else{		Cookie[] cookies = getRequest().getCookies();		int isy=0;		 for(Cookie cookie : cookies) {		    if("presenter".equals(cookie.getName())) {		    	isy=1;		    	if(DateUtil.strToDatehhmmss(acc.getPastDue().substring(0,19)).before(new Date())){		    		//查询推荐人用户		    		Account ac2 = accountService.selectById(cookie.getValue());		    		if(!ac2.getId().equals(acc.getId())){		    		//更新当前用户		    		Account a=new Account();		    		a.setId(acc.getId());		    		a.setPresenter(ac2.getAccount());		    		a.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));		    		accountService.update(a);		    		//更新当前用户		    		acc.setPresenter(a.getPresenter());		    		acc.setPastDue(a.getPastDue());		    		}		    	}		    	cookie.setPath(getRequest().getContextPath());		        cookie.setMaxAge(0);//清除cookie,设置生命周期为0		        getResponse().addCookie(cookie);		    }		 }				if(isy==0){			if(DateUtil.strToDatehhmmss(acc.getPastDue().substring(0,19)).before(new Date())){				Account a=new Account();	    		a.setId(acc.getId());				a.setPresenter(accountService.selectById(KeyValueHelper.get("PTSYZH")).getAccount());		    	a.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));		    	accountService.update(a);		    	acc.setPresenter(a.getPresenter());		    	acc.setPastDue(a.getPastDue());			}		}		}		errorMsg = null;		acc.setLoginType(LoginTypeEnum.system);//登陆方式		String picture = acc.getPicture();				getSession().setAttribute("picture", picture);		getSession().setAttribute(FrontContainer.USER_INFO, acc);		//企业信息		Company company=new Company();		company.setCreateAccount(acc.getAccount());		company=companyService.selectOne(company);		//if(company!=null){		getSession().setAttribute(ManageContainer.manage_session_company_info, company);						//更新用户最后登录时间		e.clear();		e.setId(acc.getId());		e.setLastLoginTime("yes");		e.setLastLoginIp(AddressUtils.getIp(getRequest()));		String address = null;		try {			address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");		} catch (Exception e) {			e.printStackTrace();		}		e.setLastLoginArea(address);		accountService.update(e);		e.clear();		String p = getRequest().getParameter("p");		if(p!=null&&p.length()!=0&&!p.equals("null")){			getResponse().sendRedirect(getRequest().getContextPath()+"/product/"+p+".html");		}		if(loginType!=null&&loginType.equals("2")){			return toManage();		}		return toIndex;	}	/**	 * 后台用户登陆	 * 	 * @return	 */	public String doLoginManage() {		logger.error("doLoginManage()...");				errorMsg = "<font color='red'>帐号或密码错误!</font>";		if (e.getAccount() == null || e.getAccount().trim().equals("")				|| e.getPassword() == null || e.getPassword().trim().equals("")){			getRequest().setAttribute(FrontContainer.login_errorMsg, errorMsg);			logger.error("doLogin.errorMsg="+errorMsg);			return "toLoginManage";		}				String vcode = getRequest().getParameter("vcode");		if(StringUtils.isNotBlank(vcode)){//验证验证码输入的是否正确			String validateCode = getSession().getAttribute(FrontContainer.validateCode).toString();			if(!validateCode.equalsIgnoreCase(vcode)){				getRequest().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>验证码输入错误!</font>");				return "toLoginManage";			}		}else{			getRequest().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>请输入验证码!</font>");			return "toLoginManage";		}				//用户验证		e.setPassword(MD5.md5(e.getPassword()));		String account = e.getAccount();		String password = e.getPassword();		e.clear();		e.setAccount(account);		e.setPassword(password);		Account acc = accountService.selectOne(e);		if (acc == null) {			getRequest().setAttribute(FrontContainer.login_errorMsg, errorMsg);			return "toLoginManage";		}else if(acc.getFreeze().equals(Account.account_freeze_y)){			if(StringUtils.isBlank(acc.getFreezeStartdate()) && StringUtils.isBlank(acc.getFreezeEnddate())){				getRequest().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>此账号已永久冻结!有疑问请联系站点管理员!</font>");			}else{				getRequest().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>此账号已暂时冻结!有疑问请联系站点管理员!</font>");			}			return "toLoginManage";		}				if(acc.getPastDue()==null){			Account a=new Account();    		a.setId(acc.getId());			a.setPresenter(accountService.selectById(KeyValueHelper.get("PTSYZH")).getAccount());	    	a.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));	    	accountService.update(a);	    	acc.setPresenter(a.getPresenter());	    	acc.setPastDue(a.getPastDue());	    			}else{		Cookie[] cookies = getRequest().getCookies();		int isy=0;		 for(Cookie cookie : cookies) {		    if("presenter".equals(cookie.getName())) {		    	isy=1;		    	if(DateUtil.strToDatehhmmss(acc.getPastDue().substring(0,19)).before(new Date())){		    		//查询推荐人用户		    		Account ac2 = accountService.selectById(cookie.getValue());		    		if(!ac2.getId().equals(acc.getId())){		    		//更新当前用户		    		Account a=new Account();		    		a.setId(acc.getId());		    		a.setPresenter(ac2.getAccount());		    		a.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));		    		accountService.update(a);		    		//更新当前用户		    		acc.setPresenter(a.getPresenter());		    		acc.setPastDue(a.getPastDue());		    		}		    	}		    	cookie.setPath(getRequest().getContextPath());		        cookie.setMaxAge(0);//清除cookie,设置生命周期为0		        getResponse().addCookie(cookie);		    }		 }				if(isy==0){			if(DateUtil.strToDatehhmmss(acc.getPastDue().substring(0,19)).before(new Date())){				Account a=new Account();	    		a.setId(acc.getId());				a.setPresenter(accountService.selectById(KeyValueHelper.get("PTSYZH")).getAccount());		    	a.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));		    	accountService.update(a);		    	acc.setPresenter(a.getPresenter());		    	acc.setPastDue(a.getPastDue());			}		}		}						errorMsg = null;		acc.setLoginType(LoginTypeEnum.system);//登陆方式		getSession().setAttribute(FrontContainer.USER_INFO, acc);		//企业信息		Company company=new Company();		company.setCreateAccount(acc.getAccount());		company=companyService.selectOne(company);		//if(company!=null){		getSession().setAttribute(ManageContainer.manage_session_company_info, company);				//更新用户最后登录时间		e.clear();		e.setId(acc.getId());		e.setLastLoginTime("yes");		e.setLastLoginIp(AddressUtils.getIp(getRequest()));		String address = null;		try {			address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");		} catch (Exception e) {			e.printStackTrace();		}		e.setLastLoginArea(address);		accountService.update(e);		e.clear();		return toManage();	}	/**	 * 获得客户端真实IP地址	 * @param request	 * @return	 */	public String getIpAddr(HttpServletRequest request) {  	    String ip = request.getHeader("x-forwarded-for");  	    if(ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  	        ip = request.getHeader("Proxy-Client-IP");  	    }  	    if(ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  	        ip = request.getHeader("WL-Proxy-Client-IP");  	    }  	    if(ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  	        ip = request.getRemoteAddr();  	    }  	    return ip;  	}		public String exit() {		loginout();		return "toIndex";	}	/**	 * 用户注销	 * 	 * @return	 */	@SuppressWarnings("unchecked")	public String loginout() {		//清除用户session		Account account = (Account) getSession().getAttribute(				FrontContainer.USER_INFO);		if (account != null) {			account.clear();		}		getSession().setAttribute(FrontContainer.USER_INFO, null);				//清除用户购物车缓存		CartInfo cartInfo = (CartInfo) getSession().getAttribute(FrontContainer.myCart);		if(cartInfo!=null){			cartInfo.clear();		}		getSession().setAttribute(FrontContainer.myCart, null);		getSession().setAttribute(FrontContainer.login_errorMsg, null);		//清除历史浏览记录		LinkedHashMap<String, Product> history_product_map = (LinkedHashMap<String, Product>) getSession().getAttribute(FrontContainer.history_product_map);//		List<String> history_product_map = (List<String>) getSession().getAttribute(FrontContainer.history_product_map);		if(history_product_map!=null){			history_product_map.clear();		}		getSession().setAttribute(FrontContainer.history_product_map,null);		//清除用户后台session		getSession().setAttribute(ManageContainer.manage_session_user_info,null);		getSession().setAttribute(ManageContainer.manage_session_company_info,null);		getSession().setAttribute(ManageContainer.resource_menus,null);		getSession().setAttribute(ManageContainer.user_resource_menus_button,null);				return toLogin;	}		//分页查询店铺收藏	public String favoriteShop() throws Exception{		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		String type = this.getRequest().getParameter("type");		FavoriteShop favoriteShop=new FavoriteShop();		favoriteShop.setAccount(acc.getAccount());		PagerModel commentpager=super.selectPagerModelByServices(favoriteShopService, favoriteShop);		super.pager=commentpager;		if(super.pager!=null && super.pager.getList()!=null && super.pager.getList().size()>0){			List<net.jeeshop.services.common.Company> companyList=favoriteShopService.companyList(favoriteShop);						getRequest().setAttribute("shopSize", companyList.size());			if(companyList!=null && companyList.size()>0){				for(int i=0;i<super.pager.getList().size();i++){					FavoriteShop fs = (FavoriteShop)super.pager.getList().get(i);					for(int j=0;j<companyList.size();j++){						List<net.jeeshop.services.front.product.bean.Product>product = new ArrayList<net.jeeshop.services.front.product.bean.Product>();						net.jeeshop.services.common.Company company = companyList.get(j);						net.jeeshop.services.front.product.bean.Product pro = new Product();						if(fs.getcompanyID().equals(company.getId())){							fs.setCompany(company);							pro.setCompID(company.getId());							pro.setOrderBy(2);							product = productService.search(pro);							fs.setProducts(product);							break;						}					}				}			}		}			    getRequest().setAttribute("favoriteType", type);		selectLeftMenu = FrontContainer.user_leftMenu_favoriteShop;		return "favorite";			}	//删除店铺收藏	public String delFavoriteShop(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}				String pid = getRequest().getParameter("companyID");		FavoriteShop favoriteShop=new FavoriteShop();		favoriteShop.setAccount(acc.getAccount());		favoriteShop.setcompanyID(pid);		List<FavoriteShop> list=favoriteShopService.selectList(favoriteShop);		try{			favoriteShop=list.get(0);			favoriteShopService.delete(favoriteShop);			jsonStr="1";		}catch (Exception e) {			logger.error("deleteOrder..."+e);					}				return toJson;			}	/**	 * 分页查询商品收藏夹	 * @return	 * @throws Exception 	 */	public String favorite() throws Exception{		String type = this.getRequest().getParameter("type");		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		Favorite favorite = new Favorite();		favorite.setAccount(acc.getAccount());		PagerModel commentPager = super.selectPagerModelByServices(favoriteService, favorite);		super.pager = commentPager;//公用分页控件需要这么写。				if(super.pager!=null && super.pager.getList()!=null && super.pager.getList().size()>0){			List<String> productIds = new LinkedList<String>();			for(int i=0;i<super.pager.getList().size();i++){				Favorite ff = (Favorite)super.pager.getList().get(i);				productIds.add(ff.getProductID());			}						//根君商品ID集合加载商品信息：名称、价格、销量、是否上下架等			Product p = new Product();			p.setProductIds(productIds);			List<Product> productList = productService.selectProductListByIds(p);			getRequest().setAttribute("productSize", productList.size());			getRequest().setAttribute("favoriteType", type);			//将查询出来的每一个商品对象挂到收藏夹对象上去			if(productList!=null && productList.size()>0){				for(int i=0;i<super.pager.getList().size();i++){					Favorite ff = (Favorite)super.pager.getList().get(i);					for(int j=0;j<productList.size();j++){						Product product = productList.get(j);						if(ff.getProductID().equals(product.getId())){							ff.setProduct(product);							break;						}					}				}			}		}						selectLeftMenu = FrontContainer.user_leftMenu_favorite;		return "favorite";	}	public String ajaxVerifyNo() throws IOException{		if(StringUtils.isNotBlank(e.getVcode())){//验证验证码输入的是否正确			logger.error("检查验证码输入的是否正确"+e.getVcode());			String validateCode = getSession().getAttribute(FrontContainer.validateCode).toString();			logger.error("validateCode="+validateCode);			getResponse().setCharacterEncoding("utf-8");			if(validateCode.equalsIgnoreCase(e.getVcode())){				getResponse().getWriter().write("{\"ok\":\"验证码输入正确!\"}");			}else{				getResponse().getWriter().write("{\"error\":\"验证码输入有误!\"}");			}		}		return null;	}	/**	 * ajax验证输入的字符的唯一性	 * @return	 * @throws IOException	 */	public String unique() throws IOException{		logger.error("验证输入的字符的唯一性"+e);		logger.error(e.getNickname());		getResponse().setCharacterEncoding("utf-8");		if(StringUtils.isNotBlank(e.getNxbUserName())){//验证绑定支付用户名			Account acc = (Account) getSession().getAttribute(					FrontContainer.USER_INFO);						String pname=e.getNxbUserName();			getResponse().setCharacterEncoding("utf-8");			if(pname.equals(acc.getNxbUserName())){				getResponse().getWriter().write("{\"ok\":\"帐号可以使用!\"}");			}else{				if(accountService.selectCount(e)>0){					getResponse().getWriter().write("{\"error\":\"帐号已经被占用!\"}");				}else{					getResponse().getWriter().write("{\"ok\":\"帐号可以使用!\"}");				}			}					}				if(StringUtils.isNotBlank(e.getNickname())){//验证昵称是否被占用			logger.error("验证昵称是否被占用");			String nickname = e.getNickname();			e.clear();			e.setNickname(nickname);			getResponse().setCharacterEncoding("utf-8");			if(accountService.selectCount(e)>0){				getResponse().getWriter().write("{\"error\":\"昵称已经被占用!\"}");			}else{				getResponse().getWriter().write("{\"ok\":\"昵称可以使用!\"}");			}		}else if(StringUtils.isNotBlank(e.getAccount())){//验证用户名是否被占用			logger.error("验证用户名是否被占用");			String account = e.getAccount();			e.clear();			e.setAccount(account);			getResponse().setCharacterEncoding("utf-8");			if(accountService.selectCount(e)>0){				getResponse().getWriter().write("{\"error\":\"用户名已经被占用!\"}");			}else{				getResponse().getWriter().write("{\"ok\":\"用户名可以使用!\"}");			}		}else if(StringUtils.isNotBlank(e.getEmail())){//验证邮箱是否被占用			logger.error("验证邮箱是否被占用="+e.getEmail());			String email = e.getEmail();			e.clear();			e.setEmail(email);			getResponse().setCharacterEncoding("utf-8");			if(accountService.selectCount(e) > 0){				getResponse().getWriter().write("{\"error\":\"邮箱已经被占用!\"}");			}else{				getResponse().getWriter().write("{\"ok\":\"邮箱可以使用!\"}");			}		}else if(StringUtils.isNotBlank(e.getVcode())){//验证验证码输入的是否正确			logger.error("检查验证码输入的是否正确"+e.getVcode());			String validateCode = getSession().getAttribute(FrontContainer.validateCode).toString();			logger.error("validateCode="+validateCode);			getResponse().setCharacterEncoding("utf-8");			if(validateCode.equalsIgnoreCase(e.getVcode())){				getResponse().getWriter().write("{\"ok\":\"验证码输入正确!\"}");			}else{				getResponse().getWriter().write("{\"error\":\"验证码输入有误!\"}");			}//			vcode = null;		}else if(StringUtils.isNotBlank(e.getPassword())){//验证原始密码输入是否正确			logger.error("验证原始密码输入是否正确"+e.getPassword());			Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);			getResponse().setCharacterEncoding("utf-8");			if(StringUtils.isNotBlank(e.getPassword()) && MD5.md5(e.getPassword()).equals(acc.getPassword())){				getResponse().getWriter().write("{\"ok\":\"原密码输入正确!\"}");			}else{				getResponse().getWriter().write("{\"error\":\"原密码输入有误!\"}");			}		}else if(StringUtils.isNotBlank(e.getCardNO())){//验证身份证号			logger.error("身份证号是否被占用");			Account account = (Account) getSession().getAttribute(					FrontContainer.USER_INFO);			String cno = e.getCardNO();			getResponse().setCharacterEncoding("utf-8");			if(account!=null&&cno.equals(account.getCardNO())){				getResponse().getWriter().write("{\"ok\":\"身份证号可以使用!\"}");			}else{			e.clear();			e.setCardNO(cno);						if(accountService.selectCount(e)>0){				getResponse().getWriter().write("{\"error\":\"身份证号已经被占用!\"}");			}else{				getResponse().getWriter().write("{\"ok\":\"身份证号可以使用!\"}");			}			}		}				if(e!=null){			e.clear();		}		return null;	}	/**	 * ajax验证手机验证码	 * 2016.01.30	 * @return	 * @throws IOException	 */	public String checkCode() throws IOException{		if(StringUtils.isNotBlank(e.getVcode())){//验证验证码输入的是否正确			logger.error("检查手机验证码输入的是否正确"+e.getVcode());			String validateCode = getSession().getAttribute(FrontContainer.validateMobileCode).toString();			logger.error("validateCode="+validateCode);			getResponse().setCharacterEncoding("utf-8");			if(validateCode.equalsIgnoreCase(e.getVcode())){				getResponse().getWriter().write("{\"ok\":\"验证码输入正确!\"}");			}else{				getResponse().getWriter().write("{\"error\":\"验证码输入有误!\"}");			}		}		if(e!=null){			e.clear();		}		return null;	}	/**	 * ajax验证输入的推荐人知否存在	 * @return	 * @throws IOException	 */	public String exists() throws IOException{		getResponse().setCharacterEncoding("utf-8");		String presenter = getRequest().getParameter("presenter");		Account acc = (Account) getSession().getAttribute(				FrontContainer.USER_INFO);						if(StringUtils.isNotBlank(presenter)){			if(acc.getAccount().equals("presenter")){				getResponse().getWriter().write("{\"error\":\"不能输入您自己的用户名!\"}");			}else{			e.clear();			e.setAccount(presenter);			getResponse().setCharacterEncoding("utf-8");			if(accountService.selectCount(e)>0){				getResponse().getWriter().write("{\"ok\":\"用户名可以使用!\"}");			}else{				getResponse().getWriter().write("{\"error\":\"用户名不存在!\"}");			}			}					}							return null;	}		/**	 * 查看个人信息	 * @return	 */	public String user(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		selectLeftMenu = "user";		e = accountService.selectById(acc.getId());		String picture = e.getPicture();				getSession().setAttribute("picture", picture);		String email = e.getEmail();		String province = e.getProvince();		String city = e.getCity();		String area = e.getArea();		StringBuilder pcadetail = new StringBuilder();		if(province!=null && province!=""){		Area sheng = SystemManager.areaMap.get(province);//省		pcadetail.append(sheng.getName());				for(int i=0;i<sheng.getChildren().size();i++){			Area shi = sheng.getChildren().get(i);//市			if(shi.getCode().equals(city)){								pcadetail.append(" ").append(shi.getName());								for(int j = 0;j<shi.getChildren().size();j++){					Area qu = shi.getChildren().get(j);//区					if(qu.getCode().equals(area)){						pcadetail.append(" ").append(qu.getName());						break;					}				}								break;			}		}		}		setSelectMenu(FrontContainer.not_select_menu);//设置主菜单为不选中		Order e = new Order();		e.setAccount(acc.getAccount());		e.setStatus(net.jeeshop.services.common.Order.order_status_init);		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_n);		int f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dfkcount", f);//待付款		e = new Order();		e.setAccount(acc.getAccount());		e.setStatus(net.jeeshop.services.common.Order.order_status_pass);		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dfahcount", f);//待发货		e = new Order();		e.setAccount(acc.getAccount());		e.setStatus(net.jeeshop.services.common.Order.order_status_send);		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dshcount", f);//待收货				e = new Order();		e.setAccount(acc.getAccount());		e.setClosedComment("n");		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dpjcount", f);//待评价//		getSession().setAttribute(FrontContainer.WEB_USER_INFO,e);		this.getRequest().setAttribute("email", email);		this.getRequest().setAttribute("pcadetail", pcadetail);				//查询最后一次订单						//查询未读信件的数量//		Letters letter = new Letters();//		letter.setAccount(acc.getAccount());//		int notReadLetters = lettersService.getCount(letter);//		logger.error("notReadLetters="+notReadLetters);//		acc.setNotReadLetters(notReadLetters);				return "user";	}		public String infoEdit(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		selectLeftMenu = "user";		e = accountService.selectById(acc.getId());		String email = e.getEmail();		this.getRequest().setAttribute("email", email);		return "userinfo";	}		/**	 * 转到绑定农信宝页面	 * @return	 */	public String toNxbSet(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		setSelectMenu(FrontContainer.not_select_menu);//设置主菜单为不选中		selectLeftMenu = "user";		return "nxbSet";	}	/**	 * 转到绑定农信宝页面	 * @return	 */	public String nxbSet(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}				if(e.getNxbUserName().equals(acc.getNxbUserName())){			e.setId(acc.getId());			e.setNxbPassword(DigestUtils.md5Hex(e.getNxbPassword()));			accountService.update(e);			setSelectMenu(FrontContainer.not_select_menu);//设置主菜单为不选中			selectLeftMenu = "user";			e = accountService.selectById(acc.getId());			getSession().setAttribute(FrontContainer.USER_INFO, e);						User u = new User();			u.setId(acc.getId());			u=userService.selectOne(u);			getSession().setAttribute(ManageContainer.manage_session_user_info, u);						getRequest().setAttribute("message", "绑定农信宝账号成功!");		}else{			Account ac=new Account();			ac.setNxbUserName(e.getNxbUserName());			if(accountService.selectCount(ac)>0){				getRequest().setAttribute("message", "账号已被占用!");				return user();			}else{				e.setId(acc.getId());				e.setNxbPassword(DigestUtils.md5Hex(e.getNxbPassword()));				accountService.update(e);				setSelectMenu(FrontContainer.not_select_menu);//设置主菜单为不选中				selectLeftMenu = "user";				e = accountService.selectById(acc.getId());				getSession().setAttribute(FrontContainer.USER_INFO, e);								User u = new User();				u.setId(acc.getId());				u=userService.selectOne(u);				getSession().setAttribute(ManageContainer.manage_session_user_info, u);								getRequest().setAttribute("message", "绑定农信宝账号成功!");			}		}				return "user";	}		/**	 * 修改个人信息	 * @return	 */	public String saveSetting(){		logger.error("saveSetting.....");//		logger.error("sex="+sex);		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		logger.error(e);		//		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);//		acc.setSign(e.getSign());//		acc.setMyself(e.getMyself());//		acc.setSex(e.getSex());		accountService.update(e);		getRequest().setAttribute("email", e.getEmail());		getRequest().setAttribute("message", "修改成功!");		e.clear();//		return "saveSetting";		return user();	}		@SuppressWarnings("unused")	private boolean requireLogin() throws NullPointerException{		Account account = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (account == null || StringUtils.isBlank(account.getAccount())) {			return true;		}		return false;	}		/**	 * 配送地址管理	 * @return	 */	public String address(){		Account account = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (account == null || StringUtils.isBlank(account.getAccount())) {			return toLogin;		}		selectLeftMenu = "address";		address.setAccount(account.getAccount());		addressList = addressService.selectList(address);		return "address";	}		/**	 * 增加配送地址	 * @return	 * 	 * 2015.11.18 修改return	 * @author 靳友斌	 */	public String saveAddress(){		System.out.println("into the saveAddress。。。。。。。");		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		selectLeftMenu = "address";				//需要将省市区的代号换成中文，插入到pcadetail字段里面去，显示的时候方便。		StringBuilder pcadetail = new StringBuilder();		Area sheng = SystemManager.areaMap.get(address.getProvince());//省		pcadetail.append(sheng.getName());				for(int i=0;i<sheng.getChildren().size();i++){			Area shi = sheng.getChildren().get(i);//市			if(shi.getCode().equals(address.getCity())){								pcadetail.append(" ").append(shi.getName());								for(int j = 0;j<shi.getChildren().size();j++){					Area qu = shi.getChildren().get(j);//区					if(qu.getCode().equals(address.getArea())){						pcadetail.append(" ").append(qu.getName());						break;					}				}								break;			}		}				address.setPcadetail(pcadetail.toString());				address.setAccount(acc.getAccount());				String isdefault=getRequest().getParameter("isdefault");				if(StringUtils.isBlank(address.getId())){			int resultid=addressService.insert(address);						if(isdefault.equals("y")){								address.setId(String.valueOf(resultid));				address.setIsdefault("y");				address.setAccount(acc.getAccount());				addressService.setAddressDefault(address);			}		}else{			addressService.update(address);		}		address.clear();		return address();		/*String type=getRequest().getParameter("type");		if (StringUtils.isNotBlank(type)) {			return type;		}else{			return address();		}*/	}		/**	 * 删除指定的配送地址	 * @return	 * 2015.11.18 修改return	 * @author 靳友斌	 */	public String deleteAddress(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		selectLeftMenu = "address";		String id = getRequest().getParameter("id");		if(StringUtils.isBlank(id)){			throw new NullPointerException("id is null!");		}		Address add = new Address();		add.setId(id);		addressService.delete(add);				String type=getRequest().getParameter("type");		if (StringUtils.isNotBlank(type)) {			return type;		}else{			return address();		}	}	/**	 * 编辑指定的配送地址	 * @return	 */	public String editAddress(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		selectLeftMenu = "address";		String id = getRequest().getParameter("id");		if(StringUtils.isBlank(id)){			throw new NullPointerException("id is null!");		}		address = addressService.selectById(id);				//获取区域列表		if(StringUtils.isNotBlank(address.getArea())){//			address.getArea()			Area area = SystemManager.areaMap.get(address.getProvince());			if(area!=null && area.getChildren()!=null && area.getChildren().size()>0){				for(int i=0;i<area.getChildren().size();i++){					Area city = area.getChildren().get(i);					if(city.getCode().equals(address.getCity())){												logger.error("address.getCity()="+address.getCity());						logger.error(city.toString());						address.setAreaList(city.getChildren());						break;					}				}			}		}				return address();	}	/**	 * 订单提交时	 * 编辑指定的配送地址	 * @return	 * 2015.11.18 修改return	 * @author 靳友斌	 */	public String ajaxEditAddress(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		selectLeftMenu = "address";		String id = getRequest().getParameter("id");		if(StringUtils.isBlank(id)){			throw new NullPointerException("id is null!");		}		address = addressService.selectById(id);				//获取区域列表		if(StringUtils.isNotBlank(address.getArea())){//			address.getArea()			Area area = SystemManager.areaMap.get(address.getProvince());			if(area!=null && area.getChildren()!=null && area.getChildren().size()>0){				for(int i=0;i<area.getChildren().size();i++){					Area city = area.getChildren().get(i);					if(city.getCode().equals(address.getCity())){												logger.error("address.getCity()="+address.getCity());						logger.error(city.toString());						address.setAreaList(city.getChildren());						break;					}				}			}		}		//return address();		Map<String,Object> map=new HashMap<String,Object>();		map.put("success", "success");		jsonStr=JSONObject.fromObject(map).toString();				return toJson;	}	public String coupons(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		int offset = 0;		if (getRequest().getParameter("pager.offset") != null) {			offset = Integer					.parseInt(getRequest().getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;		selectLeftMenu = "coupons";//		PagerModel pm = new PagerModel();		Coupon cou=new Coupon();		cou.setOwnerID(acc.getId());		cou.setOwnerType(net.jeeshop.services.common.Coupon.ownerType_user);		((PagerModel)cou).setOffset(offset);		pager = couponService.selectPageList(cou);		if(pager==null)pager = new PagerModel();		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		for (Coupon c2 : (List<Coupon>)pager.getList()) {			if(c2.getEndTime()!=null&&DateUtil.strToDatehhmmss(c2.getEndTime().substring(0, c2.getEndTime().length()-2)).before(new Date())){				c2.setStatus(net.jeeshop.services.common.Coupon.status_n);				c2.setRemark("已过期");				couponService.update(c2);			}		}//		selectListAfter();		pager.setPagerUrl("coupons.html");		return "coupons";	}		/**	 * 我的订单列表	 * @return	 * @throws Exception 	 */	public String orders() throws Exception{		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}//		getSession().setAttribute(FrontContainer.selectMenu,FrontContainer.not_select_menu);		selectLeftMenu = "orders";		String cursel1 = this.getRequest().getParameter("flag");		 int cursel = 1;		if(cursel1!=null && cursel1!=""){		cursel = Integer.parseInt(cursel1);		}		getRequest().setAttribute("cursel", cursel1);		String url = this.getRequest().getParameter("url");		Order e = new Order();		e.setAccount(acc.getAccount());		e.setStatus(net.jeeshop.services.common.Order.order_status_init);		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_n);		int f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dfkcount", f);//待付款		e = new Order();		e.setAccount(acc.getAccount());		e.setStatus(net.jeeshop.services.common.Order.order_status_pass);		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dfahcount", f);//待发货		e = new Order();		e.setAccount(acc.getAccount());		e.setStatus(net.jeeshop.services.common.Order.order_status_send);		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dshcount", f);//待收货				e = new Order();		e.setAccount(acc.getAccount());		e.setClosedComment("n");		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dpjcount", f);//待评价		getMyOrders(acc.getAccount(),cursel);				//查询汇总		orderSimpleReport = orderService.selectOrdersSimpleReport(acc.getAccount());		logger.error("orderSimpleReport="+orderSimpleReport);		if(StringUtils.isNotBlank(url)){			this.getResponse().sendRedirect(url);			return  null;		}		return "orders";	}		/**	 * 订单查询	 * @return	 * @throws Exception	 */	@SuppressWarnings("unchecked")	public String selectOrders() throws Exception{		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}//		getSession().setAttribute(FrontContainer.selectMenu,FrontContainer.not_select_menu);		Order order = new Order();		order.setAccount(acc.getAccount());		String cName = this.getRequest().getParameter("e.compName");		String sDate = this.getRequest().getParameter("e.startDate");		String eDate = this.getRequest().getParameter("e.endDate");		String status = this.getRequest().getParameter("e.status");		String pstatus = this.getRequest().getParameter("e.paystatus");		getSession().setAttribute("startDate", sDate);		getSession().setAttribute("compName", cName);		getSession().setAttribute("endDate", eDate);		getSession().setAttribute("status", status);		getSession().setAttribute("pstatus", pstatus);		getRequest().setAttribute("paystatus", pstatus);		if(sDate!=""){		order.setStartDate(sDate);		}		if(eDate!=""){		order.setEndDate(eDate);		}		if(status!=""){		order.setStatus(status);		}		if(cName!=""){		order.setCompName(cName);		}		if(pstatus!=""){		order.setPaystatus(pstatus);		}		int cursel = 1;		int offset = 0;		if (getRequest().getParameter("pager.offset") != null) {			offset = Integer					.parseInt(getRequest().getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;		Order e= new Order();		e.setAccount(acc.getAccount());		e.setStatus(net.jeeshop.services.common.Order.order_status_init);		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_n);		int f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dfkcount", f);//待付款		e = new Order();		e.setAccount(acc.getAccount());		e.setStatus(net.jeeshop.services.common.Order.order_status_pass);		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dfahcount", f);//待发货		e = new Order();		e.setAccount(acc.getAccount());		e.setStatus(net.jeeshop.services.common.Order.order_status_send);		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dshcount", f);//待收货				e = new Order();		e.setAccount(acc.getAccount());		e.setClosedComment("n");		e.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dpjcount", f);//待评价		//		PagerModel pm = new PagerModel();		/*Order order = new Order();		order.setAccount(account);*/	/*	if(cursel==2){			order.setStatus(Order.order_status_init);			order.setPaystatus(Order.order_paystatus_n);		}		if(cursel==3){			order.setStatus(Order.order_status_pass);			order.setPaystatus(Order.order_paystatus_y);		}		if(cursel==4){			order.setStatus(Order.order_status_send);			order.setPaystatus(Order.order_paystatus_y);		}		if(cursel==5){			order.setClosedComment("n");			order.setPaystatus(Order.order_paystatus_y);		}		*/		((PagerModel)order).setOffset(offset);		pager = orderService.selectPageList(order);				if(pager==null)pager = new PagerModel();		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		//		selectListAfter();		pager.setPagerUrl("selectOrders.html");		//根据上面查询出来的ID集合，多表联合查询出订单和订单明细数据		List<Order> ordersTemp = getPager().getList();		List<String> ids = new LinkedList<String>();		for(int i=0;i<ordersTemp.size();i++){			Order orderItem = ordersTemp.get(i);			orderItem.setCreatedate(orderItem.getCreatedate().substring(0,16));			ids.add(orderItem.getId());		}				Orderdetail od= new Orderdetail();		od.setQueryOrderIDs(ids);		List<Orderdetail> list = orderdetailService.selectList(od);		for (Order o : ordersTemp) {			o.setOrderdetail(new ArrayList<Orderdetail>());			for (Orderdetail ode : list) {				if(o.getId().equals(ode.getOrderID()+"")){					o.getOrderdetail().add(ode);				}			}		}		System.out.println(list.size());						//查询汇总		orderSimpleReport = orderService.selectOrdersSimpleReport(acc.getAccount());		logger.error("orderSimpleReport="+orderSimpleReport);		/*if(StringUtils.isNotBlank(url)){			this.getResponse().sendRedirect(url);			return  null;		}*/		return "orders";	}		/**	 * 分页查询订单集合	 * @return	 * @throws Exception	 */	private void selectMyOrders(String account,int cursel) throws Exception {		int offset = 0;		if (getRequest().getParameter("pager.offset") != null) {			offset = Integer					.parseInt(getRequest().getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;				/*e.setAccount(acc.getAccount());		e.setStatus(Order.order_status_init);		e.setPaystatus(Order.order_paystatus_n);		int f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dfkcount", f);//待付款		e = new Order();		e.setAccount(acc.getAccount());		e.setStatus(Order.order_status_pass);		e.setPaystatus(Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dfahcount", f);//待发货		e = new Order();		e.setAccount(acc.getAccount());		e.setStatus(Order.order_status_send);		e.setPaystatus(Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dshcount", f);//待收货				e = new Order();		e.setAccount(acc.getAccount());		e.setClosedComment("n");		e.setPaystatus(Order.order_paystatus_y);		f = this.orderService.selectCount(e);		this.getRequest().setAttribute("dpjcount", f);//待评价*/		//		PagerModel pm = new PagerModel();		Order order = new Order();		order.setAccount(account);		if(cursel==2){			order.setStatus(net.jeeshop.services.common.Order.order_status_init);			order.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_n);		}		if(cursel==3){			order.setStatus(net.jeeshop.services.common.Order.order_status_pass);			order.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		}		if(cursel==4){			order.setStatus(net.jeeshop.services.common.Order.order_status_send);			order.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		}		if(cursel==5){			order.setClosedComment("n");			order.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);		}				((PagerModel)order).setOffset(offset);		pager = orderService.selectPageList(order);				if(pager==null)pager = new PagerModel();		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		//		selectListAfter();		pager.setPagerUrl("orders.html");	}	/**	 * 分页获取我的订单列表，首页分页查询订单集合，然后把查询到的ID集合仍到一个多表联合的查询里面，查询出更多的信息。分页显示用户的订单只用一个SQL貌似不好搞的。想到好办法再去优化。	 * @throws Exception	 */	@SuppressWarnings("unchecked")	private void getMyOrders(String account,int cursel) throws Exception {		//分页查询订单ID集合//		super.selectList();		//1、分页查询订单集合		selectMyOrders(account,cursel);		//根据上面查询出来的ID集合，多表联合查询出订单和订单明细数据		List<Order> ordersTemp = getPager().getList();		List<String> ids = new LinkedList<String>();		for(int i=0;i<ordersTemp.size();i++){			Order orderItem = ordersTemp.get(i);			orderItem.setCreatedate(orderItem.getCreatedate().substring(0,16));			ids.add(orderItem.getId());		}				Orderdetail od= new Orderdetail();		od.setQueryOrderIDs(ids);		List<Orderdetail> list = orderdetailService.selectList(od);		for (Order o : ordersTemp) {			o.setOrderdetail(new ArrayList<Orderdetail>());			for (Orderdetail ode : list) {				if(o.getId().equals(ode.getOrderID()+"")){					o.getOrderdetail().add(ode);				}			}		}		System.out.println(list.size());//		Order order = new Order();//		order.clear();//		order.setAccount(account);//		order.setQueryOrderIDs(ids);//		//2、查询指定订单集合的所有订单项集合，然后内存中对订单项进行分组//		List<Order> myOrders = orderService.selectList(order);//		if(myOrders!=null && myOrders.size()>0){//			for(int i=0;i<ordersTemp.size();i++){//				Order orderItem = ordersTemp.get(i);//				for(Iterator<Order> it = myOrders.iterator();it.hasNext();){//					Order orderdetail = it.next();////					logger.error("orderdetail.getId()="+orderdetail.getId());////					logger.error("orderItem.getId()="+orderItem.getId());//					if(orderdetail.getId().equals(orderItem.getId())){//						orderItem.getOrders().add(orderdetail);//						it.remove();//					}//				}//			}//		}		//		Map<String, Order> orderMap = new HashMap<String, Order>();		//处理成页面显示的数据格式//		if(myOrders!=null && myOrders.size()>0){//			orderMap.clear();//			for(int i=0;i<myOrders.size();i++){//				order = myOrders.get(i);//				Order entry = orderMap.get(order.getId());//				if(entry==null){//					//添加订单//					orderMap.put(order.getId(), order);//					//添加订单项//					order.getOrders().add(order);//					continue;//				}//				//				//否则添加订单到此MAP订单的orders集合中，此集合存储的是订单明细信息//				entry.getOrders().add(order);//			}//			myOrders.clear();//			myOrders.addAll(orderMap.values());//			orderMap.clear();////			//根据订单ID排序//			Collections.sort(myOrders, new Comparator<Order>() {//				@Override//				public int compare(Order o1, Order o2) {//					int id1 = Integer.valueOf(o1.getId());//					int id2 = Integer.valueOf(o2.getId());//					if (id1 > id2) {//						return 1;//					} else if (id1 < id2) {//						return 2;//					}//					return 0;//				}//			});//			getPager().setList(myOrders);//		}//		getSession().setAttribute(FrontContainer.selectMenu, "user_centers");	}		/**	 * 转到修改密码	 * @return	 */	public String topwd(){		if (getSession().getAttribute(FrontContainer.USER_INFO) == null) {			return toIndex;		}		this.errorMsg = null;		selectLeftMenu = "topwd";		e.clear();		return "topwd";	}		/**	 * 修改密码	 * @return	 */	public String changePwd(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		if (StringUtils.isBlank(e.getNewPassword())				|| StringUtils.isBlank(e.getNewPassword2())				|| StringUtils.isBlank(e.getPassword()) 				|| !e.getNewPassword2().equals(e.getNewPassword())) {			throw new NullPointerException();		}		getSession().setAttribute(FrontContainer.selectMenu,FrontContainer.not_select_menu);//		selectLeftMenu = "changePwd";		selectLeftMenu = "topwd";//		logger.error(">>e.getNewPassword() = "+e.getNewPassword());		e.setPassword(MD5.md5(e.getNewPassword()));		e.setId(acc.getId());//		logger.error(">>e.getPassword() = "+e.getPassword());		accountService.update(e);		this.errorMsg = "修改密码成功！";		//重新缓存密码数据		acc.setPassword(e.getPassword());				e.clear();		return "toIndex";	}	//	private void setSelectMenu(String selectID){//		getSession().setAttribute(FrontContainer.selectMenu, selectID);//	}		//	/**//	 * 帮助中心//	 * @return//	 *///	public String help() throws Exception {//		logger.error("this.helpCode="+this.helpCode);//		if(StringUtils.isBlank(this.helpCode)){//			throw new NullPointerException("helpCode参数不能为空");//		}else if(this.helpCode.equals("index")){//			return "help";//		}else{//			News newsParam = new News();//			newsParam.setCode(helpCode);//			news = newsService.selectSimpleOne(newsParam);//			if(news==null){//				throw new NullPointerException("根据code查询不到文章！");//			}//			//			String url = "/jsp/helps/"+news.getId()+".jsp";//			logger.error("url = " + url);//			getRequest().setAttribute("newsInfoUrl",url);//			//			return "help";//			////			logger.error("SystemManager.newsMap="+SystemManager.newsMap);////			news = SystemManager.newsMap.get(this.helpCode);//newsService.selectById(String.valueOf(helpID));////			if(news==null){////				throw new NullPointerException("根据code查询不到文章！");////			}//		}////		return "help";//	}		/**	 * 设置选中的	 * @return	 *  2015.11.15 修改return	 *  @author 靳友斌	 */	public String setAddressDefault() throws Exception{		address.clear();				String id = getRequest().getParameter("id");		if(StringUtils.isBlank(id)){			throw new NullPointerException("默认地址ID不能为空！");		}		Account account = (Account)getRequest().getSession().getAttribute(FrontContainer.USER_INFO);		if(account==null || StringUtils.isBlank(account.getAccount())){			throw new NullPointerException("账号不能为空！");		}				address.setId(id);		address.setIsdefault("y");		address.setAccount(account.getAccount());		addressService.setAddressDefault(address);						Map<String,Object> map=new HashMap<String,Object>();		map.put("success", "修改默认地址成功！");		jsonStr=JSONObject.fromObject(map).toString();		/*if(jsonStr!=null){		getResponse().sendRedirect(getRequest().getContextPath()+"/user/userAddress.jsp");		}*/				return toJson;			}		/**	 * 根据省份编码获取城市列表	 * @return	 * @throws IOException 	 */	public String selectCitysByProvinceCode() throws IOException{		logger.error("selectCitysByProvinceCode...");		String provinceCode = getRequest().getParameter("provinceCode");		logger.error("selectCitysByProvinceCode...provinceCode="+provinceCode);		if(StringUtils.isBlank(provinceCode)){			throw new NullPointerException("provinceCode is null");		}		//		Area area = new Area();//		area.setCode(provinceCode);		if(SystemManager.areaMap!=null && SystemManager.areaMap.size()>0){			Area areaInfo = SystemManager.areaMap.get(provinceCode);									if(areaInfo!=null && areaInfo.getChildren()!=null && areaInfo.getChildren().size()>0){				String jsonStr = JSON.toJSONString(areaInfo.getChildren());				logger.error("jsonStr="+jsonStr);				super.utf8JSON();				getResponse().getWriter().write(jsonStr);				return null;			}		}				getResponse().getWriter().write("{}");		return null;	}	/**	 * 根据城市编码获取区域列表	 * @return	 * @throws IOException 	 */	public String selectAreaListByCityCode() throws IOException{		logger.error("selectAreaListByCityCode...");		String provinceCode = getRequest().getParameter("provinceCode");		String cityCode = getRequest().getParameter("cityCode");		logger.error("selectAreaListByCityCode...provinceCode="+provinceCode+",cityCode="+cityCode);		if(StringUtils.isBlank(provinceCode) || StringUtils.isBlank(cityCode)){			throw new NullPointerException("provinceCode or cityCode is null");		}				if(SystemManager.areaMap!=null && SystemManager.areaMap.size()>0){			Area city = SystemManager.areaMap.get(provinceCode);						logger.error("areaInfo = " + city);						if(city!=null && city.getChildren()!=null && city.getChildren().size()>0){				for(int i=0;i<city.getChildren().size();i++){					Area item = city.getChildren().get(i);					if(item.getCode().equals(cityCode)){						if(item.getChildren()!=null && item.getChildren().size()>0){							String jsonStr = JSON.toJSONString(item.getChildren());							logger.error("jsonStr="+jsonStr);							super.utf8JSON();							getResponse().getWriter().write(jsonStr);							return null;						}					}				}			}		}				getResponse().getWriter().write("{}");		return null;	}		public String alipayFastLogin() throws Exception{		if(true){			return "alipayFastLogin";		}		////////////////////////////////////请求参数//////////////////////////////////////				//目标服务地址		String target_service = extracted();		//必填		//必填，页面跳转同步通知页面路径		String return_url = SystemManager.systemSetting.getWww()+"/alipayapi_fastLogin_return_url.jsp";		//需http://格式的完整路径，不允许加?id=123这类自定义参数				//防钓鱼时间戳		String anti_phishing_key = "";		//若要使用请调用类文件submit中的query_timestamp函数				//客户端的IP地址		String exter_invoke_ip = "";		//非局域网的外网IP地址，如：221.0.0.1						//////////////////////////////////////////////////////////////////////////////////				//把请求参数打包成数组		Map<String, String> sParaTemp = new HashMap<String, String>();		sParaTemp.put("service", "alipay.auth.authorize");		sParaTemp.put("partner", AlipayConfig.partner);		sParaTemp.put("_input_charset", AlipayConfig.input_charset);		sParaTemp.put("target_service", target_service);		sParaTemp.put("return_url", return_url);		sParaTemp.put("anti_phishing_key", anti_phishing_key);		sParaTemp.put("exter_invoke_ip", exter_invoke_ip);				//建立请求		String sHtmlText = AlipaySubmit.buildRequest(sParaTemp,"get","确认");//		getResponse().getOutputStream().println(sHtmlText);//		getResponse().getWriter().println(sHtmlText);		System.out.println("sHtmlText="+sHtmlText);//		return "alipayFastLogin";		return null;	}	private String extracted() {		String target_service = "user.auth.quick.login";		return target_service;	}	/**	 * 用户使用手机重置密码	 * @return	 */	public String resetByM(){		 //checkSendEmail();		String mobile = e.getMobile();		String vcode = e.getVcode();		String yzmS = getSession().getAttribute(FrontContainer.validateMobileCode).toString();		String phoneS = getSession().getAttribute(FrontContainer.validateMobile).toString();				if(StringUtils.isBlank(mobile)||StringUtils.isBlank(vcode)||!mobile.equals(phoneS)||!e.getVcode().equals(yzmS)){			throw new NullPointerException("非法请求！"); 		}		return "reset";	}	/**	 * 用户使用邮件重置密码	 * @return	 */	public String reset(){		checkSendEmail();		String uuid = UUID.randomUUID().toString();		getSession().setAttribute(FrontContainer.validateMobileCode,uuid);		e.setVcode(uuid);		return "reset";	}		/**	 * 系统发出邮件后，用户访问邮件中的URL地址，此方法检查该地址的有效性和时间的有效性	 */	@SuppressWarnings("static-access")	private Email checkSendEmail(){		String sign = getRequest().getParameter("sign");		if(StringUtils.isBlank(sign)){			throw new NullPointerException("参数非法!");		}				//查询邮件是否是本系统所发出的		Email email = new Email();		email.setSign(sign);		email = emailService.selectOne(email);		if(email==null){			throw new NullPointerException("非法请求！");		}				if(email.getStatus().equals(email.email_status_y)){			getRequest().setAttribute(FrontContainer.reset_password_email_timeout, "当前连接已失效！");			return null;		}		//		String email_id = email.getId();				e.setAccount(email.getAccount());		//检查此邮件是否过期		long time1 = Long.valueOf(email.getStarttime());		long time2 = new Date().getTime();		long time3 = Long.valueOf(email.getEndtime());		if (time2 > time1 && time2 < time3) {			//更新邮件状态为已失效			Email email2 = new Email();			email2.setStatus(email.email_status_y);			email2.setId(email.getId());			emailService.update(email2);						//允许修改密码			return email;		}else{			logger.error("邮件已过期！");			getRequest().setAttribute(FrontContainer.reset_password_email_timeout, "当前连接已失效！");		}		return null;	}		/**	 * 通过邮件重置密码	 * @return	 * @throws IOException 	 */	public String doReset() throws IOException{		logger.error("doReset...");		if(StringUtils.isBlank(e.getAccount()) || StringUtils.isBlank(e.getPassword()) || StringUtils.isBlank(e.getPassword2())){			throw new NullPointerException("请求非法！");		}		String vcode = e.getVcode();		String yzmS = getSession().getAttribute(FrontContainer.validateMobileCode).toString();				if(!vcode.equals(yzmS)){			throw new NullPointerException("非法请求！"); 		}				if(!e.getPassword().equals(e.getPassword2())){//			getRequest().setAttribute(FrontContainer.show_user_option_error, "两次输入的密码不一致！");			throw new RuntimeException("两次输入的密码不一致！");		}		logger.error("doReset...e.getPassword() = "+e.getPassword());		Account acc = new Account();		acc.setAccount(e.getAccount());		acc.setPassword(MD5.md5(e.getPassword()));		accountService.updatePasswordByAccount(acc);		getResponse().sendRedirect(getRequest().getContextPath()+"/user/resetSuccess.html");		return null;//		return "resetSuccess";	}		public String resetSuccess(){				return "resetSuccess";	}		/**	 * 转到修改邮箱页面	 * @return	 */	public String changeEmail(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLoginRedirect;		}		return "toChangeEmail";	}	/**	 * 转到修改手机页面	 * @return	 */	public String changeMobile(){		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLoginRedirect;		}		return "changeMobile";	}		/**	 * 修改邮箱	 * @return	 * @throws Exception 	 */	public String doChangeEmail() throws Exception{		logger.error("e.getNewEmail() = "+e.getNewEmail());		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}				logger.error("doChangeEmail..");		if(!TokenUtil.getInstance().isTokenValid(getRequest())){			throw new Exception("表单重复提交了！");		}				if(StringUtils.isBlank(e.getPassword()) || StringUtils.isBlank(e.getNewEmail())){			throw new NullPointerException("非法请求！");		}		//		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if(!MD5.md5(e.getPassword()).equals(acc.getPassword())){			//前台AJAX检查密码出问题了，后台来处理前端的不足			throw new RuntimeException("出现错误，请联系系统管理员！");		}				//发送邮件到指定邮箱。		acc.setNewEmail(e.getNewEmail());		accountService.sendEmail(acc,net.jeeshop.services.common.NotifyTemplate.email_change_email);		acc.setNewEmail(null);		return "changeEamilWait";	}	/**	 * 跳转到第二步，填写新手机号码	 * @return	 * @throws Exception 	 */	public String toChangeMobile2() throws Exception{		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		return "changeMobile2";	}	/**	 * 第三步，修改手机号码	 * @return	 * @throws Exception 	 */	public String doChangeMonbile() throws Exception{		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if(acc==null){			return toLogin;		}		String mobile = e.getMobile();		String vcode = e.getVcode();				String yzmS = getSession().getAttribute(FrontContainer.validateMobileCode).toString();		String phoneS = getSession().getAttribute(FrontContainer.validateMobile).toString();				if(StringUtils.isBlank(mobile)||StringUtils.isBlank(vcode)||!mobile.equals(phoneS)){			throw new NullPointerException("非法请求！"); 		}		if(!vcode.equals(yzmS)){			getRequest().setAttribute("message", "验证码输入错误！");			return "changeMobile2";		}				e.setId(acc.getId());		accountService.update(e);				acc.setMobile(e.getMobile());		 getSession().setAttribute(FrontContainer.USER_INFO, acc);		 getRequest().setAttribute("url", getRequest().getContextPath()+"/user/user.html");		 getRequest().setAttribute("message", "修改手机号码成功！");		return user();	}		public String changeEamilWait(){		logger.error("changeEamilWait..");		return "toChangeEamilWait";	}		/**	 * 修改邮箱--->用户登陆邮箱后点击邮件---->激活邮箱---->调用此方法	 * @return	 */	@SuppressWarnings("static-access")	public String active(){		logger.error("active...");		selectLeftMenu = "user";				String sign = getRequest().getParameter("sign"); //		String type = getRequest().getParameter("type"); 		if(StringUtils.isBlank(sign)){			throw new NullPointerException("非法请求！");		}		Email email = checkSendEmail();		if(email!=null){			Account acc = new Account();			acc.setEmail(email.getNewEmail());			acc.setAccount(email.getAccount());			accountService.updateEmailByAccount(acc);						//修改邮箱成功后，更新session缓存中数据			acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);			if (acc != null && StringUtils.isNotBlank(acc.getAccount())) {				acc.setEmail(email.getNewEmail());			}						email = new Email();			email.setStatus(email.email_status_n);			email.setPageMsg("恭喜：新邮箱已激活！");			getRequest().setAttribute(FrontContainer.reset_password_email_timeout, email);		}else{			email = new Email();			email.setStatus(email.email_status_y);			email.setPageMsg("当前连接已失效！");			getRequest().setAttribute(FrontContainer.reset_password_email_timeout, email);		}		return "active";	}	/**	 * 激活账号的邮件的回调	 * @return	 */	public String activeAccount(){		logger.error("active...");		String sign = getRequest().getParameter("sign");		if(StringUtils.isBlank(sign)){			throw new NullPointerException("非法请求！");		}				//查询邮件是否是本系统所发出的		Email email = new Email();		email.setSign(sign);		email = emailService.selectOne(email);		if(email==null){			throw new NullPointerException("非法请求！");		}				if(email.getStatus().equals(net.jeeshop.services.common.Email.email_status_y)){			getRequest().setAttribute("LinkInvalid", "链接已失效！");			return "activeAccount";		}				Account acc = new Account();		acc.setAccount(email.getAccount());		acc = accountService.selectOne(acc);		if(acc==null){			throw new NullPointerException("非法请求！"); 		}				Account acc2 = new Account();		acc2.setId(acc.getId());		acc2.setEmailIsActive(Account.account_emailIsActive_y);		accountService.updateDataWhenActiveAccount(acc2,acc.getAccount());				return "activeAccount";	}	/**	 * ajax删除收藏夹	 * teng	 * @return	 */	public String delFavorite(){				Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		String pid = getRequest().getParameter("productId");				Favorite favorite = new Favorite();		favorite.setProductID(pid);		favorite.setAccount(acc.getAccount());		List<Favorite> list = favoriteService.selectList(favorite);				  try {		   favorite=list.get(0);			favoriteService.delete(favorite);			jsonStr="1";		  } catch (Exception e) {			  logger.error("deleteOrder..."+e);		  }		return toJson;	}		public String toManage(){		Company c=(Company) getSession().getAttribute(ManageContainer.manage_session_company_info);								User u = (User) getSession().getAttribute(ManageContainer.manage_session_user_info);		if(u!=null){			if(u.getRid().equals("2")||u.getRid().equals("13")){				if(c==null){					getRequest().setAttribute("message", "您还未申请企业,请进入首页点击商家入驻申请企业!");					return "userError";				}else if( c.getStatus().equals("1")){					getRequest().setAttribute("message", "您的企业已提交未审核,请等待审核完成后再进入卖家中心!");					return "userError";				}			}			return "manage";		}		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}				u = new User();		u.setId(acc.getId());		u=userService.selectOne(u);		if(u.getRid().equals("2")||u.getRid().equals("13")){			if(c==null){				getRequest().setAttribute("message", "您还未申请企业,请进入首页点击商家入驻申请企业!");				return "userError";			}else if( c.getStatus().equals("1")){				getRequest().setAttribute("message", "您的企业已提交未审核,请等待审核完成后再进入卖家中心!");				return "userError";			}		}						//解析用户的数据库权限，以后可以进行DB权限限制		if(StringUtils.isNotBlank(u.getRole_dbPrivilege())){			String[] dbPriArr = u.getRole_dbPrivilege().split(",");			if(u.getDbPrivilegeMap()==null){				u.setDbPrivilegeMap(new HashMap<String, String>());			}else{				u.getDbPrivilegeMap().clear();			}						if(dbPriArr.length!=0){				for(int i=0;i<dbPriArr.length;i++){					u.getDbPrivilegeMap().put(dbPriArr[i], dbPriArr[i]);				}			}		}								List<MenuItem> root = loadMenus(u,"0",null);				getSession().setAttribute("left_menu", root);						getSession().setAttribute(ManageContainer.manage_session_user_info, u);		getSession().setAttribute("checkRid", "1");		getSession().setAttribute("checkProductRid", KeyValueHelper.get("checkProductRid"));		getSession().setAttribute("checkProductRid2", KeyValueHelper.get("checkProductRid2"));		return "manage";	}	/**	 * 根据角色ID，加载用户菜单资源	 * @param u	 * @param pid	 * @param url	 * @return	 */	@SuppressWarnings("unchecked")	private List<MenuItem> loadMenus(User u,String pid,String url) {		/*		 * 首先，加载顶级目录或页面菜单 		 */		Map<String,String> param = new HashMap<String, String>();		if(u!=null && u.getRid()!=null){			param.put("rid", u.getRid());//角色ID		}		param.put("pid", pid);//菜单父ID		List<Menu> menus = menuService.selectList(param);		//创建菜单集合		List<MenuItem> root = new ArrayList<MenuItem>();		//循环添加菜单到菜单集合		for (Iterator<Menu> it = menus.iterator(); it.hasNext();) {			Menu entry = it.next();			MenuItem item = new MenuItem(entry.getName(), null);			item.setId(entry.getId());			item.setPid(entry.getPid());			item.setMenuType(entry);//			if(item.getType().equals(MenuType.page)){//				item.setIcon("http://127.0.0.1:8082/myshop/resource/images/letter.gif");//			}			if(url!=null){				item.setUrl(url);			}else{				item.setUrl(entry.getUrl());			}			root.add(item);		}				/*		 * 其次，加载子菜单 或 按钮功能		 */		for (int i = 0; i < root.size(); i++) {			MenuItem item = root.get(i);			if(!item.isButton()){				Menu mm = new Menu();				mm.setPid(item.getId());				loadChildrenByPid(root.get(i), mm,url,u);			}else{				//addUserResourceMenusButton(item.getUrl());			}		}		return root;	}	// 根据父ID加载子节点	private void loadChildrenByPid(MenuItem item, Menu menu,String url,User u) {		Map<String,String> param = new HashMap<String, String>();				if(u!=null && u.getRid()!=null)			param.put("rid", u.getRid());		param.put("pid", menu.getPid());		//加载菜单节点		List<Menu> data = menuService.selectList(param);		if(data==null || data.size()==0){			return;		}		if(item.getChildren()==null)item.setChildren(new ArrayList<MenuItem>());		//创建菜单节点		for (int i = 0; i < data.size(); i++) {			Menu entry = data.get(i);						MenuItem addItem = new MenuItem(entry.getName(), null);			addItem.setId(entry.getId());			addItem.setPid(entry.getPid());			addItem.setMenuType(entry);			String url0 = null;			if(url!=null){				addItem.setUrl(str+url);				url0 = url;			}else{				addItem.setUrl(str+entry.getUrl());				url0 = entry.getUrl();			}//			System.out.println("entry.getType()="+entry.getType()+",MenuType.button="+MenuType.button);			if(entry.getType().equals("button")){				addUserResourceMenusButton(url0);			}else{				item.getChildren().add(addItem);			}		}		//根据菜单节点进行递归加载		for (int i = 0; i < item.getChildren().size(); i++) {			MenuItem childItem = item.getChildren().get(i);			if(!childItem.isButton()){				Menu itemMenu = new Menu();				itemMenu.setPid(childItem.getId());//				itemMenu.setMenuType(entry);				loadChildrenByPid(childItem, itemMenu,url,u);			}		}	}	/**	 * 	 * @author 滕武超	 * @throws IOException 	 * @date 2015-10-21 上午11:36:40 	 * @Description:用户三个月未购买商品,激活帐号	 */	public String activate() throws IOException{		String productId = getRequest().getParameter("productId");		String presenter = getRequest().getParameter("presenter");		if(presenter==null||presenter.equals("")){			presenter=accountService.selectById(KeyValueHelper.get("PTSYZH")).getAccount();		}		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);		acc.setPresenter(presenter);		acc.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));		getSession().setAttribute(FrontContainer.USER_INFO,acc );		Account a=new Account(); 		a.setId(acc.getId());		a.setPresenter(presenter);		a.setPastDue(acc.getPastDue());		accountService.update(a);		getResponse().sendRedirect(getRequest().getContextPath()+"/product/"+productId+".html");		return null;	}			/**	 * 添加用户资源功能到session，为后面权限功能检查做铺垫	 */	@SuppressWarnings("unchecked")	private void addUserResourceMenusButton(String button){		Map<String,String> buttons = (Map<String, String>) getSession().getAttribute(ManageContainer.user_resource_menus_button);		if(buttons==null){			buttons = new HashMap<String, String>();//TreeMap<String, String>();			getSession().setAttribute(ManageContainer.user_resource_menus_button,buttons);		}		buttons.put(button, button);	}	/**	 * 	 * 作者：王海洋	 * 时间：2015-11-24上午11:28:34	 * 描述:猪贸通注册	 * @return	 */	@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)	public String regZmt(){		try{			String yzm = this.getRequest().getParameter("yzm");			String u = getRequest().getParameter("u");			if(e==null||StringUtils.isBlank(e.getMobile())||StringUtils.isBlank(yzm)||StringUtils.isBlank(u)){				getRequest().setAttribute("error", "4");				return "toRegZmt";			}					getRequest().setAttribute("u", u);		String yzmS = getSession().getAttribute(FrontContainer.validateMobileCode).toString();		String phoneS = getSession().getAttribute(FrontContainer.validateMobile).toString();		if(!yzm.equals(yzmS)){			getRequest().setAttribute("error", "1");			return "toRegZmt";		}		if(!phoneS.equals(e.getMobile())){			getRequest().setAttribute("error", "2");			return "toRegZmt";		}//		校验用户是否已经注册过		Account checkUse = new Account();		checkUse.setAccount(e.getMobile());		Account user = accountService.selectOne(checkUse);		if(user!=null){			getRequest().setAttribute("error", "3");//已注册过,可直接下载			return "toRegZmt";		}				Account a = accountService.selectById(u);		e.setAccount(e.getMobile());		e.setPassword(pass);		e.setPassword(MD5.md5(e.getPassword()));		e.setEmailIsActive("y");		// 用户注册		e.setLastLoginTime("yes");		e.setLastLoginIp(AddressUtils.getIp(getRequest()));		String address = null;		try {			address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");		} catch (Exception e) {			e.printStackTrace();		}		e.setLastLoginArea(address);		e.setPresenter(a.getAccount());		e.setNickname(e.getAccount());		e.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));		e.setSource("3");		getServer().insert(e);						//发送短信		String sms = CommonPropertiesUtil.getSMStemValue( "ZMT_ZHUCEMSG").replace("account", e.getAccount()).replace("pass", pass);		SendSMSUtil.sendSMS(sms,e.getAccount());						TuiGuang tg=new TuiGuang();		tg.setUserName(e.getAccount());		tg.setUserPhone(e.getMobile());		tg.setUserID(e.getId());		tg.setPName(a.getAccount());		tg.setPID(a.getId());		tg.setPPhone(a.getMobile());		tg.setIsLogin("n");		tuiGuangService.insert(tg);				//生成二维码		String realPath = ServletActionContext.getServletContext().getRealPath("/appUpload/ewm");		TwoDimensionCode t=new TwoDimensionCode();		String con=SystemManager.systemSetting.getWww()+"/appDownload/download.jsp?u="+e.getId();		t.encoderQRCode(con,realPath+"/"+e.getId()+".png");				getRequest().setAttribute("error", "0");		}catch (Exception e) {			e.printStackTrace();			logger.error(e);			getRequest().setAttribute("error", "4");		}				return "toRegZmt";	}	/**	 * 平顶山关联猪贸通注册校验	 * @author 滕武超	 * @throws IOException 	 * @date 2016-1-25 上午11:23:05 	 * @Description:	 */	@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)	public String regZmtPds() throws IOException{		String username = getRequest().getParameter("username");		String password = getRequest().getParameter("password");		String mobile = getRequest().getParameter("mobile");		String yzm = this.getRequest().getParameter("yzm");		String u = getRequest().getParameter("u");				try{					if(StringUtils.isBlank(username)||StringUtils.isBlank(password)||StringUtils.isBlank(yzm)||StringUtils.isBlank(mobile)||StringUtils.isBlank(u)){			getRequest().setAttribute("error", "5");			return "toRegZmtPds";		}		getRequest().setAttribute("u", u);		getRequest().setAttribute("username", username);		getRequest().setAttribute("mobile", mobile);				String yzmS = getSession().getAttribute(FrontContainer.validateMobileCode).toString();		String phoneS = getSession().getAttribute(FrontContainer.validateMobile).toString();		if(!yzm.equals(yzmS)){			getRequest().setAttribute("error", "1");			return "toRegZmtPds";		}		if(!phoneS.equals(mobile)){			getRequest().setAttribute("error", "2");			return "toRegZmtPds";		}		//		校验用户是否已经注册过		ConnectUser cu=new ConnectUser();		cu.setUserName(username);		cu.setSource("1");		cu = connectUserService.selectOne(cu);				Account checkUse = new Account();		checkUse.setAccount(mobile);		Account user = accountService.selectOne(checkUse);				if(cu!=null){			password=MD5.md5(password);			if(!cu.getPassword().equals(password)||!cu.getAccount().equals(mobile)){			String url=KeyValueHelper.get("PDS_URL")+"?api_method=c.login&api_name="+username+"&api_pwd="+password;			//url="http://192.168.0.239:8787/pdsxm/clientrcp/treat.action"+"?api_method=c.login&api_name="+username+"&api_pwd="+MD5.md5(password);			String str = HttpUtil.get(url, null, null);			System.out.println(str);			JSONObject js=JSONObject.fromObject(str);			Object s = js.get("result");			if(s.toString().equals("success")){				if(!cu.getPassword().equals(password)){					cu.setPassword(password);				}				if(!cu.getAccount().equals(mobile)){					e=new Account();					e.setAccount(cu.getAccount());					e.setSource("3");					accountService.update(e);										if(user!=null){						e=new Account();						e.setAccount(user.getAccount());						e.setSource("4");						accountService.update(e);					}else{					String role = js.get("role").toString();					Account a = accountService.selectById(u);					e=new Account();					e.setAccount(mobile);					e.setMobile(mobile);					e.setPassword(password);					e.setEmailIsActive("y");					// 用户注册					e.setLastLoginTime("yes");					e.setLastLoginIp(AddressUtils.getIp(getRequest()));					String address = null;					try {						address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");					} catch (Exception e) {						e.printStackTrace();					}					e.setLastLoginArea(address);					e.setPresenter(a.getAccount());					e.setNickname(e.getAccount());					e.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));					e.setSource("4");					//用户类型  1为猪场,2为屠宰场,3为经纪人4物流公司,5自然人,6防疫员,7检疫员,8监督员					//0 代表自然人，1，养殖企业，2  经纪人，3，屠宰场					// 4 防疫员  5 检疫员 6 监管员					if(role.equals("0"))e.setType("5");					else if(role.equals("1"))e.setType("1");					else if(role.equals("2"))e.setType("3");					else if(role.equals("3"))e.setType("2");					else if(role.equals("4"))e.setType("6");					else if(role.equals("5"))e.setType("7");					else if(role.equals("6"))e.setType("8");					getServer().insert(e);					}					cu.setAccount(e.getAccount());					connectUserService.update(cu);				}				getRequest().setAttribute("error", "4");//您已注册过,并关联帐号成功,可直接下载!				return "toRegZmtPds";			}else{				getRequest().setAttribute("error", "3");//用户名或密码错误!				return "toRegZmtPds";			}			}else{				getRequest().setAttribute("error", "4");//您已注册过,并关联帐号成功,可直接下载!				return "toRegZmtPds";			}		}else{			String url=KeyValueHelper.get("PDS_URL")+"?api_method=c.login&api_name="+username+"&api_pwd="+MD5.md5(password);			//url="http://192.168.0.239:8787/pdsxm/clientrcp/treat.action"+"?api_method=c.login&api_name="+username+"&api_pwd="+MD5.md5(password);			String str = HttpUtil.get(url, null, null);			System.out.println(str);			JSONObject js=JSONObject.fromObject(str);			Object s = js.get("result");			if(s.toString().equals("success")){				String role = js.get("role").toString();				cu=new ConnectUser();				cu.setAccount(mobile);				cu.setCreateTime(DateUtil.dateToStrSS());				cu.setSource("1");				cu.setUserName(username);				cu.setPassword(MD5.md5(password));				connectUserService.insert(cu);								if(user==null){					Account a = accountService.selectById(u);					e.setAccount(mobile);					e.setMobile(mobile);					e.setPassword(MD5.md5(password));					e.setEmailIsActive("y");					// 用户注册					e.setLastLoginTime("yes");					e.setLastLoginIp(AddressUtils.getIp(getRequest()));					String address = null;					try {						address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");					} catch (Exception e) {						e.printStackTrace();					}					e.setLastLoginArea(address);					e.setPresenter(a.getAccount());					e.setNickname(e.getAccount());					e.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));					e.setSource("4");					//用户类型  1为猪场,2为屠宰场,3为经纪人4物流公司,5自然人					//0 代表自然人，1，养殖企业，2  经纪人，3，屠宰场					if(role.equals("0"))e.setType("5");					else if(role.equals("1"))e.setType("1");					else if(role.equals("2"))e.setType("3");					else if(role.equals("3"))e.setType("2");					else if(role.equals("4"))e.setType("6");					else if(role.equals("5"))e.setType("7");					else if(role.equals("6"))e.setType("8");										getServer().insert(e);										TuiGuang tg=new TuiGuang();					tg.setUserName(e.getAccount());					tg.setUserPhone(e.getMobile());					tg.setUserID(e.getId());					tg.setPName(a.getAccount());					tg.setPID(a.getId());					tg.setPPhone(a.getMobile());					tg.setIsLogin("n");					tuiGuangService.insert(tg);															//生成二维码					String realPath = ServletActionContext.getServletContext().getRealPath("/appUpload/ewm");					TwoDimensionCode t=new TwoDimensionCode();					String con=SystemManager.systemSetting.getWww()+"/appDownload/download.jsp?u="+e.getId();					t.encoderQRCode(con,realPath+"/"+e.getId()+".png");										getRequest().setAttribute("error", "0");//成功!					return "toRegZmtPds";				}else{					Account acc=new Account();					acc.setId(user.getId());					acc.setSource("4");					accountService.update(acc);					getRequest().setAttribute("error", "4");//您已注册过,并关联帐号成功,可直接下载!					return "toRegZmtPds";				}			}else{				getRequest().setAttribute("error", "3");//用户名或密码错误!				return "toRegZmtPds";			}		}		}catch (Exception e) {			e.printStackTrace();			getRequest().setAttribute("error", "5");		}		return "toRegZmtPds";			}	/**	 * 动检电子出证用户关联猪贸通注册校验	 * @author 滕武超	 * @throws IOException 	 * @date 2016-1-25 上午11:23:05 	 * @Description:	 */	@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)	public String regZmtDj() throws IOException{		String username = getRequest().getParameter("username");		String password = getRequest().getParameter("password");		String mobile = getRequest().getParameter("mobile");		String yzm = this.getRequest().getParameter("yzm");		String u = getRequest().getParameter("u");				try{						if(StringUtils.isBlank(username)||StringUtils.isBlank(password)||StringUtils.isBlank(yzm)||StringUtils.isBlank(mobile)||StringUtils.isBlank(u)){				getRequest().setAttribute("error", "5");				return "toRegZmtDzcz";			}			getRequest().setAttribute("u", u);			getRequest().setAttribute("username", username);			getRequest().setAttribute("mobile", mobile);						String yzmS = getSession().getAttribute(FrontContainer.validateMobileCode).toString();			String phoneS = getSession().getAttribute(FrontContainer.validateMobile).toString();			if(!yzm.equals(yzmS)){				getRequest().setAttribute("error", "1");				return "toRegZmtDzcz";			}			if(!phoneS.equals(mobile)){				getRequest().setAttribute("error", "2");				return "toRegZmtDzcz";			}			//		校验用户是否已经注册过			ConnectUser cu=new ConnectUser();			cu.setUserName(username);			cu.setSource("2");			cu = connectUserService.selectOne(cu);						Account checkUse = new Account();			checkUse.setAccount(mobile);			Account user = accountService.selectOne(checkUse);						String url=DjSystem.urlMap.get(area);						if(StringUtils.isBlank(area)){				getRequest().setAttribute("error", "5");				return "toRegZmtDzcz";			}						if(cu!=null){				if(!cu.getPassword().equals(password)||!cu.getAccount().equals(mobile)){					String str = HttpUtil.get(url, "syncTransferData=[{\"SYNC_ACT\":\"AIS-2003000100000001\",\"USERNAME\":\""+username+"\",\"PASSWORD\":\""+password+"\"}]", null);					JSONObject js=JSONObject.fromObject(str);					Object s = js.get("AIS-RST");					if(s.toString().equals("AIS-00000001")){						if(!cu.getPassword().equals(password)){							cu.setPassword(password);						}						if(!cu.getAccount().equals(mobile)){							e=new Account();							e.setAccount(cu.getAccount());							e.setSource("3");							accountService.update(e);														if(user!=null){								e=new Account();								e.setAccount(user.getAccount());								e.setSource("5");								accountService.update(e);							}else{								String role = js.get("LEVELSNAME").toString();								Account a = accountService.selectById(u);								e=new Account();								e.setAccount(mobile);								e.setMobile(mobile);								e.setPassword(password);								e.setEmailIsActive("y");								// 用户注册								e.setLastLoginTime("yes");								e.setLastLoginIp(AddressUtils.getIp(getRequest()));								String address = null;								try {									address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");								} catch (Exception e) {									e.printStackTrace();								}								e.setLastLoginArea(address);								e.setPresenter(a.getAccount());								e.setNickname(e.getAccount());								e.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));								e.setSource("5");								if(role.equals("省内企业"))e.setType("1");								getServer().insert(e);							}							cu.setAccount(e.getAccount());							cu.setArea1(js.getString("PROVINCE").toString());							cu.setArea2(js.getString("CITY").toString());							cu.setArea3(js.getString("COUNTRY").toString());							cu.setArea4(js.getString("TOWN").toString());														connectUserService.update(cu);						}						getRequest().setAttribute("error", "4");//您已注册过,并关联帐号成功,可直接下载!						return "toRegZmtDzcz";					}else{						getRequest().setAttribute("error", "3");//用户名或密码错误!						return "toRegZmtDzcz";					}				}else{					getRequest().setAttribute("error", "4");//您已注册过,并关联帐号成功,可直接下载!					return "toRegZmtDzcz";				}			}else{				String str = HttpUtil.get(url, "syncTransferData=[{\"SYNC_ACT\":\"AIS-2003000100000001\",\"USERNAME\":\""+username+"\",\"PASSWORD\":\""+password+"\"}]", null);				System.out.println(str);				JSONObject js=JSONObject.fromObject(str);				Object s = js.get("AIS-RST");				if(s.toString().equals("AIS-00000001")){					String role = js.get("LEVELSNAME").toString();					cu=new ConnectUser();					cu.setAccount(mobile);					cu.setCreateTime(DateUtil.dateToStrSS());					cu.setSource("2");					cu.setUserName(username);					cu.setPassword(password);					cu.setArea1(js.getString("PROVINCE").toString());					cu.setArea2(js.getString("CITY").toString());					cu.setArea3(js.getString("COUNTRY").toString());					cu.setArea4(js.getString("TOWN").toString());					connectUserService.insert(cu);										if(user==null){						Account a = accountService.selectById(u);						e.setAccount(mobile);						e.setMobile(mobile);						e.setPassword(MD5.md5(password));						e.setEmailIsActive("y");						// 用户注册						e.setLastLoginTime("yes");						e.setLastLoginIp(AddressUtils.getIp(getRequest()));						String address = null;						try {							address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");						} catch (Exception e) {							e.printStackTrace();						}						e.setLastLoginArea(address);						e.setPresenter(a.getAccount());						e.setNickname(e.getAccount());						e.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));						e.setSource("5");						//省内企业为猪场						if(role.equals("省内企业"))e.setType("1");												getServer().insert(e);												TuiGuang tg=new TuiGuang();						tg.setUserName(e.getAccount());						tg.setUserPhone(e.getMobile());						tg.setUserID(e.getId());						tg.setPName(a.getAccount());						tg.setPID(a.getId());						tg.setPPhone(a.getMobile());						tg.setIsLogin("n");						tuiGuangService.insert(tg);																		//生成二维码						String realPath = ServletActionContext.getServletContext().getRealPath("/appUpload/ewm");						TwoDimensionCode t=new TwoDimensionCode();						String con=SystemManager.systemSetting.getWww()+"/appDownload/download.jsp?u="+e.getId();						t.encoderQRCode(con,realPath+"/"+e.getId()+".png");												getRequest().setAttribute("error", "0");//成功!						return "toRegZmtDzcz";					}else{						Account acc=new Account();						acc.setId(user.getId());						acc.setSource("4");						accountService.update(acc);						getRequest().setAttribute("error", "4");//您已注册过,并关联帐号成功,可直接下载!						return "toRegZmtDzcz";					}				}else{					getRequest().setAttribute("error", "3");//用户名或密码错误!					return "toRegZmtDzcz";				}			}		}catch (Exception e) {			e.printStackTrace();			getRequest().setAttribute("error", "5");		}		return "toRegZmtDzcz";			}							/**	 * 用户登陆验证	 * @author 靳友斌	 * @return	 * @throws IOException 	 * 2015.11.18	 */	public String doLoginCheck() throws IOException {		logger.error("doLogin()...");		Map<String,Object> map=null;		String account=getRequest().getParameter("account");		String password=getRequest().getParameter("password");		String vcode=getRequest().getParameter("vcode");		if (getSession().getAttribute(FrontContainer.USER_INFO) != null) {			map=new HashMap<String,Object>();			map.put("msgtype", "error");			map.put("msg", "重新登录!");			jsonStr=JSONObject.fromObject(map).toString();			return toJson;		}		errorMsg = "<font color='red'>帐号或密码错误!</font>";		if (account == null || account.trim().equals("")|| password == null || password.trim().equals("")){			//getSession().setAttribute(FrontContainer.login_errorMsg, errorMsg);			logger.error("doLogin.errorMsg="+errorMsg);			//return toLogin;			map=new HashMap<String,Object>();			map.put("msgtype", "error");			map.put("msg", "帐号或密码错误!");			jsonStr=JSONObject.fromObject(map).toString();			return toJson;		}				//String vcode = getRequest().getParameter("vcode");		if(StringUtils.isNotBlank(vcode)){//验证验证码输入的是否正确			String validateCode = getSession().getAttribute(FrontContainer.validateCode).toString();			if(!validateCode.equalsIgnoreCase(vcode)){				//getSession().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>验证码输入错误!</font>");				//return toLogin;				map=new HashMap<String,Object>();				map.put("msgtype", "error");				map.put("msg", "验证码输入错误!");				jsonStr=JSONObject.fromObject(map).toString();				return toJson;			}		}else{			//getSession().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>请输入验证码!</font>");			//return toLogin;			map=new HashMap<String,Object>();			map.put("msgtype", "error");			map.put("msg", "请输入验证码!");			jsonStr=JSONObject.fromObject(map).toString();			return toJson;		}		//用户验证		e.setPassword(MD5.md5(password));		//String eaccount = e.getAccount();		String epassword = e.getPassword();		e.clear();		e.setAccount(account);		e.setPassword(epassword);		Account acc = accountService.selectOne(e);		if (acc == null) {			//getSession().setAttribute(FrontContainer.login_errorMsg, errorMsg);			//return toLogin;			map=new HashMap<String,Object>();			map.put("msgtype", "error");			map.put("msg", "帐号或密码错误!");			jsonStr=JSONObject.fromObject(map).toString();			return toJson;		}else if(acc.getFreeze().equals(Account.account_freeze_y)){			if(StringUtils.isBlank(acc.getFreezeStartdate()) && StringUtils.isBlank(acc.getFreezeEnddate())){				//getSession().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>此账号已永久冻结!有疑问请联系站点管理员!</font>");				map=new HashMap<String,Object>();				map.put("msgtype", "error");				map.put("msg", "此账号已永久冻结!有疑问请联系站点管理员!");							}else{				//getSession().setAttribute(FrontContainer.login_errorMsg, "<font color='red'>此账号已暂时冻结!有疑问请联系站点管理员!</font>");				map=new HashMap<String,Object>();				map.put("msgtype", "error");				map.put("msg", "此账号已暂时冻结!有疑问请联系站点管理员!");			}			jsonStr=JSONObject.fromObject(map).toString();			return toJson;		}else if(acc.getEmailIsActive().equals(Account.account_emailIsActive_n)){			//邮箱未激活			//errorMsg = "<font color='red'>此账号的邮箱尚未激活，请立即去激活邮箱！</font>";			//getSession().setAttribute(FrontContainer.login_errorMsg, errorMsg);			map=new HashMap<String,Object>();			map.put("msgtype", "error");			map.put("msg", "此账号的邮箱尚未激活，请立即去激活邮箱!");			jsonStr=JSONObject.fromObject(map).toString();			return toJson;		}		if(acc.getPastDue()==null){			Account a=new Account();    		a.setId(acc.getId());			a.setPresenter(accountService.selectById(KeyValueHelper.get("PTSYZH")).getAccount());	    	a.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));	    	accountService.update(a);	    	acc.setPresenter(a.getPresenter());	    	acc.setPastDue(a.getPastDue());	    			}else{		Cookie[] cookies = getRequest().getCookies();		int isy=0;		 for(Cookie cookie : cookies) {		    if("presenter".equals(cookie.getName())) {		    	isy=1;		    	if(DateUtil.strToDatehhmmss(acc.getPastDue().substring(0,19)).before(new Date())){		    		//查询推荐人用户		    		Account ac2 = accountService.selectById(cookie.getValue());		    		if(!ac2.getId().equals(acc.getId())){		    		//更新当前用户		    		Account a=new Account();		    		a.setId(acc.getId());		    		a.setPresenter(ac2.getAccount());		    		a.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));		    		accountService.update(a);		    		//更新当前用户		    		acc.setPresenter(a.getPresenter());		    		acc.setPastDue(a.getPastDue());		    		}		    	}		    	cookie.setPath(getRequest().getContextPath());		        cookie.setMaxAge(0);//清除cookie,设置生命周期为0		        getResponse().addCookie(cookie);		    }		 }				if(isy==0){			if(DateUtil.strToDatehhmmss(acc.getPastDue().substring(0,19)).before(new Date())){				Account a=new Account();	    		a.setId(acc.getId());				a.setPresenter(accountService.selectById(KeyValueHelper.get("PTSYZH")).getAccount());		    	a.setPastDue(DateUtil.dateToStr(DateUtil.addMonth(new Date(), 3),"yyyy-MM-dd HH:mm:ss"));		    	accountService.update(a);		    	acc.setPresenter(a.getPresenter());		    	acc.setPastDue(a.getPastDue());			}		}		}		errorMsg = null;		acc.setLoginType(LoginTypeEnum.system);//登陆方式		String picture = acc.getPicture();				getSession().setAttribute("picture", picture);		getSession().setAttribute(FrontContainer.USER_INFO, acc);		//企业信息		Company company=new Company();		company.setCreateAccount(acc.getAccount());		company=companyService.selectOne(company);		//if(company!=null){		getSession().setAttribute(ManageContainer.manage_session_company_info, company);						//更新用户最后登录时间		e.clear();		e.setId(acc.getId());		e.setLastLoginTime("yes");		e.setLastLoginIp(AddressUtils.getIp(getRequest()));		String address = null;		try {			address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");		} catch (Exception e) {			e.printStackTrace();		}		e.setLastLoginArea(address);		accountService.update(e);		e.clear();		String p = getRequest().getParameter("p");		if(p!=null&&p.length()!=0&&!p.equals("null")){			getResponse().sendRedirect(getRequest().getContextPath()+"/product/"+p+".html");		}		if(loginType!=null&&loginType.equals("2")){			return toManage();		}				map=new HashMap<String,Object>();		map.put("msgtype", "success");		map.put("msg", "登录成功!");		jsonStr=JSONObject.fromObject(map).toString();				return toJson;	}		/**	 * 获取省份编码	 * @return	 * @throws IOException	 */		public String ProvinceCode() throws IOException{		//logger.error("selectCitysByProvinceCode...");		//String provinceCode = getRequest().getParameter("provinceCode");		//logger.error("selectCitysByProvinceCode...provinceCode="+provinceCode);		//if(StringUtils.isBlank(provinceCode)){	//		throw new NullPointerException("provinceCode is null");		//}		//		Area area = new Area();//		area.setCode(provinceCode);		if(SystemManager.areaMap!=null && SystemManager.areaMap.size()>0){			Map<String, Area>addrMap = SystemManager.areaMap;						//logger.error("areaInfo = " + areaInfo);						if(addrMap!=null){				JSONObject jsonObject = JSONObject.fromObject(addrMap);				jsonStr = jsonObject.toString();				super.write(jsonStr);				return null;			}		}				getResponse().getWriter().write("{}");		return null;	}	public String getLoginType() {		return loginType;	}	public void setLoginType(String loginType) {		this.loginType = loginType;	}	public String getPass() {		return pass;	}	public void setPass(String pass) {		this.pass = pass;	}	}