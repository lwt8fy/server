package net.jeeshop.web.action.manage.activity;import java.util.Date;import net.jeeshop.core.BaseAction;import net.jeeshop.core.ManageContainer;import net.jeeshop.core.system.bean.User;import net.jeeshop.core.util.DateTimeUtil;import net.jeeshop.core.util.DateUtil;import net.jeeshop.services.manage.activity.ActivityService;import net.jeeshop.services.manage.activity.bean.Activity;import net.jeeshop.services.manage.company.bean.Company;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class ActivityAction extends BaseAction<Activity> {	private static final long serialVersionUID = 1L;	private ActivityService activityService;	private String[] selectAccountRange;	@SuppressWarnings("unused")	private static final Logger logger = LoggerFactory.getLogger(ActivityAction.class);	private String userName;		public String getUserName() {		return userName;	}	public void setUserName(String userName) {		this.userName = userName;	}	public String[] getSelectAccountRange() {		return selectAccountRange;	}	public void setSelectAccountRange(String[] selectAccountRange) {		this.selectAccountRange = selectAccountRange;	}	public ActivityService getActivityService() {		return activityService;	}	@Override	protected void selectListAfter() {		pager.setPagerUrl("activity!selectList.action");	}	public void setActivityService(ActivityService activityService) {		this.activityService = activityService;	}	@Override	public Activity getE() {		return this.e;	}	@Override	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Activity();		}	}	@Override	public void insertAfter(Activity e) {		e.clear();	}		@Override	public String toAdd() throws Exception {		return "toEditComp";	}		@Override	public String toEdit() throws Exception {		e = getServer().selectOne(getE());		return "toEditComp";	}	@Override	public String insert() throws Exception {		// TODO Auto-generated method stub		User u=(User)getSession().getAttribute(ManageContainer.manage_session_user_info);		if(u.getRid().equals("2")){//商品管理员			e.setCreateAccount(u.getUsername());			Company c=(Company) getSession().getAttribute(ManageContainer.manage_session_company_info);			e.setCompName(c.getName());		}else{			e.setCreateAccount(userName);		}		activityService.insert(e);//企业申请的活动		String cn=e.getCompName();		e=new Activity();		e.setCompName(cn);		getRequest().setAttribute("message", "新增活动成功!请及时修改所选商品活动价格!");		return toList;	}	@Override	public String update() throws Exception {		return super.update();	}	@Override	public String selectList() throws Exception {		User u=(User)getSession().getAttribute(ManageContainer.manage_session_user_info);		if(u.getRid().equals("2")){			e.setCreateAccount(u.getUsername());		}		super.selectList();		if(getPager()!=null && getPager().getList()!=null && getPager().getList().size()>0){			for(int i=0;i<getPager().getList().size();i++){				Activity activity = (Activity) getPager().getList().get(i);				if(DateUtil.strToDatehhmmss(activity.getStartDate().substring(0,19)).after(new Date())){					activity.setIsStart(false);				}else{					activity.setIsStart(true);				}				if(DateUtil.strToDatehhmmss(activity.getEndDate().substring(0,19)).before(new Date())){										Activity ac=new Activity();					ac.setId(activity.getId());					ac.setStatus("n");					this.getServer().update(ac);										activity.setStatus("n");					activity.setExpire(true);				}								if(!activity.isExpire()){					//计算活动多久结束，是否已结束					activity.setActivityEndDateTime(DateTimeUtil.getActivityEndDateTimeString(activity.getEndDate()));									}			}		}				return toList;	}	public String deleteById() throws Exception{		this.getServer().delete(e);		getRequest().setAttribute("message", "删除成功!");		e=new Activity();		return toList;	}	public String close() throws Exception{		e.setStatus("n");		activityService.update(e);		getRequest().setAttribute("message", "关闭成功!");		e=new Activity();		return toList;	}}