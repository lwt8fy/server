package net.jeeshop.web.action.manage.tuiGuang;import java.io.File;import java.io.FileOutputStream;import java.util.ArrayList;import java.util.List;import net.jeeshop.core.BaseAction;import net.jeeshop.core.MyCommonDao;import net.jeeshop.services.common.TuiGuang;import net.jeeshop.services.manage.tuiGuang.service.TuiGuangService;import net.sf.json.JSONObject;import org.apache.commons.lang.StringUtils;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFCellStyle;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.hssf.util.Region;import org.apache.poi.ss.usermodel.CellStyle;import org.apache.struts2.ServletActionContext;import org.mybatis.spring.SqlSessionTemplate;import org.springframework.beans.factory.BeanInitializationException;@SuppressWarnings("deprecation")public class TuiGuangAction extends BaseAction<TuiGuang> {	private static final long serialVersionUID = 1L;	@SuppressWarnings("unused")	private TuiGuangService tuiGuangService;	public void setTuiGuangService(TuiGuangService tuiGuangService) {		this.tuiGuangService = tuiGuangService;	}		private String jsonStr;	private MyCommonDao myCommonDao;		public String createExcel() throws Exception{		// 第一步，创建一个webbook，对应一个Excel文件          HSSFWorkbook wb = new  HSSFWorkbook();          // 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet          HSSFSheet sheet = wb.createSheet("推广人员");          // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short          HSSFRow row = sheet.createRow(0);          // 第四步，创建单元格，并设置值表头 设置表头居中          HSSFCellStyle style = wb.createCellStyle();          style.setAlignment(CellStyle.ALIGN_CENTER); // 创建一个居中格式                 HSSFCell cell = row.createCell(0);          cell.setCellValue("推荐人");          cell.setCellStyle(style);          cell = row.createCell(1);          cell.setCellValue("推荐人手机号");          cell.setCellStyle(style);          cell = row.createCell(2);          cell.setCellValue("用户名");          cell.setCellStyle(style);          cell = row.createCell(3);          cell.setCellValue("用户手机号");          cell.setCellStyle(style);          cell = row.createCell(4);          cell.setCellValue("推荐日期");          cell.setCellStyle(style);         cell = row.createCell(5);          cell.setCellValue("状态");          cell.setCellStyle(style);         cell = row.createCell(6);          cell.setCellValue("身份");          cell.setCellStyle(style);                 sheet.addMergedRegion(new Region(0, (short) 7, 0, (short) 8));        cell = row.createCell(7);          cell.setCellValue("发布信息统计");          cell.setCellStyle(style);         if(StringUtils.isNotBlank(e.getPName())){			e.setPName(e.getPName().trim());		}        if("y".equals(e.getIsJiLian())&&StringUtils.isNotBlank(e.getPName())){			String pname = e.getPName();			List<Object> list = this.getList(pname,e.getStartDate(),e.getEndDate());			/*e.setStartDate(null);			e.setEndDate(null);*/			List<String> bPnames = new ArrayList<String>();			String str = "";			if(list!=null && list.size()>0){				for(Object object:list){					bPnames.add(String.valueOf(object));					str +="'"+String.valueOf(object)+"',";				}			}			if(StringUtils.isBlank(str)){//表示没有推广到人的情况				bPnames.add("_--1");			}			e.setbPnames(bPnames);		}        List<TuiGuang> list= getServer().selectList(e);       //List list=null;        for (int i = 0; i < list.size(); i++)          {              row = sheet.createRow(i + 1);              TuiGuang tg = list.get(i);              // 第四步，创建单元格，并设置值              row.createCell(0).setCellValue(tg.getPName());              row.createCell(1).setCellValue(tg.getPPhone());              row.createCell(2).setCellValue(tg.getUserName());            row.createCell(3).setCellValue(tg.getUserPhone());            cell = row.createCell(4);              cell.setCellValue(tg.getCreateTime());             if("y".equals(tg.getIsLogin())){            	if("2".equals(tg.getAuthentication())){            		row.createCell(5).setCellValue("已认证");            	}else if("3".equals(tg.getAuthentication())){            		row.createCell(5).setCellValue("认证失败");            	}else if("0".equals(tg.getAuthentication())||StringUtils.isBlank(tg.getAuthentication())){            		row.createCell(5).setCellValue("已登录");            	}else if("1".equals(tg.getAuthentication())){            		row.createCell(5).setCellValue("已提交");            	}            }else{            	row.createCell(5).setCellValue("未登录");	            }            String str = "";            if("1".equals(tg.getType())){            	str = "猪场";            }else if("2".equals(tg.getType())){            	str = "屠宰场";            }else if("3".equals(tg.getType())){            	str = "经纪人";            }else if("4".equals(tg.getType())){            	str = "物流公司";            }else if("5".equals(tg.getType())){            	str = "自然人";            }            cell = row.createCell(6);              cell.setCellValue(str);             String strs[] = tg.getScount().split(",");            sheet.addMergedRegion(new Region(i+1, (short) 7, i+1, (short) 8));            cell = row.createCell(7);              row.createCell(7).setCellValue("物流:"+strs[0]+",出售:"+strs[1]+",收购:"+strs[2]);	             try {            	 String path=ServletActionContext.getServletContext().getRealPath("/appDownload")+"/tuiGuang.xls";            	 File f=new File(path);            	 if(f.exists()){            	 f.delete();            	 }                 FileOutputStream fout = new FileOutputStream(path);                   wb.write(fout);                   fout.close();  			}                 catch (Exception e) {                	e.printStackTrace();     			}                             getRequest().setAttribute("download", "1");                 }        super.selectList();         return toList;	}	public String getCount(){		String pname = this.getRequest().getParameter("pname");		/*String start = e.getStartDate();		String end = e.getEndDate();*/		if(StringUtils.isBlank(pname)){			JSONObject jsonObject = new JSONObject();			jsonObject.put("success", "0");			jsonStr=jsonObject.toString();			return "json";		}		pname = pname.trim();		List<Object> list1 = new ArrayList<Object>();		String sql = "select userName from t_tuiguang where pName='"+pname+"' ";		String sql1="select userName from t_tuiguang where pName in (";		String sql2=")";		String pids="";		list1= myCommonDao.executeSql(1,  sql);		for (int i = 0; i < list1.size(); i++) {			if(i==0){				pids="'"+list1.get(i).toString()+"'";			}else{				pids+=","+"'"+list1.get(i).toString()+"'";			}		}		List<Object> list2 =new ArrayList<Object>();				if(list1!=null&&list1.size()>0){			list2 = myCommonDao.executeSql(1,sql1+pids+sql2);		}		for (int i = 0; i < list2.size(); i++) {			if(i==0){				pids="'"+list2.get(i).toString()+"'";			}else{				pids+=","+"'"+list2.get(i).toString()+"'";			}		}		List<Object> list3 =new ArrayList<Object>();		if(list2!=null&&list2.size()>0){			list3 = myCommonDao.executeSql(1,sql1+pids+sql2);		}		if("n".equals(e.getIsJiLian())){			list2 = new ArrayList<Object>();			list3 = new ArrayList<Object>();		}		if(StringUtils.isNotBlank(e.getStartDate()) || StringUtils.isNotBlank(e.getEndDate()) 				|| StringUtils.isNotBlank(e.getUserName())||StringUtils.isNotBlank(e.getIsLogin())				||StringUtils.isNotBlank(e.getType())){			List<Object> all = new ArrayList<Object>();			all.addAll(list1);			all.addAll(list2);			all.addAll(list3);			 sql1="select t.userName from t_tuiguang t,t_account u where t.userID=u.id and  t.userName in (";			 sql2=")";			 pids="";			 if(StringUtils.isNotBlank(e.getUserName())){				 sql2+=" and t.userName='"+e.getUserName().trim()+"'";			 }			 if(StringUtils.isNotBlank(e.getEndDate())){				 sql2 = sql2 + " and t.createtime <='"+e.getEndDate()+"' ";			 }			 if(StringUtils.isNotBlank(e.getStartDate())){				 sql2 = sql2 +  " and t.createtime >='"+e.getStartDate()+"' ";			 }			 if("1".equals(e.getIsLogin())){				 sql2+=" and t.isLogin='n'";			 }else if("2".equals(e.getIsLogin())){				 sql2+=" and t.isLogin='y'";				 sql2+=" and(authentication =0 or authentication is null)";			 }else if("3".equals(e.getIsLogin())){				 sql2+=" and t.isLogin='y'";				 sql2+=" and authentication =1";			 }else if("4".equals(e.getIsLogin())){				 sql2+=" and t.isLogin='y'";				 sql2+=" and authentication =2";			 }else if("5".equals(e.getIsLogin())){				 sql2+=" and t.isLogin='y'";				 sql2+=" and authentication =3";			 }			 if(StringUtils.isNotBlank(e.getType())){				 sql2+=" and t.isLogin='y'";				 sql2+=" and u.type ='"+e.getType()+"'";			 }			 if(list1!=null && list1.size()>0){				 for(int i =0;i<list1.size();i++){					if(i==0){							pids="'"+list1.get(i).toString()+"'";					}else{							pids+=","+"'"+list1.get(i).toString()+"'";					}				 }				 list1 = new ArrayList<Object>();				 list1 = myCommonDao.executeSql(1,sql1+pids+sql2);			 }			 if(list2!=null && list2.size()>0){				 for(int i =0;i<list2.size();i++){					if(i==0){							pids="'"+list2.get(i).toString()+"'";					}else{							pids+=","+"'"+list2.get(i).toString()+"'";					}				 }				 list2 = new ArrayList<Object>();				 list2 = myCommonDao.executeSql(1,sql1+pids+sql2);			 }			 if(list3!=null && list3.size()>0){				 for(int i =0;i<list3.size();i++){					if(i==0){							pids="'"+list3.get(i).toString()+"'";					}else{							pids+=","+"'"+list3.get(i).toString()+"'";					}				 }				 list3 = new ArrayList<Object>();				 list3 = myCommonDao.executeSql(1,sql1+pids+sql2);			 }			JSONObject jsonObject = new JSONObject();			jsonObject.put("all", list1.size()+list2.size()+list3.size());			jsonObject.put("count1", list1.size()); 			jsonObject.put("count2", list2.size());			jsonObject.put("count3", list3.size());			jsonObject.put("success", "1");			jsonStr=jsonObject.toString();			return "json";		}						JSONObject jsonObject = new JSONObject();		jsonObject.put("all", list1.size()+list2.size()+list3.size());		jsonObject.put("count1", list1.size()); 		jsonObject.put("count2", list2.size());		jsonObject.put("count3", list3.size());		jsonObject.put("success", "1");		jsonStr=jsonObject.toString();		return "json";			}	/**	 * 	 * 作者：王海洋	 * 时间：2016-2-1下午02:15:29	 * 描述: 获取用户推广人员名单	 * @param pname	 * @return	 */	private List<Object> getList(String pname,String start,String end){		List<Object> list1 = new ArrayList<Object>();		String sql = "select userName from t_tuiguang where pName='"+pname+"' ";		String sql1=" select userName from t_tuiguang where pName in (";		String sql2=")";		String pids="";		list1= myCommonDao.executeSql(1,  sql);		for (int i = 0; i < list1.size(); i++) {			if(i==0){				pids="'"+list1.get(i).toString()+"'";			}else{				pids+=","+"'"+list1.get(i).toString()+"'";			}		}		List<Object> list2 =new ArrayList<Object>();		if(list1!=null&&list1.size()>0){			list2 = myCommonDao.executeSql(1,sql1+pids+sql2);		}		for (int i = 0; i < list2.size(); i++) {			if(i==0){				pids="'"+list2.get(i).toString()+"'";			}else{				pids+=","+"'"+list2.get(i).toString()+"'";			}		}		List<Object> list3 =new ArrayList<Object>();		if(list2!=null&&list2.size()>0){			list3 = myCommonDao.executeSql(1,sql1+pids+sql2);		}		list1.addAll(list2);		list1.addAll(list3);		if(StringUtils.isNotBlank(end)){			sql2 = sql2 + " and createtime <='"+end+"' ";		}		if(StringUtils.isNotBlank(start)){			sql2 = sql2 +  " and createtime >='"+start+"' ";		}		if(list1!=null && list1.size()>0){			list2 = new ArrayList<Object>();			for (int i = 0; i < list1.size(); i++) {				if(i==0){					pids="'"+list1.get(i).toString()+"'";				}else{					pids+=","+"'"+list1.get(i).toString()+"'";				}			}			sql1 = " select userName from t_tuiguang where userName in (";			list2 = myCommonDao.executeSql(1,sql1+pids+sql2);			return list2;		}		return null;	}		@Override	public String selectList() throws Exception {		if(StringUtils.isNotBlank(e.getPName())){			e.setPName(e.getPName().trim());		}		if("y".equals(e.getIsJiLian())&&StringUtils.isNotBlank(e.getPName())){			String pname = e.getPName();			List<Object> list = this.getList(pname,e.getStartDate(),e.getEndDate());			/*e.setStartDate(null);			e.setEndDate(null);*/			List<String> bPnames = new ArrayList<String>();			String str = "";			if(list!=null && list.size()>0){				for(Object object:list){					bPnames.add(String.valueOf(object));					str +="'"+String.valueOf(object)+"',";				}			}			if(StringUtils.isBlank(str)){//表示没有推广到人的情况				bPnames.add("_--1");			}			e.setbPnames(bPnames);		}		return super.selectList();	}	@Override	protected void selectListAfter() {		pager.setPagerUrl("email!selectList.action");	}		@Override	public TuiGuang getE() {		return this.e;	}	@Override	public void prepare() throws Exception {		if (this.e == null) {			this.e = new TuiGuang();		}	}	@Override	public void insertAfter(TuiGuang e) {		e.clear();	}	public String getJsonStr() {		return jsonStr;	}	public void setJsonStr(String jsonStr) {		this.jsonStr = jsonStr;	}	public final void afterPropertiesSet() throws IllegalArgumentException,			BeanInitializationException {		myCommonDao.afterPropertiesSet();	}	@Override	public boolean equals(Object obj) {		return myCommonDao.equals(obj);	}	public List<Object> executeSql(int type, String str) {		return myCommonDao.executeSql(type, str);	}	public final SqlSession getSqlSession() {		return myCommonDao.getSqlSession();	}	@Override	public int hashCode() {		return myCommonDao.hashCode();	}	public final void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) {		myCommonDao.setSqlSessionFactory(sqlSessionFactory);	}	public final void setSqlSessionTemplate(			SqlSessionTemplate sqlSessionTemplate) {		myCommonDao.setSqlSessionTemplate(sqlSessionTemplate);	}	@Override	public String toString() {		return myCommonDao.toString();	}	public MyCommonDao getMyCommonDao() {		return myCommonDao;	}	public void setMyCommonDao(MyCommonDao myCommonDao) {		this.myCommonDao = myCommonDao;	}}