package net.jeeshop.services.front.order.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import net.jeeshop.core.FrontContainer;import net.jeeshop.core.KeyValueHelper;import net.jeeshop.core.MyCommonDao;import net.jeeshop.core.ServersManager;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.util.CommonPropertiesUtil;import net.jeeshop.core.util.DateUtil;import net.jeeshop.core.util.SendSMSUtil;import net.jeeshop.services.common.Profit;import net.jeeshop.services.front.account.AccountService;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.company.bean.Company;import net.jeeshop.services.front.company.dao.CompanyDao;import net.jeeshop.services.front.coupon.bean.Coupon;import net.jeeshop.services.front.coupon.dao.CouponDao;import net.jeeshop.services.front.order.OrderService;import net.jeeshop.services.front.order.bean.Order;import net.jeeshop.services.front.order.bean.OrderSimpleReport;import net.jeeshop.services.front.order.dao.OrderDao;import net.jeeshop.services.front.orderdetail.bean.Orderdetail;import net.jeeshop.services.front.orderdetail.dao.OrderdetailDao;import net.jeeshop.services.front.orderlog.bean.Orderlog;import net.jeeshop.services.front.orderlog.dao.OrderlogDao;import net.jeeshop.services.front.orderpay.bean.Orderpay;import net.jeeshop.services.front.orderpay.dao.OrderpayDao;import net.jeeshop.services.front.ordership.bean.Ordership;import net.jeeshop.services.front.ordership.dao.OrdershipDao;import net.jeeshop.services.front.product.bean.Product;import net.jeeshop.services.front.product.bean.ProductStockInfo;import net.jeeshop.services.front.product.dao.ProductDao;import net.jeeshop.services.manage.profit.dao.ProfitDao;import org.apache.commons.lang.StringUtils;import org.slf4j.LoggerFactory;public class OrderServiceImpl extends ServersManager<Order> implements		OrderService {	private static final org.slf4j.Logger logger = LoggerFactory			.getLogger(OrderServiceImpl.class);	private OrderDao orderDao;	private OrderdetailDao orderdetailDao;	private OrderpayDao orderpayDao;	private OrdershipDao ordershipDao;	private OrderlogDao orderlogDao;	private ProductDao productDao;	private CompanyDao companyDao;	private AccountService accountService;	private MyCommonDao myCommonDao;	private ProfitDao profitDao;	private CouponDao couponDao;			public ProfitDao getProfitDao() {		return profitDao;	}	public void setProfitDao(ProfitDao profitDao) {		this.profitDao = profitDao;	}	public CouponDao getCouponDao() {		return couponDao;	}	public void setCouponDao(CouponDao couponDao) {		this.couponDao = couponDao;	}	public void setMyCommonDao(MyCommonDao myCommonDao) {		this.myCommonDao = myCommonDao;	}	public void setCompanyDao(CompanyDao companyDao) {		this.companyDao = companyDao;	}	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}	public void setProductDao(ProductDao productDao) {		this.productDao = productDao;	}	public void setOrderpayDao(OrderpayDao orderpayDao) {		this.orderpayDao = orderpayDao;	}	public void setOrderlogDao(OrderlogDao orderlogDao) {		this.orderlogDao = orderlogDao;	}	public void setOrdershipDao(OrdershipDao ordershipDao) {		this.ordershipDao = ordershipDao;	}	public void setOrderdetailDao(OrderdetailDao orderdetailDao) {		this.orderdetailDao = orderdetailDao;	}	public void setOrderDao(OrderDao orderDao) {		this.orderDao = orderDao;	}	@Override	public boolean createOrderOld(Order order,			List<Orderdetail> orderdetailList, Ordership ordership)			throws Exception {		if (order == null || orderdetailList == null				|| orderdetailList.size() == 0 || ordership == null) {			throw new NullPointerException("参数不能为空！");		}		// 对商品进行砍库存，并同步内存中的库存数据		// if(!no){		// //如果检查没有出现库存不足的情况，则进行砍库存操作		// for (int i = 0; i < cartInfo.getProductList().size(); i++) {		// Product product = cartInfo.getProductList().get(i);		// ProductStockInfo stockInfo =		// SystemManager.productStockMap.get(product.getId());		// stockInfo.setStock(stockInfo.getStock() - product.getBuyCount());		// stockInfo.setChangeStock(true);		// SystemManager.productStockMap.put(product.getId(),stockInfo);		// }		// }		// 创建订单		int orderID = orderDao.insert(order);		logger.debug("orderID=" + orderID);		// 创建订单项		for (int i = 0; i < orderdetailList.size(); i++) {			Orderdetail orderdetail = orderdetailList.get(i);			orderdetail.setOrderID(orderID);			orderdetailDao.insert(orderdetail);		}		// 创建支付记录对象		Orderpay orderpay = new Orderpay();		orderpay.setOrderid(order.getId());		orderpay.setPaystatus(net.jeeshop.services.common.Orderpay.orderpay_paystatus_n);		orderpay.setPayamount(Double.valueOf(order.getAmount()));		orderpay.setPaymethod(net.jeeshop.services.common.Orderpay.orderpay_paymethod_alipayescow);		int orderpayID = orderpayDao.insert(orderpay);		logger.error("orderpayID=" + orderpayID);		order.setOrderpayID(String.valueOf(orderpayID));		// 记录配送信息		ordership.setOrderid(String.valueOf(orderID));		ordershipDao.insert(ordership);		// 记录订单创建日志		Orderlog orderlog = new Orderlog();		orderlog.setOrderid(String.valueOf(orderID));		orderlog.setAccount(order.getAccount());		orderlog.setContent("【创建订单】用户创建订单。订单总金额：" + order.getAmount());		orderlog.setAccountType(net.jeeshop.services.common.Orderlog.orderlog_accountType_w);		orderlogDao.insert(orderlog);		return true;	}	@Override	public boolean createOrder(Order order, Orderdetail orderdetail,			Ordership ordership) throws Exception {		// 创建订单		int orderID = orderDao.insert(order);		logger.debug("orderID=" + orderID);		// 创建订单项		orderdetail.setOrderID(orderID);		orderdetailDao.insert(orderdetail);		// 创建支付记录对象		Orderpay orderpay = new Orderpay();		orderpay.setOrderid(order.getId());		orderpay.setPaystatus(net.jeeshop.services.common.Orderpay.orderpay_paystatus_n);		orderpay.setPayamount(Double.valueOf(order.getAmount()));		orderpay.setPaymethod(net.jeeshop.services.common.Orderpay.orderpay_paymethod_alipayescow);		int orderpayID = orderpayDao.insert(orderpay);		logger.error("orderpayID=" + orderpayID);		order.setOrderpayID(String.valueOf(orderpayID));		// 记录配送信息		ordership.setOrderid(String.valueOf(orderID));		ordershipDao.insert(ordership);		// 记录订单创建日志		Orderlog orderlog = new Orderlog();		orderlog.setOrderid(String.valueOf(orderID));		orderlog.setAccount(order.getAccount());		orderlog.setContent("【创建订单】用户创建订单。订单总金额：" + order.getAmount());		orderlog.setAccountType(net.jeeshop.services.common.Orderlog.orderlog_accountType_w);		orderlogDao.insert(orderlog);		return true;	}	@Override	public List<Order> selectOrderInfo(Order order) {		return orderDao.selectOrderInfo(order);	}	// @Override	// public boolean updateOrderStatus(Order order) {	// if(order==null){	// throw new NullPointerException("参数不能为空！");	// }	//	// Orderpay orderpay = orderpayDao.selectById(order.getOrderpayID());	// if(orderpay==null){	// throw new NullPointerException("根据支付记录号查询不到支付记录信息！");	// }	// String orderid = orderpay.getOrderid();//订单ID	//			// //更新支付记录为成功支付	// Orderpay orderpay2 = new Orderpay();	// orderpay2.setId(order.getOrderpayID());	// orderpay2.setTradeNo(order.getTradeNo());	// orderpay2.setPaystatus(Orderpay.orderpay_paystatus_y);	// orderpayDao.update(orderpay2);	//			// //更新订单的支付状态为成功支付	// order.setId(orderid);	// order.setPaystatus(Order.order_paystatus_y);	// orderDao.update(order);	// return true;	// }	@Override	public boolean alipayNotify(String trade_status, String refund_status,			String out_trade_no, String trade_no) {		try {			return alipayNotify0(trade_status, refund_status, out_trade_no,					trade_no);		} catch (Exception e) {			logger.error(">>>alipayNotify...Exception..");			e.printStackTrace();			return false;		}	}	private boolean alipayNotify0(String trade_status, String refund_status,			String out_trade_no, String trade_no) {		synchronized (FrontContainer.alipay_notify_lock) {			logger.error("trade_status = " + trade_status + ",refund_status = "					+ refund_status + ",out_trade_no = " + out_trade_no					+ ",trade_no = " + trade_no);			if ((StringUtils.isBlank(trade_status) && StringUtils					.isBlank(refund_status))					|| (StringUtils.isBlank(out_trade_no) && StringUtils							.isBlank(trade_no))) {				logger.error("请求非法!");				return false;			}			String orderpayID = null;			if (out_trade_no.startsWith("test")) {				// 此处做一个说明,localhost或127.0.0.1下的订单的请求发给支付宝的商户订单号都是test开头的，正式的都是非test开头的。				// 可以参见OrdersAction.createPayInfo()方法。				orderpayID = out_trade_no.substring(4);			} else {				orderpayID = out_trade_no;			}			logger.error("orderpayID = " + orderpayID);			Orderpay orderpay = orderpayDao.selectById(orderpayID);			if (orderpay == null) {				throw new NullPointerException("根据支付记录号查询不到支付记录信息！");			}			String orderid = orderpay.getOrderid();// 订单ID			String content = null;			if (StringUtils.isNotBlank(refund_status)) {				/**				 * 退款流程				 */				if (refund_status.equals("WAIT_SELLER_AGREE")) {// 等待卖家同意退款					// ==>卖家需处理					content = "【支付宝异步通知-->退款流程】等待卖家同意退款(WAIT_SELLER_AGREE)。";				} else if (refund_status.equals("WAIT_BUYER_RETURN_GOODS")) {// 卖家同意退款，等待买家退货					// ==>通知买家退货，此					// 可以发站内信、短信、或邮件					// 通知对方					content = "【支付宝异步通知-->退款流程】退款协议达成，等待买家退货(WAIT_BUYER_RETURN_GOODS)。";				} else if (refund_status.equals("WAIT_SELLER_CONFIRM_GOODS")) {// 买家已退货，等待卖家收到退货					// ==>支付宝会通知卖家					content = "【支付宝异步通知-->退款流程】等待卖家收货(WAIT_SELLER_CONFIRM_GOODS)。";				} else if (refund_status.equals("REFUND_SUCCESS")) {// 卖家收到退货，退款成功，交易关闭					// ==>卖家登陆支付宝，确认OK。					// http://club.alipay.com/simple/?t9978565.html					content = "【支付宝异步通知-->退款流程】退款成功(REFUND_SUCCESS)。";				} else if (refund_status.equals("REFUND_CLOSED")) {// 卖家收到退货，退款成功，交易关闭					// ==>卖家登陆支付宝，确认OK。					// http://club.alipay.com/simple/?t9978565.html					content = "【支付宝异步通知-->退款流程】退款关闭(REFUND_CLOSED)。";				} else if (refund_status.equals("SELLER_REFUSE_BUYER")) {// 卖家收到退货，退款成功，交易关闭					// ==>卖家登陆支付宝，确认OK。					// http://club.alipay.com/simple/?t9978565.html					content = "【支付宝异步通知-->退款流程】卖家不同意协议，等待买家修改(SELLER_REFUSE_BUYER)。";				} else {					// 一般不会出现					content = "【支付宝异步通知-->退款流程】未知。refund_status = "							+ refund_status;				}				updateRefundStatus(orderid, refund_status);			} else if (StringUtils.isNotBlank(trade_status)) {				/**				 * 交易流程				 */				if (trade_status.equals("WAIT_BUYER_PAY")) {// 等待买家付款					content = "【支付宝异步通知】等待买家付款(WAIT_BUYER_PAY)。";				} else if (trade_status.equals("WAIT_SELLER_SEND_GOODS")) {// 已付款，等待卖家发货					if (orderpay.getPaystatus().equals(							net.jeeshop.services.common.Orderpay.orderpay_paystatus_y)) {						// 由于支付宝的同步通知、异步通知，那么WAIT_SELLER_SEND_GOODS的时候会有2次通知，所以需要synchronized处理好,保证订单状态和日志的一致性。						return true;					}					content = "【支付宝异步通知】已付款，等待卖家发货(WAIT_SELLER_SEND_GOODS)。";					// 更新支付记录为【成功支付】					Orderpay orderpay2 = new Orderpay();					orderpay2.setId(orderpayID);					orderpay2.setTradeNo(trade_no);					orderpay2.setPaystatus(net.jeeshop.services.common.Orderpay.orderpay_paystatus_y);					orderpayDao.update(orderpay2);					/**					 * 真实砍库存，并同步减少内容库存数					 */					logger.error("真实砍库存，并同步减少内容库存数...");					Orderdetail orderdetail = new Orderdetail();					orderdetail.setOrderID(Integer.valueOf(orderid));					List<Orderdetail> orderdetailList = orderdetailDao							.selectList(orderdetail);					logger.error("orderdetailList = " + orderdetailList.size());					String lowStocks = null;// 订单是否缺货记录					// int score = 0;//商品积分汇总					for (int i = 0; i < orderdetailList.size(); i++) {						Orderdetail detailInfo = orderdetailList.get(i);						String productID = String.valueOf(detailInfo								.getProductID());						// 内存砍库存呢						ProductStockInfo stockInfo = SystemManager.productStockMap								.get(productID);						if (stockInfo.getStock() >= detailInfo.getNumber()) {							stockInfo.setStock(stockInfo.getStock()									- detailInfo.getNumber());							stockInfo.setChangeStock(true);							// 数据库砍库存							Product product = new Product();							product.setId(productID);							product.setStock(stockInfo.getStock());							product.setAddSellcount(detailInfo.getNumber());// 增加销量							productDao.updateStockAfterPaySuccess(product);						} else {							lowStocks = net.jeeshop.services.common.Order.order_lowStocks_y;							// 记录库存不足							Orderdetail od = new Orderdetail();							od.setId(detailInfo.getId());							od									.setLowStocks(net.jeeshop.services.common.Orderdetail.orderdetail_lowstocks_y);							orderdetailDao.update(od);						}						// score += stockInfo.getScore();						logger.error("productID = " + productID								+ ",stockInfo.getStock() = "								+ stockInfo.getStock());						// SystemManager.productStockMap.put(product.getId(),stockInfo);					}					// 更新订单的支付状态为【已支付】					Order order = new Order();					order.setId(orderid);					if (lowStocks != null) {						order.setLowStocks(net.jeeshop.services.common.Order.order_lowStocks_y);					}					order.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);					orderDao.update(order);				} else if (trade_status.equals("WAIT_BUYER_CONFIRM_GOODS")) {// 已发货，等待买家确认收货					content = "【支付宝异步通知】已发货，等待买家确认收货(WAIT_BUYER_CONFIRM_GOODS)。";					// 更新订单状态为【已发货】					Order order = orderDao.selectById(orderid);					if (order == null) {						throw new NullPointerException("根据订单号查询不到订单信息，orderid="								+ orderid);					}					logger.error("order.getStatus()" + order.getStatus()							+ ",trade_status=WAIT_BUYER_CONFIRM_GOODS");					Orderlog orderlog = new Orderlog();					orderlog.setContent(content);					orderlog.setAccount(order.getAccount());					// 临时解决办法,防止此日志重复记录.					if (orderlogDao.selectCount(orderlog) > 0) {						return true;					}					// if(order.getStatus().equals(Order.order_status_send)){					// //当前订单状态已经是这个状态了，无需重复操作。					// return true;					// }					// 防止由于支付宝异步消息的先后顺序，导致把订单的状态更新混乱了。					if (order.getStatus().equals(net.jeeshop.services.common.Order.order_status_pass)) {						order = new Order();						order.setId(orderid);						order.setStatus(net.jeeshop.services.common.Order.order_status_send);						orderDao.update(order);					}				} else if (trade_status.equals("TRADE_FINISHED")) {// 交易完成					content = "【支付宝异步通知】交易完成(TRADE_FINISHED)。";					Order order = orderDao.selectById(orderid);					if (order == null) {						throw new NullPointerException("根据订单号查询不到订单信息，orderid="								+ orderid);					}					// 订单结束后，订单上面赠送的积分都成功转移到用户账户上。					Account acc = new Account();					acc.setAccount(order.getAccount());					acc.setAddScore(order.getScore()							- order.getAmountExchangeScore());// 支付完成，扣除订单消耗的积分					accountService.updateScore(acc);					// 更新订单状态为【已签收】					order = new Order();					order.setId(orderid);					order.setStatus(net.jeeshop.services.common.Order.order_status_sign);					orderDao.update(order);				} else {					// 一般不会出现					content = "【支付宝异步通知】未知。trade_status = " + trade_status;				}			} else {				throw new RuntimeException("运行异常!");			}			/**			 * 以上代码,如不可以返回都会走到此处,记录下日志.			 */			insertOrderlog(orderid, content);			return true;		}	}	/**	 * 快捷支付	 * 	 * @author penguin	 * @param trade_status	 *            交易状态	 * @param trade_order_no	 *            商户订单号	 * @return	 */	@Override	public boolean quickpayNotify(String trade_status, String trade_order_no) {		if (StringUtils.isBlank(trade_status)				|| (StringUtils.isBlank(trade_order_no))) {			logger.error("请求非法!");			return false;		}		String orderpayID = null;		orderpayID = trade_order_no;		Orderpay orderpay = orderpayDao.selectById(orderpayID);		if (orderpay == null) {			throw new NullPointerException("根据支付记录号查询不到支付记录信息！");		}		String orderid = orderpay.getOrderid();// 订单ID		String content = null;		if (StringUtils.isNotBlank(trade_status)) {			/**			 * 交易流程			 */			if (trade_status.equals("WAIT_BUYER_PAY")) {// 等待买家付款				content = "【等待买家付款】(WAIT_BUYER_PAY)。";			} else if (trade_status.equals("WAIT_SELLER_SEND_GOODS")) {// 已付款，等待卖家发货				if (orderpay.getPaystatus().equals(						net.jeeshop.services.common.Orderpay.orderpay_paystatus_y)) {					// 由于支付宝的同步通知、异步通知，那么WAIT_SELLER_SEND_GOODS的时候会有2次通知，所以需要synchronized处理好,保证订单状态和日志的一致性。					return true;				}				content = "【已付款，等待卖家发货】(WAIT_SELLER_SEND_GOODS)。";				// 更新支付记录为【成功支付】				Orderpay orderpay2 = new Orderpay();				orderpay2.setId(orderpayID);				orderpay2.setTradeNo(String.valueOf(System.currentTimeMillis()));				orderpay2.setPaystatus(net.jeeshop.services.common.Orderpay.orderpay_paystatus_y);				orderpayDao.update(orderpay2);				/**				 * 真实砍库存，并同步减少内容库存数				 */				logger.error("真实砍库存，并同步减少内容库存数...");				Orderdetail orderdetail = new Orderdetail();				orderdetail.setOrderID(Integer.valueOf(orderid));				List<Orderdetail> orderdetailList = orderdetailDao						.selectList(orderdetail);				logger.error("orderdetailList = " + orderdetailList.size());				String lowStocks = null;// 订单是否缺货记录				// int score = 0;//商品积分汇总												/*				 * 减库存操作已去除,移到确认订单,若取消订单再恢复				 * 2015-12-20				 * teng				 * ------------------->开始				for (int i = 0; i < orderdetailList.size(); i++) {					Orderdetail detailInfo = orderdetailList.get(i);					String productID = String							.valueOf(detailInfo.getProductID());					// 内存砍库存呢					ProductStockInfo stockInfo = SystemManager.productStockMap							.get(productID);					if (stockInfo.getStock() >= detailInfo.getNumber()) {						stockInfo.setStock(stockInfo.getStock()- detailInfo.getNumber());						stockInfo.setChangeStock(true);						if(StringUtils.isNotBlank(detailInfo.getSpecInfo())){							Integer kc = stockInfo.getSpecMap().get(detailInfo.getSpecInfo());							stockInfo.getSpecMap().put(detailInfo.getSpecInfo(), kc- detailInfo.getNumber());						}						 SystemManager.productStockMap.put(productID, stockInfo);						// 数据库砍库存						Product product = new Product();						product.setId(productID);						product.setStock(stockInfo.getStock());						product.setAddSellcount(detailInfo.getNumber());// 增加销量已改到确认收货						productDao.updateStockAfterPaySuccess(product);					} else {						lowStocks = Order.order_lowStocks_y;						// 记录库存不足						Orderdetail od = new Orderdetail();						od.setId(detailInfo.getId());						od.setLowStocks(Orderdetail.orderdetail_lowstocks_y);						orderdetailDao.update(od);					}					// score += stockInfo.getScore();					logger							.error("productID = " + productID									+ ",stockInfo.getStock() = "									+ stockInfo.getStock());					// SystemManager.productStockMap.put(product.getId(),stockInfo);				}				----------------------->结束				*/												// 更新订单的支付状态为【已支付】				Order order = new Order();				System.out.println("==================================="+order.getPtotal());				order.setId(orderid);				if (lowStocks != null) {					order.setLowStocks(net.jeeshop.services.common.Order.order_lowStocks_y);				}				order.setPaystatus(net.jeeshop.services.common.Order.order_paystatus_y);				order.setStatus(net.jeeshop.services.common.Order.order_status_pass);				orderDao.update(order);				order = orderDao.selectById(orderid);				Company com = companyDao.selectById(order.getCompID());								//发送短信				String sms = CommonPropertiesUtil.getSMStemValue( "WAIT_SELLER_SEND_GOODS").replace("orderid", orderid);				String rtmsg=SendSMSUtil.sendSMS(sms,com.getContactorTelephone());				logger.error("支付成功发送短信--->号码："+com.getContactorTelephone()+"，内容："+sms+",结果："+rtmsg);							} else if (trade_status.equals("WAIT_BUYER_CONFIRM_GOODS")) {// 已发货，等待买家确认收货				content = "【已发货，等待买家确认收货】(WAIT_BUYER_CONFIRM_GOODS)。";				// 更新订单状态为【已发货】				Order order = orderDao.selectById(orderid);				if (order == null) {					throw new NullPointerException("根据订单号查询不到订单信息，orderid="							+ orderid);				}				logger.error("order.getStatus()" + order.getStatus()						+ ",trade_status=WAIT_BUYER_CONFIRM_GOODS");				Orderlog orderlog = new Orderlog();				orderlog.setContent(content);				orderlog.setAccount(order.getAccount());				// 临时解决办法,防止此日志重复记录.				if (orderlogDao.selectCount(orderlog) > 0) {					return true;				}				// if(order.getStatus().equals(Order.order_status_send)){				// //当前订单状态已经是这个状态了，无需重复操作。				// return true;				// }				// 防止由于支付宝异步消息的先后顺序，导致把订单的状态更新混乱了。				if (order.getStatus().equals(net.jeeshop.services.common.Order.order_status_pass)) {					order = new Order();					order.setId(orderid);					order.setStatus(net.jeeshop.services.common.Order.order_status_send);					orderDao.update(order);				}			} else if (trade_status.equals("TRADE_FINISHED")) {// 交易完成				content = "【交易完成】(TRADE_FINISHED)。";				Order order = orderDao.selectById(orderid);				if (order == null) {					throw new NullPointerException("根据订单号查询不到订单信息，orderid="							+ orderid);				}				// 订单结束后，订单上面赠送的积分都成功转移到用户账户上。				Account acc = new Account();				acc.setAccount(order.getAccount());				acc.setAddScore(order.getScore()						- order.getAmountExchangeScore());// 支付完成，扣除订单消耗的积分				accountService.updateScore(acc);				// 更新订单状态为【已签收】				order = new Order();				order.setId(orderid);				order.setStatus(net.jeeshop.services.common.Order.order_status_sign);				orderDao.update(order);			} else {				// 一般不会出现				content = "【未知】未知。trade_status = " + trade_status;			}		} else {			throw new RuntimeException("运行异常!");		}		/**		 * 以上代码,如不可以返回都会走到此处,记录下日志.		 */		insertOrderlog(orderid, content);		return true;	}	/**	 * 更新订单的退款状态	 * 	 * @param orderid	 *            订单ID	 * @param refundStatus	 *            退款状态	 */	private void updateRefundStatus(String orderid, String refundStatus) {		Order order = new Order();		order.setId(orderid);		order.setRefundStatus(refundStatus);		orderDao.update(order);	}	/**	 * 插入订单操作日志	 * 	 * @param orderid	 *            订单ID	 * @param content	 *            日志内容	 */	private void insertOrderlog(String orderid, String content) {		Orderlog orderlog = new Orderlog();		orderlog.setOrderid(orderid);// 订单ID		orderlog.setAccount("alipay_notify");// 操作人账号		orderlog.setContent(content);// 日志内容		orderlog.setAccountType(net.jeeshop.services.common.Orderlog.orderlog_accountType_p);		orderlogDao.insert(orderlog);	}	@Override	public OrderSimpleReport selectOrdersSimpleReport(String account) {		return orderDao.selectOrdersSimpleReport(account);	}	@Override	public List<Order> selectListByPid(String orderid) {		// TODO Auto-generated method stub		return orderDao.selectListByPid(orderid);	}	@Override	public boolean quickpayMergeNotify(String tradeStatus, String orderid) {		// TODO Auto-generated method stub		Order order = orderDao.selectById(orderid);		if(order.getIsParent()!=null&&order.getIsParent().equals("y")){			 List<Order> list = orderDao.selectListByPid(orderid);			 for (Order o : list) {				 Orderpay op= new Orderpay();				 op.setOrderid(o.getId());				 List<Orderpay> list2 = orderpayDao.selectList(op);				 if(list2==null||list2.size()==0){					 continue;				 }				 quickpayNotify(tradeStatus,list2.get(0).getId());			}		}else{			 Orderpay op= new Orderpay();			 op.setOrderid(orderid);			 List<Orderpay> list2 = orderpayDao.selectList(op);			 if(list2==null||list2.size()==0){				 return false;			 }			 quickpayNotify(tradeStatus,list2.get(0).getId());		}		return true;	}	/**	 * 自动确认收货	 */	@Override	public void szqrsh() {		// TODO Auto-generated method stub		List<Object> listid = myCommonDao.executeSql(1, "select id from t_order where status='send' and paystatus='y' and receiveTime<'"+DateUtil.dateToStrSS()+"'");		if(listid!=null&&listid.size()>0){			Order o=new Order();			List<String> lists=new ArrayList<String>();			for (Object ob : listid) {				lists.add(ob.toString());			}			o.setQueryOrderIDs(lists);			List<Order> listo = orderDao.selectList(o);			for (Order order : listo) {				String orderid=order.getId();				Account acc =new Account();				acc.setAccount(order.getAccount());				acc=accountService.selectOne(acc);								if(order==null){					throw new NullPointerException("根据订单号查询不到订单信息！");				}								Ordership ordership = ordershipDao.selectOne(new Ordership(orderid));				if(ordership==null){					throw new NullPointerException("根据订单号查询不到配送信息！");				}								//购买物品列表				Orderdetail orderdetail=new Orderdetail();				orderdetail.setOrderID(Integer.valueOf(orderid));				List<Orderdetail> odlist = orderdetailDao.selectList(orderdetail);				for (Orderdetail od : odlist) {					// 数据库加销量					Product product = new Product();					product.setId(od.getProductID()+"");					product.setAddSellcount(od.getNumber());// 增加销量					productDao.updateStockAfterPaySuccess(product);				}								/*				 * 积分处理				 * teng				 */								if(order.getActivityID()!=null&&!order.getActivityID().equals("")){					Account acc2=new Account();					acc2.setId(acc.getId());					acc2.setMoney((acc.getMoney()==null?0.0:acc.getMoney())+order.getIntegral());					accountService.updateMoney(acc2);				}								/*				 * 返优惠券处理				 * teng				 */				Double ptotal=Double.valueOf(order.getPtotal())-(order.getCoupon()==null?0:order.getCoupon());				Company com1 = companyDao.selectById(order.getCompID());				Coupon coupon=new Coupon();				coupon.setOwnerName(com1.getCreateAccount());				coupon.setStatus(net.jeeshop.services.common.Coupon.status_y);				coupon.setParentID("two");				List<Coupon> list2 = couponDao.selectList(coupon);				coupon=null;				for (Coupon cp2 : list2) {					if(cp2.getBegin()==null||ptotal>=cp2.getBegin()){						if(cp2.getEnd()==null||ptotal<cp2.getEnd()){							coupon=cp2;							break;						}					}				}				if(coupon!=null){					Coupon cp2=new Coupon();					cp2.setOrientationType(coupon.getOrientationType());					cp2.setOrientationID(coupon.getOrientationID());					cp2.setOrientationName(coupon.getOrientationName());					cp2.setOwnerID(acc.getId());					cp2.setOwnerName(acc.getAccount());					cp2.setOwnerType(net.jeeshop.services.common.Coupon.ownerType_user);					cp2.setAmount(coupon.getMaxMoney()*Math.floor((ptotal/coupon.getBegin())));					cp2.setRemaining(cp2.getAmount());					cp2.setRecycle(0.00);					cp2.setStatus(net.jeeshop.services.common.Coupon.status_y);					cp2.setParentID(coupon.getId());										cp2.setBeginTime(coupon.getBeginTime());					cp2.setEndTime(coupon.getEndTime());					couponDao.insert(cp2);					Coupon cp3=new Coupon();					cp3.setId(coupon.getId());					cp3.setRemaining(coupon.getRemaining()-cp2.getAmount());					couponDao.update(cp3);									}												//推荐者返款				if(acc.getPresenter()!=null&&!acc.getPresenter().equals("")){					//上级					Account pa=new Account();										if(acc.getPresenter().equals("0")){						pa=acc;					}else{					pa.setAccount(acc.getPresenter());					pa = accountService.selectOne(pa);					}					//上级商家					Company c=new Company();					c.setCreateAccount(pa.getAccount());					c=companyDao.selectOne(c);										//购买物品					for (Orderdetail od : odlist) {																		if(od.getPurchasePrice()==null||Double.valueOf(od.getPrice())<=od.getPurchasePrice()){							continue;						}																		Product p = productDao.selectById(od.getProductID()+"");						if(p.getChuChangPrice()==null||p.getChuChangPrice().length()==0){							continue;						}																		Profit profit=new Profit();												profit.setPresentee(acc.getAccount());						profit.setProductID(od.getProductID()+"");						profit.setProductName(od.getProductName());						profit.setNumber(od.getNumber());						profit.setPrice(Double.valueOf(od.getPrice()));						profit.setCreateTime(DateUtil.dateToStr(new Date(),"yyyy-MM-dd HH:mm:ss"));																		profit.setCompID(p.getCompID());						profit.setCompName(p.getCompName());						profit.setProfit(Double.valueOf(od.getPrice())-od.getPurchasePrice());																		if(c!=null&&p.getCompID().equals(c.getId())){							Account a2=new Account();							//推荐者收益							profit.setType("2");							if(pa.getPresenter()==null||pa.getPresenter().equals("0")){							profit.setUserID(pa.getId());							profit.setAccount(pa.getAccount());							profit.setRatio(Double.valueOf(KeyValueHelper.get("SYBL2").split(":")[0])/10*100);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio());							a2.setId(profit.getUserID());							a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitDao.insert(profit);							}else{								Double sybl=Double.valueOf(KeyValueHelper.get("SYBL2").split(":")[0])/10;																								Account pa2=new Account();								pa2.setAccount(pa.getPresenter());								pa2 = accountService.selectOne(pa2);								if(pa2.getPresenter()==null||pa2.getPresenter().equals("0")){//一级推广为空(只有两级)																		Double sybl1=sybl*Double.valueOf(KeyValueHelper.get("SYBL3").split(":")[0])/10;									Double sybl2=sybl*Double.valueOf(KeyValueHelper.get("SYBL3").split(":")[1])/10;																if(pa2==null){//二级推广为空(只有一级)									profit.setUserID(pa.getId());									profit.setAccount(pa.getAccount());									profit.setRatio(sybl);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);																	}else{//二级推广不为空(有两级)									profit.setUserID(pa.getId());									profit.setAccount(pa.getAccount());									profit.setRatio(sybl2);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);																											profit.setId(null);									profit.setUserID(pa2.getId());									profit.setAccount(pa2.getAccount());									profit.setRatio(sybl1);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);																	}								}else{//一级推广不为空(有三级)									Double sybl1=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[0])/10;									Double sybl2=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[1])/10;									Double sybl3=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[2])/10;																		profit.setUserID(pa.getId());									profit.setAccount(pa.getAccount());									profit.setRatio(sybl3);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);																											profit.setId(null);									profit.setUserID(pa2.getId());									profit.setAccount(pa2.getAccount());									profit.setRatio(sybl2);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);																		Account pa3=new Account();									pa3.setAccount(pa2.getPresenter());									pa3 = accountService.selectOne(pa3);																		profit.setId(null);									profit.setUserID(pa3.getId());									profit.setAccount(pa3.getAccount());									profit.setRatio(sybl1);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa3.getMoney()==null?0:pa3.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);								}															}							//平台收益							profit.setId(null);							profit.setType("1");							Account pa2=accountService.selectById(KeyValueHelper.get("PTSYZH"));							profit.setUserID(pa2.getId());							profit.setAccount(pa2.getAccount());							profit.setRatio(Double.valueOf(KeyValueHelper.get("SYBL2").split(":")[1])/10);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitDao.insert(profit);														//渠道商收益							profit.setId(null);							profit.setType("4");														pa2=accountService.selectById(KeyValueHelper.get("PTSYZH2"));							profit.setUserID(pa2.getId());							profit.setAccount(pa2.getAccount());							profit.setRatio(Double.valueOf(KeyValueHelper.get("SYBL2").split(":")[2])/10);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitDao.insert(profit);													}else{							Account a2=new Account();							//推荐者收益							profit.setType("3");							Double sybl=Double.valueOf(KeyValueHelper.get("SYBL1").split(":")[0])/10;							if(pa.getPresenter()==null||pa.getPresenter().equals("0")){							profit.setUserID(pa.getId());							profit.setAccount(pa.getAccount());							profit.setRatio(sybl);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio());							a2.setId(profit.getUserID());							a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitDao.insert(profit);							}else{																Account pa2=new Account();								pa2.setAccount(pa.getPresenter());								pa2 = accountService.selectOne(pa2);								if(pa2.getPresenter()==null||pa2.getPresenter().equals("0")){//一级推广为空(只有两级)																		Double sybl1=sybl*Double.valueOf(KeyValueHelper.get("SYBL3").split(":")[0])/10;									Double sybl2=sybl*Double.valueOf(KeyValueHelper.get("SYBL3").split(":")[1])/10;																if(pa2==null){//二级推广为空(只有一级)									profit.setUserID(pa.getId());									profit.setAccount(pa.getAccount());									profit.setRatio(sybl);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);																	}else{//二级推广不为空(有两级)									profit.setUserID(pa.getId());									profit.setAccount(pa.getAccount());									profit.setRatio(sybl2);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);																											profit.setId(null);									profit.setUserID(pa2.getId());									profit.setAccount(pa2.getAccount());									profit.setRatio(sybl1);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);																	}								}else{//一级推广不为空(有三级)									Double sybl1=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[0])/10;									Double sybl2=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[1])/10;									Double sybl3=sybl*Double.valueOf(KeyValueHelper.get("SYBL4").split(":")[2])/10;																		profit.setUserID(pa.getId());									profit.setAccount(pa.getAccount());									profit.setRatio(sybl3);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa.getMoney()==null?0:pa.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);																											profit.setId(null);									profit.setUserID(pa2.getId());									profit.setAccount(pa2.getAccount());									profit.setRatio(sybl2);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);																		Account pa3=new Account();									pa3.setAccount(pa2.getPresenter());									pa3 = accountService.selectOne(pa3);																		profit.setId(null);									profit.setUserID(pa3.getId());									profit.setAccount(pa3.getAccount());									profit.setRatio(sybl1);									profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);									a2.setId(profit.getUserID());									a2.setMoney((pa3.getMoney()==null?0:pa3.getMoney())+profit.getFinalProfit());									accountService.updateMoney(a2);									profitDao.insert(profit);								}															}							//平台收益							profit.setId(null);							profit.setType("1");							Account pa2=accountService.selectById(KeyValueHelper.get("PTSYZH"));							profit.setUserID(pa2.getId());							profit.setAccount(pa2.getAccount());							profit.setRatio(Double.valueOf(KeyValueHelper.get("SYBL1").split(":")[1])/10);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitDao.insert(profit);														//商家收益							profit.setId(null);							profit.setType("2");							Company com = companyDao.selectById(p.getCompID());							pa2=new Account();							pa2.setAccount(com.getCreateAccount());							pa2 = accountService.selectOne(pa2);							profit.setUserID(pa2.getId());							profit.setAccount(pa2.getAccount());							profit.setRatio(Double.valueOf(KeyValueHelper.get("SYBL1").split(":")[2])/10);							profit.setFinalProfit(profit.getProfit()*profit.getNumber()*profit.getRatio()*100);							a2.setId(profit.getUserID());							a2.setMoney((pa2.getMoney()==null?0:pa2.getMoney())+profit.getFinalProfit());							accountService.updateMoney(a2);							profitDao.insert(profit);						}											}										if(!DateUtil.strToDate(acc.getPastDue().substring(0,10)).after(DateUtil.strToDate("2999-12-30"))){					Account a=new Account();					a.setId(acc.getId());					a.setPastDue("2999-12-31");					accountService.update(a);					}				}				// 更新订单状态为【已签收】				order = new Order();				order.setId(orderid);				order.setStatus(net.jeeshop.services.common.Order.order_status_sign);				orderDao.update(order);			}		}	}	@Override	public int selectCount(Order e) {		// TODO Auto-generated method stub		return orderDao.selectCount(e);	}}